from __future__ import annotations
from typing import Any
from collections.abc import Iterable
type OpenGlFilter = Any
type BlendFunction = Any
type PyGLenum = Any
type ActionState = Any

class Scene:
    _sprite_lists: list[SpriteList]
    def update(self, names: Iterable[str] | None = ...) -> None: ...
    def on_update(self, delta_time: float = ..., names: Iterable[str] | None = ... ) -> None: ...
    def update_animation(self, delta_time: float, names: Iterable[str] | None = ... ) -> None: ...
    def draw(self, names: Iterable[str] | None = ..., filter: OpenGlFilter | None = ..., pixelated: bool | None = ..., blend_function: BlendFunction | None = ...) -> None: ...

class SpriteList:
    sprite_list: list[Sprite]
    def update(self) -> None: ...
    def on_update(self, delta_time: float = ...) -> None: ...
    def update_animation(self, delta_time: float = ...) -> None: ...
    def draw(self, names: Iterable[str] | None = ..., filter: PyGLenum | OpenGlFilter | None = ..., pixelated: bool | None = ..., blend_function: BlendFunction | None = ...) -> None: ...

class BasicSprite:
    def update(self) -> None: ...
    def on_update(self, delta_time: float = ...) -> None: ...
    def update_animation(self, delta_time: float = ...) -> None: ...

class Sprite(BasicSprite):
    def draw(self) -> None: ...

class SpriteSolidColor(Sprite):
    ...

class SpriteCircle(Sprite):
    ...

class TextureAnimationSprite(Sprite):
    ...

class AnimatedWalkingSprite(Sprite):
    ...

class ShapeElementList:
    def update(self) -> None: ... # Called by draw()
    def draw(self) -> None: ...
    # Uses _Batch to juggle this somehow

class Shape:
    def draw(self) -> None: ...

class Text:
    def draw(self) -> None: ...

class PygletWindow:
    def on_update(self, delta_time: float) -> None: ...
    def on_resize(self, width: int, height: int) -> None: ...
    def on_draw(self) -> None: ...
    def on_key_press(self, symbol: int, modifiers: int) -> None: ...
    def on_key_release(self, symbol: int, modifiers: int) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> None: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_enter(self, x: int, y: int) -> None: ...
    def on_mouse_leave(self, x: int, y: int) -> None: ...
    def on_mouse_press(self, x: int, y: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_release(self, x: int, y: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: float, scroll_y: float) -> None: ...
    def on_show(self) -> None: ...
    def on_hide(self) -> None: ...
    def on_expose(self) -> None: ...
    def on_close(self) -> None: ...
    def on_activate(self) -> None: ...
    def on_deactivate(self) -> None: ...
    def on_refresh(self, delta_time: float) -> None: ...
    def on_text(self, text: str) -> None: ...
    def on_text_motion(self, motion: int) -> None: ...
    def on_text_motion_select(self, motion: int) -> None: ...
    def on_scale(self, scale: float, dpi: int) -> None: ...
    def on_move(self, x: int, y: int) -> None: ...
    def on_context_lost(self) -> None: ...
    def on_context_state_lost(self) -> None: ...
    def on_file_drop(self, x: int, y: int, paths: list[str]) -> None: ...

class Window(PygletWindow):
    def on_update(self, delta_time: float) -> None: ...
    def on_resize(self, width: int, height: int) -> None: ...
    def on_draw(self) -> None: ...
    def on_action(self, action_name: str, state: ActionState) -> None: ...
    def on_key_press(self, symbol: int, modifiers: int) -> None: ...
    def on_key_release(self, symbol: int, modifiers: int) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> None: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_enter(self, x: int, y: int) -> None: ...
    def on_mouse_leave(self, x: int, y: int) -> None: ...
    def on_mouse_press(self, x: int, y: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_release(self, x: int, y: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: float, scroll_y: float) -> None: ...

class View:
    def on_show_view(self) -> None: ...
    def on_update(self, delta_time: float) -> None: ...
    def on_resize(self, width: int, height: int) -> None: ...
    def on_draw(self) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> None: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_enter(self, x: int, y: int) -> None: ...
    def on_mouse_leave(self, x: int, y: int) -> None: ...
    def on_mouse_press(self, x: int, y: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_release(self, x: int, y: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: float, scroll_y: float) -> None: ...
