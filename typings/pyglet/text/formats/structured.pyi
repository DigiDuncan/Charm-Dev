"""
This type stub file was generated by pyright.
"""

import pyglet
from typing import List, Optional, TYPE_CHECKING
from pyglet.text.layout import TextLayout
from pyglet.image import AbstractImage

"""Base class for structured (hierarchical) document formats.
"""
if TYPE_CHECKING:
    ...
class _InlineElementGroup(pyglet.graphics.Group):
    def __init__(self, texture, program, order=..., parent=...) -> None:
        ...
    
    def set_state(self): # -> None:
        ...
    
    def unset_state(self): # -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


class ImageElement(pyglet.text.document.InlineElement):
    height: int
    width: int
    image: pyglet.image.Texture
    vertex_lists: dict
    def __init__(self, image: AbstractImage, width: Optional[int] = ..., height: Optional[int] = ...) -> None:
        ...
    
    def place(self, layout: TextLayout, x: float, y: float, z: float, line_x: float, line_y: float, rotation: float, visible: bool, anchor_x: float, anchor_y: float) -> None:
        ...
    
    def update_translation(self, x: float, y: float, z: float) -> None:
        ...
    
    def update_color(self, color: List[int]) -> None:
        ...
    
    def update_view_translation(self, translate_x: float, translate_y: float) -> None:
        ...
    
    def update_rotation(self, rotation: float) -> None:
        ...
    
    def update_visibility(self, visible: bool) -> None:
        ...
    
    def update_anchor(self, anchor_x: float, anchor_y: float) -> None:
        ...
    
    def remove(self, layout: TextLayout) -> None:
        ...
    


class ListBuilder:
    def begin(self, decoder, style): # -> None:
        """Begin a list.

        :Parameters:
            `decoder` : `StructuredTextDecoder`
                Decoder.
            `style` : dict
                Style dictionary that applies over the entire list.

        """
        ...
    
    def item(self, decoder, style, value=...): # -> None:
        """Begin a list item.

        :Parameters:
            `decoder` : `StructuredTextDecoder`
                Decoder.
            `style` : dict
                Style dictionary that applies over the list item.
            `value` : str
                Optional value of the list item.  The meaning is list-type
                dependent.

        """
        ...
    
    def get_mark(self, value=...): # -> Literal['']:
        """Get the mark text for the next list item.

        :Parameters:
            `value` : str
                Optional value of the list item.  The meaning is list-type
                dependent.

        :rtype: str
        """
        ...
    


class UnorderedListBuilder(ListBuilder):
    def __init__(self, mark) -> None:
        """Create an unordered list with constant mark text.

        :Parameters:
            `mark` : str
                Mark to prepend to each list item.

        """
        ...
    
    def get_mark(self, value): # -> Any:
        ...
    


class OrderedListBuilder(ListBuilder):
    format_re = ...
    def __init__(self, start, fmt) -> None:
        """Create an ordered list with sequentially numbered mark text.

        The format is composed of an optional prefix text, a numbering
        scheme character followed by suffix text. Valid numbering schemes
        are:

        ``1``
            Decimal Arabic
        ``a``
            Lowercase alphanumeric
        ``A``
            Uppercase alphanumeric
        ``i``
            Lowercase Roman
        ``I``
            Uppercase Roman

        Prefix text may typically be ``(`` or ``[`` and suffix text is
        typically ``.``, ``)`` or empty, but either can be any string.

        :Parameters:
            `start` : int
                First list item number.
            `fmt` : str
                Format style, for example ``"1."``.

        """
        ...
    
    def get_mark(self, value): # -> str:
        ...
    


class StructuredTextDecoder(pyglet.text.DocumentDecoder):
    def decode(self, text, location=...): # -> FormattedDocument:
        ...
    
    def decode_structured(self, text, location):
        ...
    
    def push_style(self, key, styles): # -> None:
        ...
    
    def pop_style(self, key): # -> None:
        ...
    
    def add_text(self, text): # -> None:
        ...
    
    def add_element(self, element): # -> None:
        ...
    


