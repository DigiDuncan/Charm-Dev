"""
This type stub file was generated by pyright.
"""

import ctypes
import pyglet
from typing import Optional, TYPE_CHECKING
from pyglet.font import base
from pyglet.libs.win32.types import LOGFONTW
from pyglet.font.base import Glyph

if TYPE_CHECKING:
    ...
DriverStringOptionsCmapLookup = ...
DriverStringOptionsRealizedAdvance = ...
TextRenderingHintAntiAlias = ...
TextRenderingHintAntiAliasGridFit = ...
FontStyleBold = ...
FontStyleItalic = ...
UnitPixel = ...
UnitPoint = ...
StringFormatFlagsDirectionRightToLeft = ...
StringFormatFlagsDirectionVertical = ...
StringFormatFlagsNoFitBlackBox = ...
StringFormatFlagsDisplayFormatControl = ...
StringFormatFlagsNoFontFallback = ...
StringFormatFlagsMeasureTrailingSpaces = ...
StringFormatFlagsNoWrap = ...
StringFormatFlagsLineLimit = ...
StringFormatFlagsNoClip = ...
FontFamilyNotFound = ...
_debug_font = pyglet.options['debug_font']
class Rectf(ctypes.Structure):
    _fields_ = ...


class GDIPlusGlyphRenderer(base.GlyphRenderer):
    def __init__(self, font: GDIPlusFont) -> None:
        ...
    
    def __del__(self) -> None:
        ...
    
    def render(self, text: str) -> Glyph:
        ...
    


class Win32Font(base.Font):
    glyph_renderer_class = GDIPlusGlyphRenderer
    def __init__(self, name: str, size: float, bold: bool = ..., italic: bool = ..., stretch: bool = ..., dpi: Optional[float] = ...) -> None:
        ...
    
    @staticmethod
    def get_logfont(name: str, size: float, bold: bool, italic: bool, dpi: Optional[float] = ...) -> LOGFONTW:
        """Get a raw Win32 :py:class:`.LOGFONTW` struct for the given arguments.

        Args:
            name: The name of the font
            size: The font size in points
            bold: Whether to request the font as bold
            italic: Whether to request the font as italic
            dpi: The screen dpi

        Returns:
            LOGFONTW: a ctypes binding of a Win32 LOGFONTW struct
        """
        ...
    


class GDIPlusFont(Win32Font):
    glyph_renderer_class = GDIPlusGlyphRenderer
    _private_collection = ...
    _system_collection = ...
    _default_name = ...
    def __init__(self, name: str, size: float, bold: bool = ..., italic: bool = ..., stretch: bool = ..., dpi: Optional[float] = ...) -> None:
        ...
    
    @property
    def name(self) -> str:
        ...
    
    def __del__(self) -> None:
        ...
    
    @classmethod
    def add_font_data(cls, data: bytes) -> None:
        ...
    
    @classmethod
    def have_font(cls, name: str) -> bool:
        ...
    


