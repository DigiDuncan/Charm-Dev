"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional, Union
from pyglet.customtypes import Buffer

"""Various utility functions used internally by pyglet
"""
def asbytes(s: Union[str, Buffer]) -> bytes:
    ...

def asstr(s: Optional[Union[str, Buffer]]) -> str:
    ...

def debug_print(pyglet_option_name: str = ...) -> Callable[[str], bool]:
    """Get a debug printer controlled by the given ``pyglet.options`` name.

    This allows repurposing ``assert`` to write cleaner, more efficient
    debug output:

    #. Debug printers fit into a one-line ``assert`` statements instead
       of longer, slower key-lookup ``if`` statements
    #. Running Python with the ``-O`` flag makes pyglet run faster by
       skipping all ``assert`` statements

    Usage example::

        from pyglet.util import debug_print


        _debug_media = debug_print('debug_media')


        def some_func():
            # Python will skip the line below when run with -O
            assert _debug_media('My debug statement')

            # The rest of the function will run as normal
            ...

    For more information, please see `the Python command line
    documentation <https://docs.python.org/3/using/cmdline.html#cmdoption-O>`_.

    Args:
        `pyglet_option_name` :
            The name of a key in :attr:`pyglet.options` to read the
            debug flag's value from.

    Returns:
        A callable which prints a passed string and returns ``True``
        to allow auto-removal when running with ``-O``.

    """
    ...

def closest_power_of_two(x: int) -> int:
    ...

def next_or_equal_power_of_two(x: int) -> int:
    ...

class CodecRegistry:
    """Utility class for handling adding and querying of codecs."""
    def __init__(self) -> None:
        ...
    
    def get_encoders(self, filename=...): # -> list[Any]:
        """Get a list of all encoders. If a `filename` is provided, only
        encoders supporting that extension will be returned. An empty list
        will be return if no encoders for that extension are available.
        """
        ...
    
    def get_decoders(self, filename=...): # -> list[Any]:
        """Get a list of all decoders. If a `filename` is provided, only
        decoders supporting that extension will be returned. An empty list
        will be return if no encoders for that extension are available.
        """
        ...
    
    def add_decoders(self, module): # -> None:
        """Add a decoder module.  The module must define `get_decoders`.  Once
        added, the appropriate decoders defined in the codec will be returned by
        CodecRegistry.get_decoders.
        """
        ...
    
    def add_encoders(self, module): # -> None:
        """Add an encoder module.  The module must define `get_encoders`.  Once
        added, the appropriate encoders defined in the codec will be returned by
        CodecRegistry.get_encoders.
        """
        ...
    
    def decode(self, filename, file, **kwargs):
        """Attempt to decode a file, using the available registered decoders.
        Any decoders that match the file extension will be tried first. If no
        decoders match the extension, all decoders will then be tried in order.
        """
        ...
    
    def encode(self, media, filename, file=..., **kwargs):
        """Attempt to encode a pyglet object to a specified format. All registered
        encoders that advertise support for the specific file extension will be tried.
        If no encoders are available, an EncodeException will be raised.
        """
        ...
    


class Decoder:
    def get_file_extensions(self):
        """Return a list or tuple of accepted file extensions, e.g. ['.wav', '.ogg']
        Lower-case only.
        """
        ...
    
    def decode(self, *args, **kwargs):
        """Read and decode the given file object and return an approprite
        pyglet object. Throws DecodeException if there is an error.
        `filename` can be a file type hint.
        """
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class Encoder:
    def get_file_extensions(self):
        """Return a list or tuple of accepted file extensions, e.g. ['.wav', '.ogg']
        Lower-case only.
        """
        ...
    
    def encode(self, media, filename, file):
        """Encode the given media type to the given file.  `filename`
        provides a hint to the file format desired.  options are
        encoder-specific, and unknown options should be ignored or
        issue warnings.
        """
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class DecodeException(Exception):
    __module__ = ...


class EncodeException(Exception):
    __module__ = ...


