"""
This type stub file was generated by pyright.
"""

import sys
import pyglet
import pyglet.window.key
import pyglet.window.mouse
from typing import Any, ClassVar, Literal, Tuple
from pyglet import gl
from pyglet.math import Mat4
from pyglet.event import EventDispatcher
from pyglet.window import event, key
from pyglet.graphics import shader
from pyglet.image import AbstractImage
from pyglet.display import Screen, Display, ScreenMode

type WINDOW_STYLE = Literal['dialog', 'tool', 'borderless', 'transparent', 'overlay'] | None

_is_pyglet_doc_run: bool = ...


class WindowException(Exception): ...
class NoSuchDisplayException(WindowException): ...
class NoSuchConfigException(WindowException): ...
class NoSuchScreenModeException(WindowException): ...
class MouseCursorException(WindowException): ...

class MouseCursor:
    gl_drawable: ClassVar[bool] = ...
    hw_drawable: ClassVar[bool] = ...
    def draw(self, x: int, y: int) -> None: ...

class DefaultMouseCursor(MouseCursor):
    gl_drawable: ClassVar[bool] = ...
    hw_drawable: ClassVar[bool] = ...

class ImageMouseCursor(MouseCursor):
    def __init__(self, image: AbstractImage, hot_x: int = ..., hot_y: int = ..., acceleration: int = ...) -> None: ...
    def draw(self, x: int, y: int) -> None: ...

class _WindowMetaclass(type):
    def __init__(cls, name: str, bases: tuple[type, ...] = ..., dict: dict[str, Any] = ...) -> None: ...

class BaseWindow(EventDispatcher, metaclass=_WindowMetaclass):
    _platform_event_names: ClassVar[set[str]] = ...
    WINDOW_STYLE_DEFAULT: ClassVar[None] = ...
    WINDOW_STYLE_DIALOG: ClassVar[Literal['dialog']] = ...
    WINDOW_STYLE_TOOL: ClassVar[Literal['tool']] = ...
    WINDOW_STYLE_BORDERLESS: ClassVar[Literal['borderless']] = ...
    WINDOW_STYLE_TRANSPARENT: ClassVar[Literal['transparent']] = ...
    WINDOW_STYLE_OVERLAY: ClassVar[Literal['overlay']] = ...
    CURSOR_DEFAULT: ClassVar[None] = ...
    CURSOR_CROSSHAIR: ClassVar[Literal['crosshair']] = ...
    CURSOR_HAND: ClassVar[Literal['hand']] = ...
    CURSOR_HELP: ClassVar[Literal['help']] = ...
    CURSOR_NO: ClassVar[Literal['no']] = ...
    CURSOR_SIZE: ClassVar[Literal['size']] = ...
    CURSOR_SIZE_UP: ClassVar[Literal['size_up']] = ...
    CURSOR_SIZE_UP_RIGHT: ClassVar[Literal['size_up_right']] = ...
    CURSOR_SIZE_RIGHT: ClassVar[Literal['size_right']] = ...
    CURSOR_SIZE_DOWN_RIGHT: ClassVar[Literal['size_down_right']] = ...
    CURSOR_SIZE_DOWN: ClassVar[Literal['size_down']] = ...
    CURSOR_SIZE_DOWN_LEFT: ClassVar[Literal['size_down_left']] = ...
    CURSOR_SIZE_LEFT: ClassVar[Literal['size_left']] = ...
    CURSOR_SIZE_UP_LEFT: ClassVar[Literal['size_up_left']] = ...
    CURSOR_SIZE_UP_DOWN: ClassVar[Literal['size_up_down']] = ...
    CURSOR_SIZE_LEFT_RIGHT: ClassVar[Literal['size_left_right']] = ...
    CURSOR_TEXT: ClassVar[Literal['text']] = ...
    CURSOR_WAIT: ClassVar[Literal['wait']] = ...
    CURSOR_WAIT_ARROW: ClassVar[Literal['wait_arrow']] = ...
    has_exit: bool = ...
    invalid: bool = ...
    _width: int = ...
    _height: int = ...
    _dpi: int = ...
    _caption: str = ...
    _resizable: bool = ...
    _style: WINDOW_STYLE = ...
    _fullscreen: bool = ...
    _visible: bool = ...
    _vsync: bool = ...
    _file_drops: bool = ...
    _screen: Screen = ...
    _config: gl.Config = ...
    _context: gl.Context = ...
    _projection_matrix: Mat4 = ...
    _view_matrix: Mat4 = ...
    _viewport: tuple[int, int, int, int] = ...
    _windowed_size: tuple[int, int] = ...
    _windowed_location: tuple[int, int] = ...
    _window_resizing: bool = ...
    _minimum_size: tuple[int, int] = ...
    _maximum_size: tuple[int, int] = ...
    _keyboard_exclusive: bool = ...
    _mouse_cursor: DefaultMouseCursor = ...
    _mouse_x: int = ...
    _mouse_y: int = ...
    _mouse_visible: bool = ...
    _mouse_exclusive: bool = ...
    _mouse_in_window: bool = ...
    _event_queue: list[list[Any]] = ...
    _enable_event_queue: bool = ...
    _allow_dispatch_event: bool = ...
    _default_width: int = ...
    _default_height: int = ...
    _default_vertex_source: str = ...
    _default_fragment_source: str = ...

    def __init__(
        self,
        width: int = ...,
        height: int =...,
        caption: str = ...,
        resizable: bool = ...,
        style: WINDOW_STYLE = ...,
        fullscreen: bool = ...,
        visible: bool = ...,
        vsync: bool = ...,
        file_drops: bool = ...,
        display: Display = ...,
        screen: Screen = ...,
        config: gl.Config = ...,
        context: gl.Context = ...,
        mode: ScreenMode = ...
    ) -> None: ...

    def __del__(self) -> None: ...
    def activate(self) -> None: ...
    @staticmethod
    def clear() -> None: ...
    def close(self) -> None: ...
    def dispatch_event(self, event_type: str, *args: Any) -> None: ...
    def dispatch_events(self) -> None: ...
    def draw(self, dt: float) -> None: ...
    def draw_mouse_cursor(self) -> None: ...
    def flip(self) -> None: ...
    def get_framebuffer_size(self) -> tuple[int, int]: ...
    def get_location(self) -> tuple[int, int]: ...
    def get_pixel_ratio(self) -> float: ...
    def get_size(self) -> tuple[int, int]: ...
    def get_system_mouse_cursor(self, name: str) -> MouseCursor: ...
    def get_clipboard_text(self) -> str: ...
    def set_clipboard_text(self, text: str) -> None: ...
    def minimize(self) -> None: ...
    def maximize(self) -> None: ...
    def on_close(self) -> None: ...
    def on_key_press(self, symbol: int, modifiers: int) -> None: ...
    def on_resize(self, width: int, height: int) -> None: ...
    def on_scale(self, scale: float, dpi: int) -> None: ...
    def set_caption(self, caption: str) -> None: ...
    def set_fullscreen(self, fullscreen: bool = ..., screen: Screen = ..., mode: ScreenMode= ..., width: int = ..., height: int = ...) -> None: ...
    def set_minimum_size(self, width: int, height: int) -> None: ...
    def set_maximum_size(self, width: int, height: int) -> None: ...
    def set_size(self, width: int, height: int) -> None: ...
    def set_location(self, x: int, y: int) -> None: ...
    def set_visible(self, visible: bool = ...) -> None: ...
    def set_vsync(self, vsync: bool) -> None: ...
    def set_mouse_visible(self, visible: bool = ...) -> None: ...
    def set_mouse_platform_visible(self, platform_visible: bool | None = ...) -> None: ...
    def set_mouse_cursor(self, cursor: MouseCursor = ...) -> None: ...
    def set_exclusive_mouse(self, exclusive: bool = ...) -> None: ...
    def set_exclusive_keyboard(self, exclusive: bool = ...) -> None: ...
    def set_icon(self, *images: AbstractImage) -> None: ...
    def switch_to(self) -> None: ...

    @property
    def caption(self) -> str: ...

    @property
    def resizeable(self) -> bool: ...

    @property
    def style(self) -> WINDOW_STYLE: ...

    @property
    def fullscreen(self) -> bool: ...

    @property
    def visible(self) -> bool: ...

    @property
    def vsync(self) -> bool: ...

    @property
    def display(self) -> Display: ...

    @property
    def screen(self) -> Screen: ...

    @property
    def config(self) -> gl.Config: ...

    @property
    def context(self) -> gl.Context: ...

    @property
    def width(self) -> int: ...

    @width.setter
    def width(self, new_width: int) -> None: ...

    @property
    def height(self) -> int: ...

    @height.setter
    def height(self, new_height: int) -> None: ...

    @property
    def scale(self) -> float: ...

    @property
    def dpi(self) -> int: ...

    @property
    def size(self) -> tuple[int, int]: ...

    @size.setter
    def size(self, new_size: tuple[int, int]) -> None: ...

    @property
    def aspect_ratio(self) -> float: ...

    @property
    def projection(self) -> Mat4: ...

    @projection.setter
    def projection(self, matrix: Mat4) -> None: ...

    @property
    def view(self) -> Mat4: ...

    @view.setter
    def view(self, matrix: Mat4) -> None: ...

    @property
    def viewport(self) -> tuple[int, int, int, int]: ...

    @viewport.setter
    def viewport(self, values: tuple[int, int, int, int]) -> None: ...

    def on_activate(self) -> None: ...
    def on_context_lost(self) -> None: ...
    def on_context_state_lost(self) -> None: ...
    def on_deactivate(self) -> None: ...
    def on_draw(self) -> None: ...
    def on_expose(self) -> None: ...
    def on_file_drop(self, x: int, y: int, paths: list[str]) -> None: ...
    def on_hide(self) -> None: ...
    def on_key_release(self, symbol: int, modifiers: int) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> None: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_press(self, x: int, y: int, button: int, modifiers: int) -> None: ...
    def on_mouse_release(self, x: int, y: int, button: int, modifiers: int) -> None: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: int, scroll_y: int) -> None: ...
    def on_mouse_enter(self, x: int, y: int) -> None: ...
    def on_mouse_leave(self, x: int, y: int) -> None: ...
    def on_move(self, x: int, y: int) -> None: ...
    def on_refresh(self, dt: float) -> None: ...
    def on_show(self) -> None: ...
    def on_text(self, text: str) -> None: ...
    def on_text_motion(self, motion: int) -> None: ...
    def on_text_motion_select(self, motion: int) -> None: ...


class FPSDisplay:
    """Display of a window's framerate.

    This is a convenience class to aid in profiling and debugging.  Typical
    usage is to create an `FPSDisplay` for each window, and draw the display
    at the end of the windows' :py:meth:`~pyglet.window.Window.on_draw` event handler::

        from pyglet.window import Window, FPSDisplay

        window = Window()
        fps_display = FPSDisplay(window)

        @window.event
        def on_draw():
            # ... perform ordinary window drawing operations ...

            fps_display.draw()

    The style and position of the display can be modified via the :py:func:`~pyglet.text.Label`
    attribute.  Different text can be substituted by overriding the
    `set_fps` method.  The display can be set to update more or less often
    by setting the `update_period` attribute. Note: setting the `update_period`
    to a value smaller than your Window refresh rate will cause inaccurate readings.

    :Ivariables:
        `label` : Label
            The text label displaying the framerate.

    """
    update_period = ...

    def __init__(self, window, color=..., samples=...) -> None:
        ...

    def update(self) -> None:
        """Records a new data point at the current time. This method
        is called automatically when the window buffer is flipped.
        """
        ...

    def draw(self) -> None:
        """Draw the label."""
        ...


Window = BaseWindow
