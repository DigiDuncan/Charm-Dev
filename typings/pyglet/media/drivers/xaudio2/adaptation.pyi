"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Tuple
from pyglet.media.drivers.base import AbstractAudioDriver, AbstractAudioPlayer
from pyglet.media.drivers.listener import AbstractListener
from . import interface
from pyglet.media.codecs import Source
from pyglet.media.player import Player

if TYPE_CHECKING:
    ...
_debug = ...
class XAudio2Driver(AbstractAudioDriver):
    def __init__(self) -> None:
        ...
    
    def get_performance(self) -> interface.lib.XAUDIO2_PERFORMANCE_DATA:
        ...
    
    def create_audio_player(self, source: Source, player: Player) -> XAudio2AudioPlayer:
        ...
    
    def get_listener(self) -> XAudio2Listener:
        ...
    
    def delete(self) -> None:
        ...
    


class XAudio2Listener(AbstractListener):
    def __init__(self, xa2_listener, xa2_driver) -> None:
        ...
    


class XAudio2AudioPlayer(AbstractAudioPlayer):
    def __init__(self, driver: XAudio2Driver, source: Source, player: Player) -> None:
        ...
    
    def on_driver_destroy(self) -> None:
        ...
    
    def on_driver_reset(self) -> None:
        ...
    
    def delete(self) -> None:
        ...
    
    def play(self) -> None:
        ...
    
    def stop(self) -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def on_buffer_end(self, buffer_context_ptr: int) -> None:
        ...
    
    def get_play_cursor(self) -> int:
        ...
    
    def work(self) -> None:
        ...
    
    def prefill_audio(self) -> None:
        ...
    
    def set_volume(self, volume: float) -> None:
        ...
    
    def set_position(self, position: Tuple[float, float, float]) -> None:
        ...
    
    def set_min_distance(self, min_distance: float) -> None:
        """Not a true min distance, but similar effect. Changes CurveDistanceScaler default is 1."""
        ...
    
    def set_max_distance(self, max_distance: float) -> None:
        """No such thing built into xaudio2"""
        ...
    
    def set_pitch(self, pitch: float) -> None:
        ...
    
    def set_cone_orientation(self, cone_orientation: Tuple[float, float, float]) -> None:
        ...
    
    def set_cone_inner_angle(self, cone_inner_angle: float) -> None:
        ...
    
    def set_cone_outer_angle(self, cone_outer_angle: float) -> None:
        ...
    
    def set_cone_outer_gain(self, cone_outer_gain: float) -> None:
        ...
    


