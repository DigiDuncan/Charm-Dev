"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, TYPE_CHECKING, Tuple
from pyglet.media.drivers.base import AbstractAudioDriver, AbstractAudioPlayer
from pyglet.media.drivers.listener import AbstractListener
from pyglet.media import Player, Source

if TYPE_CHECKING:
    ...
_debug = ...
class OpenALDriver(AbstractAudioDriver):
    def __init__(self, device_name: Optional[str] = ...) -> None:
        ...
    
    def create_audio_player(self, source: Source, player: Player) -> OpenALAudioPlayer:
        ...
    
    def delete(self) -> None:
        ...
    
    def have_version(self, major: int, minor: int) -> bool:
        ...
    
    def get_version(self) -> Tuple[int, int]:
        ...
    
    def get_extensions(self) -> List[str]:
        ...
    
    def have_extension(self, extension: str) -> bool:
        ...
    
    def get_listener(self) -> OpenALListener:
        ...
    


class OpenALListener(AbstractListener):
    def __init__(self, driver: OpenALDriver) -> None:
        ...
    


class OpenALAudioPlayer(AbstractAudioPlayer):
    def __init__(self, driver: OpenALDriver, source: Source, player: Player) -> None:
        ...
    
    def delete(self) -> None:
        ...
    
    def play(self) -> None:
        ...
    
    def stop(self) -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def work(self) -> None:
        ...
    
    def get_play_cursor(self) -> int:
        ...
    
    def prefill_audio(self) -> None:
        ...
    
    def set_volume(self, volume: float) -> None:
        ...
    
    def set_position(self, position: Tuple[float, float, float]) -> None:
        ...
    
    def set_min_distance(self, min_distance: float) -> None:
        ...
    
    def set_max_distance(self, max_distance: float) -> None:
        ...
    
    def set_pitch(self, pitch: float) -> None:
        ...
    
    def set_cone_orientation(self, cone_orientation: Tuple[float, float, float]) -> None:
        ...
    
    def set_cone_inner_angle(self, cone_inner_angle: float) -> None:
        ...
    
    def set_cone_outer_angle(self, cone_outer_angle: float) -> None:
        ...
    
    def set_cone_outer_gain(self, cone_outer_gain: float) -> None:
        ...
    


