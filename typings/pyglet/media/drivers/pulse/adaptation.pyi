"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING
from pyglet.media.drivers.base import AbstractAudioDriver, AbstractAudioPlayer
from pyglet.media.drivers.listener import AbstractListener
from pyglet.media.codecs import AudioData, Source
from pyglet.media.player import Player

if TYPE_CHECKING:
    ...
_debug = ...
class PulseAudioDriver(AbstractAudioDriver):
    def __init__(self) -> None:
        ...
    
    def create_audio_player(self, source: Source, player: Player) -> PulseAudioPlayer:
        ...
    
    def connect(self, server: Optional[bytes] = ...) -> None:
        """Connect to pulseaudio server.

        :Parameters:
            `server` : bytes
                Server to connect to, or ``None`` for the default local
                server (which may be spawned as a daemon if no server is
                found).
        """
        ...
    
    def dump_debug_info(self): # -> None:
        ...
    
    def delete(self) -> None:
        """Completely shut down pulseaudio client."""
        ...
    
    def get_listener(self) -> PulseAudioListener:
        ...
    


class PulseAudioListener(AbstractListener):
    def __init__(self, driver: PulseAudioDriver) -> None:
        ...
    


class _AudioDataBuffer:
    def __init__(self, ideal_size: int, comfortable_limit: int) -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def get_ideal_refill_size(self, virtual_required: int = ...) -> int:
        ...
    
    def add_data(self, d: AudioData) -> None:
        ...
    
    def memmove(self, target_pointer: int, num_bytes: int) -> int:
        ...
    


class PulseAudioPlayer(AbstractAudioPlayer):
    def __init__(self, source: Source, player: Player, driver: PulseAudioDriver) -> None:
        ...
    
    def work(self) -> None:
        ...
    
    def delete(self) -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def play(self) -> None:
        ...
    
    def stop(self) -> None:
        ...
    
    def get_play_cursor(self) -> int:
        ...
    
    def set_volume(self, volume: float) -> None:
        ...
    
    def set_pitch(self, pitch): # -> None:
        ...
    
    def prefill_audio(self): # -> None:
        ...
    


