"""
This type stub file was generated by pyright.
"""

from typing import Tuple
from pyglet.event import EventDispatcher

"""Display different types of interactive widgets.
"""
class WidgetBase(EventDispatcher):
    def __init__(self, x: float, y: float, width: float, height: float) -> None:
        ...
    
    @property
    def enabled(self) -> bool:
        """Get/set whether this widget is enabled.

        To react to changes in this value, override
        :py:meth:`._set_enabled` on widgets. For example, you may want
        to cue the user by:

        * Playing an animation and/or sound
        * Setting a highlight color
        * Displaying a toast or notification

        """
        ...
    
    @enabled.setter
    def enabled(self, new_enabled: bool) -> None:
        ...
    
    def update_groups(self, order): # -> None:
        ...
    
    @property
    def x(self) -> float:
        """X coordinate of the widget."""
        ...
    
    @x.setter
    def x(self, value: float): # -> None:
        ...
    
    @property
    def y(self) -> float:
        """Y coordinate of the widget."""
        ...
    
    @y.setter
    def y(self, value: float): # -> None:
        ...
    
    @property
    def parent(self): # -> None:
        """The frame this widget belongs to.

        :type: `~pyglet.gui.frame.Frame`
        """
        ...
    
    @parent.setter
    def parent(self, value): # -> None:
        ...
    
    @property
    def position(self) -> Tuple[float, float]:
        """The x, y coordinate of the widget as a tuple.

        :type: tuple(int, int)
        """
        ...
    
    @position.setter
    def position(self, values: Tuple[float, float]): # -> None:
        ...
    
    @property
    def width(self) -> float:
        """Width of the widget."""
        ...
    
    @property
    def height(self) -> float:
        """Height of the widget."""
        ...
    
    @property
    def aabb(self) -> Tuple[float, float, float, float]:
        """Bounding box of the widget.

        Expressed as (x, y, x + width, y + height),
        also referred to as (left, bottom, right, top).
        """
        ...
    
    @property
    def value(self):
        """Query or set the Widget's value.

        This property allows you to set the value of a Widget directly, without any
        user input.  This could be used, for example, to restore Widgets to a
        previous state, or if some event in your program is meant to naturally
        change the same value that the Widget controls.  Note that events are not
        dispatched when changing this property.
        """
        ...
    
    @value.setter
    def value(self, value):
        ...
    
    def on_key_press(self, symbol, modifiers): # -> None:
        ...
    
    def on_key_release(self, symbol, modifiers): # -> None:
        ...
    
    def on_mouse_press(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_release(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_motion(self, x, y, dx, dy): # -> None:
        ...
    
    def on_mouse_scroll(self, x, y, scroll_x, scroll_y): # -> None:
        ...
    
    def on_text(self, text): # -> None:
        ...
    
    def on_text_motion(self, motion): # -> None:
        ...
    
    def on_text_motion_select(self, motion): # -> None:
        ...
    


class PushButton(WidgetBase):
    """Instance of a push button.

    Triggers the event 'on_press' when it is clicked by the mouse.
    Triggers the event 'on_release' when the mouse is released.
    """
    def __init__(self, x, y, pressed, unpressed, hover=..., batch=..., group=...) -> None:
        """Create a push button.

        :Parameters:
            `x` : int
                X coordinate of the push button.
            `y` : int
                Y coordinate of the push button.
            `pressed` : `~pyglet.image.AbstractImage`
                Image to display when the button is pressed.
            `unpressed` : `~pyglet.image.AbstractImage`
                Image to display when the button is not pressed.
            `hover` : `~pyglet.image.AbstractImage`
                Image to display when the button is being hovered over.
            `batch` : `~pyglet.graphics.Batch`
                Optional batch to add the push button to.
            `group` : `~pyglet.graphics.Group`
                Optional parent group of the push button.
        """
        ...
    
    @property
    def value(self): # -> bool:
        """Whether the button is pressed or not."""
        ...
    
    @value.setter
    def value(self, value): # -> None:
        ...
    
    def update_groups(self, order): # -> None:
        ...
    
    def on_mouse_press(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_release(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_motion(self, x, y, dx, dy): # -> None:
        ...
    
    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers): # -> None:
        ...
    
    def on_press(self, widget: PushButton): # -> None:
        """Event: Dispatched when the button is clicked."""
        ...
    
    def on_release(self, widget: PushButton): # -> None:
        """Event: Dispatched when the button is released."""
        ...
    


class ToggleButton(PushButton):
    """Instance of a toggle button.

    Triggers the event 'on_toggle' when the mouse is pressed or released.
    """
    def on_mouse_press(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_release(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_toggle(self, widget: ToggleButton, value: bool): # -> None:
        """Event: returns True or False to indicate the current state."""
        ...
    


class Slider(WidgetBase):
    """Instance of a slider made of a base and a knob image.

    Triggers the event 'on_change' when the knob position is changed.
    The knob position can be changed by dragging with the mouse, or
    scrolling the mouse wheel.
    """
    def __init__(self, x, y, base, knob, edge=..., batch=..., group=...) -> None:
        """Create a slider.

        :Parameters:
            `x` : int
                X coordinate of the slider.
            `y` : int
                Y coordinate of the slider.
            `base` : `~pyglet.image.AbstractImage`
                Image to display as the background to the slider.
            `knob` : `~pyglet.image.AbstractImage`
                Knob that moves to show the position of the slider.
            `edge` : int
                Pixels from the maximum and minimum position of the slider,
                to the edge of the base image.
            `batch` : `~pyglet.graphics.Batch`
                Optional batch to add the slider to.
            `group` : `~pyglet.graphics.Group`
                Optional parent group of the slider.
        """
        ...
    
    @property
    def value(self): # -> int:
        """Value of the slider."""
        ...
    
    @value.setter
    def value(self, value): # -> None:
        ...
    
    def update_groups(self, order): # -> None:
        ...
    
    def on_mouse_press(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_scroll(self, x, y, scroll_x, scroll_y): # -> None:
        ...
    
    def on_mouse_release(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_change(self, widget: Slider, value: float): # -> None:
        """Event: Returns the current value when the slider is changed."""
        ...
    


class TextEntry(WidgetBase):
    """Instance of a text entry widget. Allows the user to enter and submit text.
    
    Triggers the event 'on_commit', when the user hits the Enter or Return key.
    The current text string is passed along with the event.
    """
    def __init__(self, text, x, y, width, color=..., text_color=..., caret_color=..., batch=..., group=...) -> None:
        """Create a text entry widget.

        :Parameters:
            `text` : str
                Initial text to display.
            `x` : int
                X coordinate of the text entry widget.
            `y` : int
                Y coordinate of the text entry widget.
            `width` : int
                The width of the text entry widget.
            `color` : (int, int, int, int)
                The color of the outline box in RGBA format.
            `text_color` : (int, int, int, int)
                The color of the text in RGBA format.
            `caret_color` : (int, int, int, int)
                The color of the caret when it is visible in RGBA or RGB
                format.
            `batch` : `~pyglet.graphics.Batch`
                Optional batch to add the text entry widget to.
            `group` : `~pyglet.graphics.Group`
                Optional parent group of text entry widget.
        """
        ...
    
    @property
    def value(self): # -> str:
        """Text displayed in the entry."""
        ...
    
    @value.setter
    def value(self, value): # -> None:
        ...
    
    @property
    def width(self):
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    
    @property
    def height(self):
        ...
    
    @height.setter
    def height(self, value): # -> None:
        ...
    
    @property
    def focus(self) -> bool:
        ...
    
    @focus.setter
    def focus(self, value: bool) -> None:
        ...
    
    def update_groups(self, order): # -> None:
        ...
    
    def on_mouse_motion(self, x, y, dx, dy): # -> None:
        ...
    
    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers): # -> None:
        ...
    
    def on_mouse_press(self, x, y, buttons, modifiers): # -> None:
        ...
    
    def on_text(self, text): # -> None:
        ...
    
    def on_text_motion(self, motion): # -> None:
        ...
    
    def on_text_motion_select(self, motion): # -> None:
        ...
    
    def on_commit(self, widget: TextEntry, text: str): # -> None:
        """Event: dispatches the current text when commited via Enter/Return key."""
        ...
    


