"""
This type stub file was generated by pyright.
"""

import sys
import ctypes

"""Minimal Windows COM interface.

Allows pyglet to use COM interfaces on Windows without comtypes.  Unlike
comtypes, this module does not provide property interfaces, read typelibs,
nice-ify return values.  We don't need anything that sophisticated to work with COM's.

Interfaces should derive from pIUnknown if their implementation is returned by the COM.
The Python COM interfaces are actually pointers to the implementation (take note
when translating methods that take an interface as argument).
(example: A Double Pointer is simply POINTER(MyInterface) as pInterface is already a POINTER.)

Interfaces can define methods::

    class IDirectSound8(com.pIUnknown):
        _methods_ = [
            ('CreateSoundBuffer', com.STDMETHOD()),
            ('GetCaps', com.STDMETHOD(LPDSCAPS)),
            ...
        ]

Only use METHOD, STDMETHOD or VOIDMETHOD for the method types (not ordinary ctypes
function types).  The 'this' pointer is bound automatically... e.g., call::

    device = IDirectSound8()
    DirectSoundCreate8(None, ctypes.byref(device), None)

    caps = DSCAPS()
    device.GetCaps(caps)

Because STDMETHODs use HRESULT as the return type, there is no need to check
the return value.

Don't forget to manually manage memory... call Release() when you're done with
an interface.
"""
_debug_com = ...
if sys.platform != 'win32':
    ...
class GUID(ctypes.Structure):
    _fields_ = ...
    def __init__(self, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) -> None:
        ...
    
    def __repr__(self): # -> LiteralString:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    


LPGUID = ...
IID = GUID
REFIID = ...
S_OK = ...
E_NOTIMPL = ...
E_NOINTERFACE = ...
class METHOD:
    """COM method."""
    def __init__(self, restype, *args) -> None:
        ...
    
    def get_com_proxy(self, i, name): # -> _FuncPointer:
        ...
    


class STDMETHOD(METHOD):
    """COM method with HRESULT return value."""
    def __init__(self, *args) -> None:
        ...
    


class VOIDMETHOD(METHOD):
    """COM method with no return value."""
    def __init__(self, *args) -> None:
        ...
    


_DummyPointerType = ...
_PointerMeta = ...
_StructMeta = ...
class _InterfaceMeta(_StructMeta):
    def __new__(cls, name, bases, dct, /, create_pointer_type=...): # -> Self:
        ...
    


class _pInterfaceMeta(_PointerMeta):
    def __new__(cls, name, bases, dct): # -> Self:
        ...
    


class Interface(ctypes.Structure, metaclass=_InterfaceMeta, create_pointer_type=False):
    @classmethod
    def get_interface_inheritance(cls): # -> tuple[type, ...]:
        """Returns the types of all interfaces implemented by this interface, up to but not
        including the base `Interface`.
        `Interface` does not represent an actual interface, but merely the base concept of
        them, so viewing it as part of an interface's inheritance chain is meaningless.
        """
        ...
    


class pInterface(_DummyPointerType, metaclass=_pInterfaceMeta):
    _type_ = ...
    @classmethod
    def from_param(cls, obj): # -> Any | _CArgObject:
        """When dealing with a COMObject, pry a fitting interface out of it"""
        ...
    


class IUnknown(Interface):
    _methods_ = ...


class pIUnknown(pInterface):
    _methods_ = ...


class COMObject:
    """A COMObject for implementing C callbacks in Python.
    Specify the interface types it supports in `_interfaces_`, and any methods to be implemented
    by those interfaces as standard python methods. If the names match, they will be run as
    callbacks with all arguments supplied as the types specified in the corresponding interface,
    and `self` available as usual.
    Remember to call `super().__init__()`.

    COMObjects can be passed to ctypes functions directly as long as the corresponding argtype is
    an `Interface` pointer, or a `pInterface` subclass.

    IUnknown's methods will be autogenerated in case IUnknown is implemented.
    """
    def __init_subclass__(cls, /, **kwargs): # -> None:
        ...
    
    def __init__(self) -> None:
        ...
    
    def as_interface(self, interface_type): # -> _CArgObject:
        ...
    


