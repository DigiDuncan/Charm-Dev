"""
This type stub file was generated by pyright.
"""

from typing import List

class EmojiChar:
    """Represents an emoji character as parsed from the json data"""
    def __init__(self, data_blob: dict) -> None:
        """Parse data into EmojiChar

        :param data_blob: Dictionary of values loaded from the json format in `emoji.json`

        >>> emoji.__dict__
        {
            'name': 'BLACK HEART SUIT',
            'unified': '2665',
            'variations': ['2665-FE0F'],
            'docomo': 'E68D',
            'au': 'EAA5',
            'softbank': 'E20C',
            'google': 'FEB1A',
            'image': '2665.png',
            'sheet_x': 1,
            'sheet_y': 34,
            'short_name': 'hearts',
            'short_names': ['hearts'],
            'text': None,
            'texts': None,
            'category': 'Symbols',
            'sort_order': 245,
            'added_in': '1.1',
            'has_img_apple': True,
            'has_img_google': True,
            'has_img_twitter': True,
            'has_img_emojione': True,
            'has_img_facebook': True,
            'has_img_messenger': True,
            'skin_variations': {},
            'obsoletes': None,
            'obsoleted_by': None
        }
        """
        ...
    
    @property
    def all_variations(self) -> List[str]:
        """Lists all possible codepoint variations for given emoji.

        See :mod:`emoji_data_python.EmojiChar.chars` for a rendered version

        >>> emoji.all_variations
        ['261D', '261D-FE0F', '261D-1F3FB']
        """
        ...
    
    @property
    def char(self) -> str:
        """Returns rendered char for emoji

        >>> emoji.char
        '👋'
        """
        ...
    
    @property
    def chars(self) -> List[str]:
        """Lists all possible *rendered* codepoint variations for given emoji.
        This is useful when trying to find this particular emoji in a string by looking for any variation.

        >>> emoji.chars
        ['👋', '👋🏻', '👋🏼', '👋🏽', '👋🏾', '👋🏿']
        """
        ...
    
    @property
    def is_doublebyte(self) -> bool:
        """`True` if emoji is coded on two or more bytes"""
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


