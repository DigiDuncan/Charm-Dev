"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Tuple
from .sprite import Sprite
from arcade import Texture

class TextureKeyframe:
    """
    Keyframe for texture animations.

    :param texture: Texture to display for this keyframe.
    :param duration: Duration in milliseconds to display this keyframe.
    :param tile_id: Tile ID for this keyframe (only used for tiled maps)
    """
    __slots__ = ...
    def __init__(self, texture: Texture, duration: int = ..., tile_id: Optional[int] = ..., **kwargs) -> None:
        ...
    


class TextureAnimation:
    """
    Animation class that holds a list of keyframes.
    The animation should not store any state related to the current time
    so it can be shared between multiple sprites.

    :param keyframes: List of keyframes for the animation.
    :param loop: If the animation should loop.
    """
    __slots__ = ...
    def __init__(self, keyframes: List[TextureKeyframe]) -> None:
        ...
    
    @property
    def keyframes(self) -> Tuple[TextureKeyframe, ...]:
        """
        A tuple of keyframes in the animation.
        Keyframes should not be modified directly.
        """
        ...
    
    @property
    def duration_seconds(self) -> float:
        """
        Total duration of the animation in seconds.
        """
        ...
    
    @property
    def duration_ms(self) -> int:
        """
        Total duration of the animation in milliseconds.
        """
        ...
    
    @property
    def num_frames(self) -> int:
        """
        Number of frames in the animation.
        """
        ...
    
    def get_keyframe(self, time: float, loop: bool = ...) -> Tuple[int, TextureKeyframe]:
        """
        Get the frame at a given time.

        :param time: Time in seconds.
        :param loop: If the animation should loop.
        :return: Tuple of frame index and keyframe.
        """
        ...
    
    def __len__(self) -> int:
        ...
    


class TextureAnimationSprite(Sprite):
    """
    Animated sprite based on keyframes.
    Primarily used internally by tilemaps.

    :param path_or_texture: Path to the image file, or a Texture object.
    :param center_x: Initial x position of the sprite.
    :param center_y: Initial y position of the sprite.
    :param scale: Initial scale of the sprite.
    """
    def __init__(self, center_x: float = ..., center_y: float = ..., scale: float = ..., animation: Optional[TextureAnimation] = ...) -> None:
        ...
    
    @property
    def time(self) -> float:
        """
        Get or set the current time of the animation in seconds.
        """
        ...
    
    @time.setter
    def time(self, value: float) -> None:
        ...
    
    @property
    def animation(self) -> TextureAnimation:
        """
        Animation object for this sprite.
        """
        ...
    
    @animation.setter
    def animation(self, value: TextureAnimation) -> None:
        """
        Set the animation for this sprite.

        :param value: Animation to set.
        """
        ...
    
    def update_animation(self, delta_time: float = ..., **kwargs) -> None:
        """
        Logic for updating the animation.

        :param delta_time: Time since last update.
        """
        ...
    


class AnimatedWalkingSprite(Sprite):
    """
    Deprecated Sprite for platformer games that supports walking animations.
    Make sure to call update_animation after loading the animations so the
    initial texture can be set. Or manually set it.

    It is highly recommended you create your own version of this class rather than
    try to use this pre-packaged one.

    For an example, see this section of the platformer tutorial:
    :ref:`platformer_part_twelve`.

    :param scale: Initial scale of the sprite.
    :param center_x: Initial x position of the sprite.
    :param center_y: Initial y position of the sprite.
    """
    def __init__(self, scale: float = ..., center_x: float = ..., center_y: float = ..., **kwargs) -> None:
        ...
    
    def update_animation(self, delta_time: float = ...) -> None:
        """
        Logic for texture animation.

        :param delta_time: Time since last update.
        """
        ...
    


