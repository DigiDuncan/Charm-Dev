"""
This type stub file was generated by pyright.
"""

from typing import Any, Iterable, List, TYPE_CHECKING, Tuple, TypeVar
from arcade.types import Color, Point, Point2, RGBA255, RGBOrA255, Rect
from arcade.hitbox import HitBox
from arcade.texture import Texture
from arcade.utils import copy_dunders_unimplemented
from arcade.sprite_list import SpriteList

if TYPE_CHECKING:
    ...
SpriteType = TypeVar("SpriteType", bound="BasicSprite")
@copy_dunders_unimplemented
class BasicSprite:
    """
    The absolute minimum needed for a sprite.

    It does not support features like rotation or changing the hitbox
    after creation. For more built-in features, please see
    :py:class:`~arcade.Sprite`.

    :param texture: The texture data to use for this sprite.
    :param scale: The scaling factor for drawing the texture.
    :param center_x: Location of the sprite along the X axis in pixels.
    :param center_y: Location of the sprite along the Y axis in pixels.
    """
    __slots__ = ...
    def __init__(self, texture: Texture, scale: float = ..., center_x: float = ..., center_y: float = ..., visible: bool = ..., **kwargs: Any) -> None:
        ...
    
    @property
    def position(self) -> Point2:
        """
        Get or set the center x and y position of the sprite.

        Returns:
            (center_x, center_y)
        """
        ...
    
    @position.setter
    def position(self, new_value: Point2): # -> None:
        ...
    
    @property
    def center_x(self) -> float:
        """Get or set the center x position of the sprite."""
        ...
    
    @center_x.setter
    def center_x(self, new_value: float): # -> None:
        ...
    
    @property
    def center_y(self) -> float:
        """Get or set the center y position of the sprite."""
        ...
    
    @center_y.setter
    def center_y(self, new_value: float): # -> None:
        ...
    
    @property
    def depth(self) -> float:
        """
        Get or set the depth of the sprite.

        This is really the z coordinate of the sprite
        and can be used with OpenGL depth testing with opaque
        sprites.
        """
        ...
    
    @depth.setter
    def depth(self, new_value: float): # -> None:
        ...
    
    @property
    def width(self) -> float:
        """Get or set width or the sprite in pixels"""
        ...
    
    @width.setter
    def width(self, new_value: float): # -> None:
        ...
    
    @property
    def height(self) -> float:
        """Get or set the height of the sprite in pixels."""
        ...
    
    @height.setter
    def height(self, new_value: float): # -> None:
        ...
    
    @property
    def scale(self) -> float:
        """
        Get or set the sprite's x scale value or set both x & y scale to the same value.

        .. note:: Negative values are supported. They will flip &
                  mirror the sprite.
        """
        ...
    
    @scale.setter
    def scale(self, new_value: float): # -> None:
        ...
    
    @property
    def scale_xy(self) -> Point2:
        """Get or set the x & y scale of the sprite as a pair of values."""
        ...
    
    @scale_xy.setter
    def scale_xy(self, new_value: Point2): # -> None:
        ...
    
    @property
    def left(self) -> float:
        """
        The leftmost x coordinate in the hit box.

        When setting this property the sprite is positioned
        relative to the leftmost x coordinate in the hit box.
        """
        ...
    
    @left.setter
    def left(self, amount: float): # -> None:
        ...
    
    @property
    def right(self) -> float:
        """
        The rightmost x coordinate in the hit box.

        When setting this property the sprite is positioned
        relative to the rightmost x coordinate in the hit box.
        """
        ...
    
    @right.setter
    def right(self, amount: float): # -> None:
        ...
    
    @property
    def bottom(self) -> float:
        """
        The lowest y coordinate in the hit box.

        When setting this property the sprite is positioned
        relative to the lowest y coordinate in the hit box.
        """
        ...
    
    @bottom.setter
    def bottom(self, amount: float): # -> None:
        ...
    
    @property
    def top(self) -> float:
        """
        The highest y coordinate in the hit box.

        When setting this property the sprite is positioned
        relative to the highest y coordinate in the hit box.
        """
        ...
    
    @top.setter
    def top(self, amount: float): # -> None:
        ...
    
    @property
    def rect(self) -> Rect:
        ...
    
    @property
    def visible(self) -> bool:
        """Get or set the visibility of this sprite.

        When set to ``False``, each :py:class:`~arcade.SpriteList` and
        its attached shaders will treat the sprite as if has an
        :py:attr:`.alpha` of 0. However, the sprite's actual values for
        :py:attr:`.alpha` and :py:attr:`.color` will not change.

        .. code-block:: python

            # The initial color of the sprite
            >>> sprite.color
            Color(255, 255, 255, 255)

            # Make the sprite invisible
            >>> sprite.visible = False
            # The sprite's color value has not changed
            >>> sprite.color
            Color(255, 255, 255, 255)
            # The sprite's alpha value hasn't either
            >>> sprite.alpha
            255

            # Restore visibility
            >>> sprite.visible = True
            # Shorthand to toggle visible
            >>> sprite.visible = not sprite.visible

        """
        ...
    
    @visible.setter
    def visible(self, value: bool): # -> None:
        ...
    
    @property
    def rgb(self) -> Tuple[int, int, int]:
        """Get or set only the sprite's RGB color components.

        If a 4-color RGBA tuple is passed:

        * The new color's alpha value will be ignored
        * The old alpha value will be preserved

        """
        ...
    
    @rgb.setter
    def rgb(self, color: RGBOrA255): # -> None:
        ...
    
    @property
    def color(self) -> Color:
        """
        Get or set the RGBA multiply color for the sprite.

        When setting the color, it may be specified as any of the following:

        * an RGBA :py:class:`tuple` with each channel value between 0 and 255
        * an instance of :py:class:`~arcade.types.Color`
        * an RGB :py:class:`tuple`, in which case the color will be treated as opaque

        Example usage::

            >>> print(sprite.color)
            Color(255, 255, 255, 255)

            >>> sprite.color = arcade.color.RED

            >>> sprite.color = 255, 0, 0

            >>> sprite.color = 255, 0, 0, 128

        """
        ...
    
    @color.setter
    def color(self, color: RGBOrA255): # -> None:
        ...
    
    @property
    def alpha(self) -> int:
        """Get or set the alpha value of the sprite"""
        ...
    
    @alpha.setter
    def alpha(self, alpha: int): # -> None:
        ...
    
    @property
    def texture(self) -> Texture:
        """
        Get or set the visible texture for this sprite
        This property can be changed over time to animate a sprite.

        Note that this doesn't change the hit box of the sprite.
        """
        ...
    
    @texture.setter
    def texture(self, texture: Texture): # -> None:
        ...
    
    def update(self) -> None:
        """
        Generic update method. It can be called manually
        or by the SpriteList's update method.
        """
        ...
    
    def on_update(self, delta_time: float = ...) -> None:
        """
        Update the sprite. Similar to update, but also takes a delta-time.
        It can be called manually or by the SpriteList's on_update method.

        :param delta_time: Time since last update.
        """
        ...
    
    def update_animation(self, delta_time: float = ...) -> None:
        """
        Generic update animation method. Usually involves changing
        the active texture on the sprite.

        This can be called manually or by the SpriteList's update_animation method.

        :param delta_time: Time since last update.
        """
        ...
    
    def rescale_relative_to_point(self, point: Point, factor: float) -> None:
        """
        Rescale the sprite and its distance from the passed point.

        This function does two things:

        1. Multiply both values in the sprite's :py:attr:`~scale_xy`
           value by ``factor``.
        2. Scale the distance between the sprite and ``point`` by
           ``factor``.

        If ``point`` equals the sprite's :py:attr:`~position`,
        the distance will be zero and the sprite will not move.

        :param point: The reference point for rescaling.
        :param factor: Multiplier for sprite scale & distance to point.
        :return:
        """
        ...
    
    def rescale_xy_relative_to_point(self, point: Point, factors_xy: Iterable[float]) -> None:
        """
        Rescale the sprite and its distance from the passed point.

        This method can scale by different amounts on each axis. To
        scale along only one axis, set the other axis to ``1.0`` in
        ``factors_xy``.

        Internally, this function does the following:

        1. Multiply the x & y of the sprite's :py:attr:`~scale_xy`
           attribute by the corresponding part from ``factors_xy``.
        2. Scale the x & y of the difference between the sprite's
           position and ``point`` by the corresponding component from
           ``factors_xy``.

        If ``point`` equals the sprite's :py:attr:`~position`,
        the distance will be zero and the sprite will not move.

        :param point: The reference point for rescaling.
        :param factors_xy: A 2-length iterable containing x and y
                           multipliers for ``scale`` & distance to
                           ``point``.
        :return:
        """
        ...
    
    @property
    def hit_box(self) -> HitBox:
        ...
    
    def update_spatial_hash(self) -> None:
        """
        Update the sprites location in the spatial hash if present.
        """
        ...
    
    def register_sprite_list(self, new_list: SpriteList) -> None:
        """
        Register this sprite as belonging to a list. We will automatically
        remove ourselves from the list when kill() is called.
        """
        ...
    
    def remove_from_sprite_lists(self) -> None:
        """
        Remove the sprite from all sprite lists.
        """
        ...
    
    def draw_hit_box(self, color: RGBA255 = ..., line_thickness: float = ...) -> None:
        """
        Draw a sprite's hit-box. This is useful for debugging.

        :param color: Color of box
        :param line_thickness: How thick the box should be
        """
        ...
    
    def kill(self) -> None:
        """
        Alias of ``remove_from_sprite_lists()``.
        """
        ...
    
    def collides_with_point(self, point: Point2) -> bool:
        """
        Check if point is within the current sprite.

        :param point: Point to check.
        :return: True if the point is contained within the sprite's boundary.
        """
        ...
    
    def collides_with_sprite(self: SpriteType, other: SpriteType) -> bool:
        """Will check if a sprite is overlapping (colliding) another Sprite.

        :param other: the other sprite to check against.
        :return: True or False, whether or not they are overlapping.
        """
        ...
    
    def collides_with_list(self: SpriteType, sprite_list: SpriteList) -> List[SpriteType]:
        """Check if current sprite is overlapping with any other sprite in a list

        :param sprite_list: SpriteList to check against
        :return: List of all overlapping Sprites from the original SpriteList
        """
        ...
    


