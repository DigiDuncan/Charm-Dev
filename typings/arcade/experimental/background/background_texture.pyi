"""
This type stub file was generated by pyright.
"""

import arcade.gl as gl
from typing import List, Optional, Tuple
from arcade import ArcadeContext

class BackgroundTexture:
    """
    BackgroundTextures are PODs (packet of data) types. They have very little functionality by themselves,
    but are used by Backgrounds. They hold an arcade.gl.Texture and 3 Pyglet.Maths.Mat3s.
    The Mat3s define the scaling, rotation, and translation of the pixel data in the texture.
    see background_fs.glsl in resources/shaders for an implementation of this.
    """
    def __init__(self, texture: gl.Texture2D, offset: Tuple[float, float] = ..., scale: float = ..., angle: float = ...) -> None:
        ...
    
    @property
    def pixel_transform(self): # -> Mat3:
        ...
    
    @property
    def scale(self) -> float:
        ...
    
    @scale.setter
    def scale(self, value: float): # -> None:
        ...
    
    @property
    def angle(self) -> float:
        ...
    
    @angle.setter
    def angle(self, value: float): # -> None:
        ...
    
    @property
    def offset(self) -> Tuple[float, float]:
        ...
    
    @offset.setter
    def offset(self, value: Tuple[float, float]): # -> None:
        ...
    
    @property
    def wrap_x(self) -> int:
        """
        Get or set the horizontal wrapping of the texture. This decides how textures
        are read when texture coordinates are outside the ``[0.0, 1.0]`` area.
        Default value is ``REPEAT``.
        Valid options are::
            # Note: Enums can also be accessed in arcade.gl.
            # Repeat pixels on the y-axis.
            texture.wrap_x = ctx.REPEAT
            # Repeat pixels on the y-axis mirrored.
            texture.wrap_x = ctx.MIRRORED_REPEAT
            # Repeat the edge pixels when reading outside the texture.
            texture.wrap_x = ctx.CLAMP_TO_EDGE
            # Use the border color (black by default) when reading outside the texture.
            texture.wrap_x = ctx.CLAMP_TO_BORDER
        :type: int
        """
        ...
    
    @wrap_x.setter
    def wrap_x(self, value: int): # -> None:
        ...
    
    @property
    def wrap_y(self) -> int:
        """
        Get or set the horizontal wrapping of the texture. This decides how textures
        are read when texture coordinates are outside the ``[0.0, 1.0]`` area.
        Default value is ``REPEAT``.
        Valid options are::
            # Note: Enums can also be accessed in arcade.gl.
            # Repeat pixels on the y-axis.
            texture.wrap_y = ctx.REPEAT
            # Repeat pixels on the y-axis mirrored.
            texture.wrap_y = ctx.MIRRORED_REPEAT
            # Repeat the edge pixels when reading outside the texture.
            texture.wrap_y = ctx.CLAMP_TO_EDGE
            # Use the border color (black by default) when reading outside the texture.
            texture.wrap_y = ctx.CLAMP_TO_BORDER
        :type: int
        """
        ...
    
    @wrap_y.setter
    def wrap_y(self, value: int): # -> None:
        ...
    
    def use(self, unit: int = ...) -> None:
        """Bind the texture to a channel,
        :param unit: The texture unit to bind the texture.
        """
        ...
    
    def render_target(self, context: ArcadeContext, color_attachments: Optional[List[gl.Texture2D]] = ..., depth_attachment: Optional[gl.Texture2D] = ...) -> gl.Framebuffer:
        ...
    
    @staticmethod
    def from_file(tex_src: str, offset: Tuple[float, float] = ..., scale: float = ..., angle: float = ..., filters=...): # -> BackgroundTexture:
        ...
    


