"""
This type stub file was generated by pyright.
"""

import arcade.gl as gl
from typing import List, Optional, Tuple, Union
from arcade.experimental.background import Background

class BackgroundGroup:
    """
    If you have many backgrounds which you would like to draw together and move together this can help.
    The pos of the Background Group is independent of each Background pos.
    The offset of the BackgroundGroup is the same as each background.
    """
    def __init__(self, backgrounds: Optional[List[Background]] = ...) -> None:
        ...
    
    @property
    def pos(self): # -> tuple[float, float]:
        ...
    
    @pos.setter
    def pos(self, value: Tuple[float, float]): # -> None:
        ...
    
    @property
    def offset(self): # -> tuple[float, float]:
        ...
    
    @offset.setter
    def offset(self, value): # -> None:
        ...
    
    def __getitem__(self, item: int): # -> Background:
        ...
    
    def __setitem__(self, key: int, value: Background): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[Background]:
        ...
    
    def add(self, item: Background): # -> None:
        ...
    
    def extend(self, items: List[Background]): # -> None:
        ...
    
    def draw(self): # -> None:
        ...
    
    def add_from_file(self, tex_src: str, pos: Tuple[float, float] = ..., size: Optional[Tuple[int, int]] = ..., offset: Tuple[float, float] = ..., scale: float = ..., angle: float = ..., *, filters=..., color: Optional[Tuple[int, int, int]] = ..., color_norm: Optional[Tuple[float, float, float]] = ..., shader: Optional[gl.Program] = ..., geometry: Optional[gl.Geometry] = ...): # -> None:
        ...
    


class ParallaxGroup:
    """
    The ParallaxBackground holds a list of backgrounds and a list of depths.
    When you change the offset through the ParallaxBackground
    each Background's offset will be set inversely proportional to its depth.
    This creates the effect of Backgrounds with greater depths appearing further away.
    The depth does not affect the positioning of layers at all.
    """
    def __init__(self, backgrounds: Optional[List[Background]] = ..., depths: Optional[List[float]] = ...) -> None:
        ...
    
    @property
    def pos(self) -> Tuple[float, float]:
        ...
    
    @pos.setter
    def pos(self, value: Tuple[float, float]): # -> None:
        ...
    
    @property
    def offset(self) -> Tuple[float, float]:
        ...
    
    @offset.setter
    def offset(self, value: Tuple[float, float]): # -> None:
        ...
    
    def __getitem__(self, item: int): # -> tuple[Background, float]:
        ...
    
    def __setitem__(self, key: int, value: Union[Background, float]): # -> None:
        ...
    
    def add(self, item: Background, depth: float = ...): # -> None:
        ...
    
    def remove(self, item: Background): # -> None:
        ...
    
    def change_depth(self, item: Background, new_depth: float): # -> None:
        ...
    
    def extend(self, items: List[Background], depths: List[float]): # -> None:
        ...
    
    def draw(self): # -> None:
        ...
    
    def add_from_file(self, tex_src: str, pos: Tuple[float, float] = ..., size: Optional[Tuple[int, int]] = ..., depth: float = ..., offset: Tuple[float, float] = ..., scale: float = ..., angle: float = ..., *, filters=..., color: Optional[Tuple[int, int, int]] = ..., color_norm: Optional[Tuple[float, float, float]] = ..., shader: Optional[gl.Program] = ..., geometry: Optional[gl.Geometry] = ...): # -> None:
        ...
    


