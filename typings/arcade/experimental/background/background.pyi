"""
This type stub file was generated by pyright.
"""

import arcade.gl as gl
from typing import Optional, Tuple, Union
from arcade.experimental.background import BackgroundTexture

class Background:
    """
    Backgrounds are large geometries to which a Background texture is rendered.
    By default, the position defines the bottom left corner.
    If the size is larger than the given BackgroundTexture the texture will repeat.
    A shift value can be given when calling draw.
    This can be used to move the background without actually adjusting the position
    You may supply your own shader and geometries.
    The default shader implements 4 uniforms.
        vec2 pos, vec2 size, vec3 color, mat3 pixelTransform, and float blend.
    """
    def __init__(self, texture: BackgroundTexture, pos: Tuple[float, float], size: Tuple[int, int], color: Union[Tuple[float, float, float], Tuple[int, int, int]], shader: Optional[gl.Program] = ..., geometry: Optional[gl.Geometry] = ...) -> None:
        ...
    
    @staticmethod
    def from_file(tex_src: str, pos: Tuple[float, float] = ..., size: Optional[Tuple[int, int]] = ..., offset: Tuple[float, float] = ..., scale: float = ..., angle: float = ..., *, filters=..., color: Optional[Tuple[int, int, int]] = ..., color_norm: Optional[Tuple[float, float, float]] = ..., shader: Optional[gl.Program] = ..., geometry: Optional[gl.Geometry] = ...): # -> Background:
        """
        This will generate a Background from an input image source. The generated texture is not stored in the
        texture cache or any texture atlas.
        :param tex_src: The image source.
        :param pos: The position of the Background (Bottom Left Corner by default).
        :param size: The width and height of the Background.
        :param offset: The BackgroundTexture offset.
        :param scale: The BackgroundTexture Scale.
        :param angle: The BackgroundTexture angle.
        :param filters: The OpenGl Texture filters (gl.Nearest by default).
        :param color: This is a color defined from 0-255. Prioritises color_norm
        :param color_norm: This is a color defined from 0.0-1.0. Prioritises color_norm
        assumed to be in the range 0.0-1.0.
        :param shader: The shader used for rendering.
        :param geometry: The geometry used for rendering (a rectangle equal to the size by default).
        :return: The generated Background.
        """
        ...
    
    @property
    def pos(self) -> Tuple[float, float]:
        ...
    
    @pos.setter
    def pos(self, value: Tuple[float, float]): # -> None:
        ...
    
    @property
    def size(self) -> Tuple[int, int]:
        ...
    
    @size.setter
    def size(self, value: Tuple[int, int]): # -> None:
        ...
    
    @property
    def blend(self) -> float:
        ...
    
    @blend.setter
    def blend(self, value): # -> None:
        ...
    
    @property
    def color(self) -> Tuple[int, int, int]:
        """
        Color in the range of 0-255.
        """
        ...
    
    @color.setter
    def color(self, value: Tuple[int, int, int]): # -> None:
        """
        Color in the range of 0-255.
        """
        ...
    
    @property
    def color_norm(self) -> Tuple[float, float, float]:
        ...
    
    @color_norm.setter
    def color_norm(self, value: Tuple[float, float, float]): # -> None:
        ...
    
    def draw(self, shift: Tuple[float, float] = ...): # -> None:
        ...
    
    def blend_layer(self, other, percent: float): # -> None:
        ...
    


