"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import List, Optional, Tuple, Union
from arcade.context import ArcadeContext
from arcade.gl import Texture2D
from arcade.gl.program import Program
from arcade.gl.framebuffer import Framebuffer

"""
Shadertoy

Inputs:

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iTime;                 // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform samplerXX iChannel0..3;          // input channel. XX = 2D/Cube
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)
"""
class ShadertoyBase:
    """
    Base class for shadertoy types.
    It can represent the main image or buffers.

    Supported uniforms are::

        uniform float     iTime;                 // shader playback time (in seconds)
        uniform float     iChannelTime[4];       // channel playback time (in seconds)
        uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
        uniform vec3      iResolution;           // viewport resolution (in pixels)
        uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
        uniform int       iFrame;                // shader playback frame
        uniform float     iTimeDelta;            // render time (in seconds)
        uniform vec4      iDate;                 // (year, month, day, time in seconds)
        // Channel textures
        uniform sampler2D iChannel0;
        uniform sampler2D iChannel1;
        uniform sampler2D iChannel2;
        uniform sampler2D iChannel3;

    :param size: screen/area size
    :param source: The mainImage shader source
    """
    def __init__(self, size: Tuple[int, int], source: str) -> None:
        ...
    
    @property
    def size(self) -> Tuple[int, int]:
        """
        Get or set the size in pixels.

        Mapped to uniform ``iResolution.xy``.
        """
        ...
    
    @size.setter
    def size(self, value): # -> None:
        ...
    
    @property
    def time(self) -> float:
        """
        Get or set the current time.

        Mapped to uniform ``iTime``.
        """
        ...
    
    @time.setter
    def time(self, value): # -> None:
        ...
    
    @property
    def time_delta(self) -> float:
        """
        Get or set the current delta time.

        Mapped to uniform ``iTimeDelta``.
        """
        ...
    
    @time_delta.setter
    def time_delta(self, value): # -> None:
        ...
    
    @property
    def delta_time(self) -> float:
        """
        Get or set the current delta time.
        An alternative to ``time_delta``.

        Mapped to uniform ``iTimeDelta``.
        """
        ...
    
    @delta_time.setter
    def delta_time(self, value): # -> None:
        ...
    
    @property
    def frame(self) -> int:
        """
        Get or set the current frame.

        Mapped to uniform ``iFrame``.
        """
        ...
    
    @frame.setter
    def frame(self, value): # -> None:
        ...
    
    @property
    def frame_rate(self) -> float:
        """
        Get or set the frame rate.

        Mapped to uniform ``iFrameRate``.
        """
        ...
    
    @frame_rate.setter
    def frame_rate(self, value: float): # -> None:
        ...
    
    @property
    def mouse_position(self) -> Tuple[float, float]:
        """
        Get or set the current mouse position.

        Mapped to uniform ``iMouse.xy``.
        """
        ...
    
    @mouse_position.setter
    def mouse_position(self, value): # -> None:
        ...
    
    @property
    def mouse_buttons(self) -> Tuple[float, float]:
        """
        Get or set the mouse button states.
        Depending on the use case these can contain
        a non-zero value when buttons are pushed and/or
        the actual click position.

        Mapped to uniform ``iMouse.zw``.
        """
        ...
    
    @mouse_buttons.setter
    def mouse_buttons(self, value: Tuple[float, float]): # -> None:
        ...
    
    @property
    def channel_time(self) -> List[float]:
        ...
    
    @property
    def channel_0(self) -> Optional[Texture2D]:
        """Get or set channel 0"""
        ...
    
    @channel_0.setter
    def channel_0(self, value: Texture2D): # -> None:
        ...
    
    @property
    def channel_1(self) -> Optional[Texture2D]:
        """Get or set channel 1"""
        ...
    
    @channel_1.setter
    def channel_1(self, value: Texture2D): # -> None:
        ...
    
    @property
    def channel_2(self) -> Optional[Texture2D]:
        """Get or set channel 2"""
        ...
    
    @channel_2.setter
    def channel_2(self, value: Texture2D): # -> None:
        ...
    
    @property
    def channel_3(self) -> Optional[Texture2D]:
        """Get or set channel 3"""
        ...
    
    @channel_3.setter
    def channel_3(self, value: Texture2D): # -> None:
        ...
    
    @property
    def program(self) -> Program:
        """The shader program"""
        ...
    
    @property
    def ctx(self) -> ArcadeContext:
        """The context"""
        ...
    
    def resize(self, size: Tuple[int, int]) -> None:
        """Resize of this shadertoy or buffer"""
        ...
    
    def render(self, *, time: Optional[float] = ..., time_delta: Optional[float] = ..., mouse_position: Optional[Tuple[float, float]] = ..., size: Optional[Tuple[int, int]] = ..., frame: Optional[int] = ..., frame_rate: Optional[float] = ...): # -> None:
        """
        Render the shadertoy project to the screen.

        :param time: Override the time
        :param time_delta: Override the time delta
        :param mouse_position: Override mouse position
        :param size: Override the size
        :param frame: Override frame
        """
        ...
    
    def reload(self, source: str): # -> None:
        """
        Update the shader source code.

        :param source: New mainImage shader source
        """
        ...
    


class ShadertoyBuffer(ShadertoyBase):
    """
    An offscreen framebuffer we can render to with the supplied
    shader or render any other content into.

    :param size: Size of framebuffer / texture
    :param source: mainImage shader source
    :param repeat: Repeat/wrap mode for the underlying texture
    """
    def __init__(self, size: Tuple[int, int], source: str, repeat: bool = ...) -> None:
        ...
    
    @property
    def texture(self) -> Texture2D:
        """
        The OpenGL texture for this buffer.
        This can be assigned to channels.
        """
        ...
    
    @property
    def fbo(self) -> Framebuffer:
        """The framebuffer for this buffer"""
        ...
    
    @property
    def repeat(self) -> bool:
        """
        Get or set texture repeat.
        """
        ...
    
    @repeat.setter
    def repeat(self, value: bool): # -> None:
        ...
    
    def clear(self): # -> None:
        """Clear the buffer contents"""
        ...
    
    def resize(self, size: Tuple[int, int]): # -> None:
        """
        Change the internal buffer size.

        :param size: New size
        """
        ...
    


class Shadertoy(ShadertoyBase):
    """A ShaderToy interface for arcade.

    Simply implement the ``mainImage`` glsl method::

        void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
            fragColor = vec4(fragCoord, 0.0, 1.0);
        }
    """
    def __init__(self, size: Tuple[int, int], main_source: str) -> None:
        """
        :param [int, int] size: pixel size if the output
        :param main_source: The main glsl source with mainImage function
        """
        ...
    
    @property
    def buffer_a(self) -> Optional[ShadertoyBuffer]:
        """Get or set buffer a"""
        ...
    
    @buffer_a.setter
    def buffer_a(self, value): # -> None:
        ...
    
    @property
    def buffer_b(self) -> Optional[ShadertoyBuffer]:
        """Get or set buffer b"""
        ...
    
    @buffer_b.setter
    def buffer_b(self, value): # -> None:
        ...
    
    @property
    def buffer_c(self) -> Optional[ShadertoyBuffer]:
        """Get or set buffer c"""
        ...
    
    @buffer_c.setter
    def buffer_c(self, value): # -> None:
        ...
    
    @property
    def buffer_d(self) -> Optional[ShadertoyBuffer]:
        """Get or set buffer d"""
        ...
    
    @buffer_d.setter
    def buffer_d(self, value): # -> None:
        ...
    
    @classmethod
    def create_from_file(cls, size: Tuple[int, int], path: Union[str, Path]) -> Shadertoy:
        """
        Create a Shadertoy from a mainImage shader file.

        :param size: Size of shadertoy in pixels
        :param path: Path to mainImage shader file
        """
        ...
    
    def create_buffer(self, source: str, repeat: bool = ...) -> ShadertoyBuffer:
        """
        Shortcut for creating a buffer from mainImage shader file.

        :param source: Path to shader file
        :param repeat: Buffer/texture repeat at borders
        """
        ...
    
    def create_buffer_from_file(self, path: Union[str, Path]) -> ShadertoyBuffer:
        """
        Shortcut for creating a ShadertoyBuffer from shaders source.
        The size of the framebuffer will be the same as the Shadertoy.

        :param path: Path to shader source
        """
        ...
    
    def resize(self, size: Tuple[int, int]): # -> None:
        """
        Resize the internal buffers

        :param size: The new size in pixels
        """
        ...
    


