"""
This type stub file was generated by pyright.
"""

class Uniform:
    """
    A Program uniform

    :param ctx: The context
    :param program_id: The program id to which this uniform belongs
    :param location: The uniform location
    :param name: The uniform name
    :param data_type: The data type of the uniform
    :param array_length: The array length of the uniform
    """
    _uniform_getters = ...
    _uniform_setters = ...
    __slots__ = ...
    def __init__(self, ctx, program_id, location, name, data_type, array_length) -> None:
        ...
    
    @property
    def location(self) -> int:
        """The location of the uniform in the program"""
        ...
    
    @property
    def name(self) -> str:
        """Name of the uniform"""
        ...
    
    @property
    def array_length(self) -> int:
        """Length of the uniform array. If not an array 1 will be returned"""
        ...
    
    @property
    def components(self) -> int:
        """
        How many components for the uniform.
        A vec4 will for example have 4 components.
        """
        ...
    
    def __repr__(self) -> str:
        ...
    


class UniformBlock:
    """
    Wrapper for a uniform block in shaders.
    """
    __slots__ = ...
    def __init__(self, glo: int, index: int, size: int, name: str) -> None:
        ...
    
    @property
    def binding(self) -> int:
        """Get or set the binding index for this uniform block"""
        ...
    
    @binding.setter
    def binding(self, binding: int): # -> None:
        ...
    
    def getter(self): # -> Self:
        """
        The getter function for this uniform block.
        Returns self.
        """
        ...
    
    def setter(self, value: int): # -> None:
        """
        The setter function for this uniform block.

        :param value: The binding index to set.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


