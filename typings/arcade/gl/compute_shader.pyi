"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Union
from .uniform import Uniform, UniformBlock
from arcade.gl import Context

if TYPE_CHECKING:
    ...
class ComputeShader:
    """
    A higher level wrapper for an OpenGL compute shader.
    """
    def __init__(self, ctx: Context, glsl_source: str) -> None:
        ...
    
    @property
    def glo(self) -> int:
        """The name/id of the OpenGL resource"""
        ...
    
    def use(self): # -> None:
        """
        Use/activate the compute shader.

        .. Note::

            This is not necessary to call in normal use cases
            since ``run()`` already does this for you.
        """
        ...
    
    def run(self, group_x=..., group_y=..., group_z=...) -> None:
        """
        Run the compute shader.

        When running a compute shader we specify how many work groups should
        be executed on the ``x``, ``y`` and ``z`` dimension. The size of the work group
        is defined in the compute shader.

        .. code:: glsl

            // Work group with one dimension. 16 work groups executed.
            layout(local_size_x=16) in;
            // Work group with two dimensions. 256 work groups executed.
            layout(local_size_x=16, local_size_y=16) in;
            // Work group with three dimensions. 4096 work groups executed.
            layout(local_size_x=16, local_size_y=16, local_size_z=16) in;

        Group sizes are ``1`` by default. If your compute shader doesn't specify
        a size for a dimension or uses ``1`` as size you don't have to supply
        this parameter.

        :param group_x: The number of work groups to be launched in the X dimension.
        :param group_y: The number of work groups to be launched in the y dimension.
        :param group_z: The number of work groups to be launched in the z dimension.
        """
        ...
    
    def __getitem__(self, item) -> Union[Uniform, UniformBlock]:
        """Get a uniform or uniform block"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Set a uniform value"""
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def delete(self): # -> None:
        """
        Destroy the internal compute shader object.
        This is normally not necessary, but depends on the
        garbage collection more configured in the context.
        """
        ...
    
    @staticmethod
    def delete_glo(ctx, prog_id): # -> None:
        """Low level method for destroying a compute shader by id"""
        ...
    


