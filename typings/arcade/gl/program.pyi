"""
This type stub file was generated by pyright.
"""

from typing import Any, Iterable, List, Optional, TYPE_CHECKING, Union
from pyglet import gl
from .uniform import Uniform, UniformBlock
from .types import AttribFormat, PyGLenum
from arcade.gl import Context

if TYPE_CHECKING:
    ...
class Program:
    """
    Compiled and linked shader program.

    Currently supports vertex, fragment and geometry shaders.
    Transform feedback also supported when output attributes
    names are passed in the varyings parameter.

    The best way to create a program instance is through :py:meth:`arcade.gl.Context.program`

    Access Uniforms via the ``[]`` operator.
    Example::

        program['MyUniform'] = value

    :param ctx: The context this program belongs to
    :param vertex_shader: vertex shader source
    :param fragment_shader: fragment shader source
    :param geometry_shader: geometry shader source
    :param tess_control_shader: tessellation control shader source
    :param tess_evaluation_shader: tessellation evaluation shader source
    :param varyings: List of out attributes used in transform feedback.
    :param varyings_capture_mode: The capture mode for transforms.
                                        ``"interleaved"`` means all out attribute will be written to a single buffer.
                                        ``"separate"`` means each out attribute will be written separate buffers.
                                        Based on these settings the `transform()` method will accept a single
                                        buffer or a list of buffer.
    """
    __slots__ = ...
    _valid_capture_modes = ...
    def __init__(self, ctx: Context, *, vertex_shader: str, fragment_shader: Optional[str] = ..., geometry_shader: Optional[str] = ..., tess_control_shader: Optional[str] = ..., tess_evaluation_shader: Optional[str] = ..., varyings: Optional[List[str]] = ..., varyings_capture_mode: str = ...) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    @property
    def ctx(self) -> Context:
        """
        The context this program belongs to

        :type: :py:class:`arcade.gl.Context`
        """
        ...
    
    @property
    def glo(self) -> int:
        """
        The OpenGL resource id for this program

        :type: int
        """
        ...
    
    @property
    def attributes(self) -> Iterable[AttribFormat]:
        """
        List of attribute information
        """
        ...
    
    @property
    def varyings(self) -> List[str]:
        """
        Out attributes names used in transform feedback

        :type: list of str
        """
        ...
    
    @property
    def out_attributes(self) -> List[str]:
        """
        Out attributes names used in transform feedback.

        .. Warning:: Old alias for ``varyings``. May be removed in the future.

        :type: list of str
        """
        ...
    
    @property
    def varyings_capture_mode(self) -> str:
        """
        Get the capture more for transform feedback (single, multiple).

        This is a read only property since capture mode
        can only be set before the program is linked.
        """
        ...
    
    @property
    def geometry_input(self) -> int:
        """
        The geometry shader's input primitive type.
        This an be compared with ``GL_TRIANGLES``, ``GL_POINTS`` etc.
        and is queried when the program is created.

        :type: int
        """
        ...
    
    @property
    def geometry_output(self) -> int:
        """The geometry shader's output primitive type.
        This an be compared with ``GL_TRIANGLES``, ``GL_POINTS`` etc.
        and is queried when the program is created.

        :type: int
        """
        ...
    
    @property
    def geometry_vertices(self) -> int:
        """
        The maximum number of vertices that can be emitted.
        This is queried when the program is created.

        :type: int
        """
        ...
    
    def delete(self): # -> None:
        """
        Destroy the underlying OpenGL resource.
        Don't use this unless you know exactly what you are doing.
        """
        ...
    
    @staticmethod
    def delete_glo(ctx, prog_id): # -> None:
        """
        Deletes a program. This is normally called automatically when the
        program is garbage collected.

        :param ctx: The context
        :param prog_id: The OpenGL resource id
        """
        ...
    
    def __getitem__(self, item) -> Union[Uniform, UniformBlock]:
        """Get a uniform or uniform block"""
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Set a uniform value"""
        ...
    
    def set_uniform_safe(self, name: str, value: Any): # -> None:
        """
        Safely set a uniform catching KeyError.

        :param name: The uniform name
        :param value: The uniform value
        """
        ...
    
    def set_uniform_array_safe(self, name: str, value: List[Any]): # -> None:
        """
        Safely set a uniform array. Arrays can be shortened
        by the glsl compiler not all elements are determined
        to be in use. This function checks the length of the
        actual array and sets a subset of the values if needed.
        If the uniform don't exist no action will be done.

        :param name: Name of uniform
        :param value: List of values
        """
        ...
    
    def use(self): # -> None:
        """
        Activates the shader.
        This is normally done for you automatically.
        """
        ...
    
    @staticmethod
    def compile_shader(source: str, shader_type: PyGLenum) -> gl.GLuint:
        """Compile the shader code of the given type.

        `shader_type` could be GL_VERTEX_SHADER, GL_FRAGMENT_SHADER, ...

        Returns the shader id as a GLuint
        """
        ...
    
    @staticmethod
    def link(glo): # -> None:
        """Link a shader program"""
        ...
    
    def __repr__(self): # -> str:
        ...
    


