"""
This type stub file was generated by pyright.
"""

from typing import Dict, Iterable, List, Optional, TYPE_CHECKING
from .context import Context as ArcadeGlContext
from .types import PyGLenum

if TYPE_CHECKING:
    ...
class ShaderSource:
    """
    GLSL source container for making source parsing simpler.
    We support locating out attributes, applying #defines values
    and injecting common source.

    This wrapper should ideally contain an unmodified version
    of the original source for caching. Getting the specific
    source with defines applied through ``get_source``.

    NOTE: We do assume the source is neat enough to be parsed
    this way and don't contain several statements on one line.

    :param ctx: The context this framebuffer belongs to
    :param source: The source code
    :common List[str] common: Common source code to inject
    :param source_type: The shader type
    :param depth_attachment: A depth attachment (optional)
    """
    def __init__(self, ctx: ArcadeGlContext, source: str, common: Optional[Iterable[str]], source_type: PyGLenum) -> None:
        """Create a shader source wrapper."""
        ...
    
    @property
    def version(self) -> int:
        """The glsl version"""
        ...
    
    @property
    def out_attributes(self) -> List[str]:
        """The out attributes for this program"""
        ...
    
    def inject_common_sources(self, common: Optional[Iterable[str]]) -> None:
        """Inject common source code into the shader source"""
        ...
    
    def get_source(self, *, defines: Optional[Dict[str, str]] = ...) -> str:
        """Return the shader source

        :param defines: Defines to replace in the source.
        """
        ...
    
    @staticmethod
    def apply_defines(lines: List[str], defines: Dict[str, str]) -> List[str]:
        """Locate and apply #define values

        :param lines: List of source lines
        :param defines: dict with ``name: value`` pairs.
        """
        ...
    


