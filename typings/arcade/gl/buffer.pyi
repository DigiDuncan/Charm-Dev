"""
This type stub file was generated by pyright.
"""

from typing import Optional, TYPE_CHECKING
from pyglet import gl
from arcade.types import BufferProtocol
from arcade.gl import Context

if TYPE_CHECKING:
    ...
class Buffer:
    """OpenGL buffer object. Buffers store byte data and upload it
    to graphics memory so shader programs can process the data.
    They are used for storage of vertex data,
    element data (vertex indexing), uniform block data etc.

    The ``data`` parameter can be anything that implements the
    `Buffer Protocol <https://docs.python.org/3/c-api/buffer.html>`_.

    This includes ``bytes``, ``bytearray``, ``array.array``, and
    more. You may need to use typing workarounds for non-builtin
    types. See :ref:`prog-guide-gl-buffer-protocol-typing` for more
    information.

    .. warning:: Buffer objects should be created using :py:meth:`arcade.gl.Context.buffer`

    :param ctx: The context this buffer belongs to
    :param data: The data this buffer should contain.
                                It can be a ``bytes`` instance or any
                                object supporting the buffer protocol.
    :param reserve: Create a buffer of a specific byte size
    :param usage: A hit of this buffer is ``static`` or ``dynamic`` (can mostly be ignored)
    """
    __slots__ = ...
    _usages = ...
    def __init__(self, ctx: Context, data: Optional[BufferProtocol] = ..., reserve: int = ..., usage: str = ...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __del__(self): # -> None:
        ...
    
    @property
    def size(self) -> int:
        """
        The byte size of the buffer.

        :type: int
        """
        ...
    
    @property
    def ctx(self) -> Context:
        """
        The context this resource belongs to.

        :type: :py:class:`arcade.gl.Context`
        """
        ...
    
    @property
    def glo(self) -> gl.GLuint:
        """
        The OpenGL resource id

        :type: gl.GLuint
        """
        ...
    
    def delete(self): # -> None:
        """
        Destroy the underlying OpenGL resource.
        Don't use this unless you know exactly what you are doing.
        """
        ...
    
    @staticmethod
    def delete_glo(ctx: Context, glo: gl.GLuint): # -> None:
        """
        Release/delete open gl buffer.
        This is automatically called when the object is garbage collected.
        """
        ...
    
    def read(self, size: int = ..., offset: int = ...) -> bytes:
        """Read data from the buffer.

        :param size: The bytes to read. -1 means the entire buffer (default)
        :param offset: Byte read offset
        """
        ...
    
    def write(self, data: BufferProtocol, offset: int = ...): # -> None:
        """Write byte data to the buffer from a buffer protocol object.

        The ``data`` value can be anything that implements the
        `Buffer Protocol <https://docs.python.org/3/c-api/buffer.html>`_.

        This includes ``bytes``, ``bytearray``, ``array.array``, and
        more. You may need to use typing workarounds for non-builtin
        types. See :ref:`prog-guide-gl-buffer-protocol-typing` for more
        information.

        If the supplied data is larger than the buffer, it will be
        truncated to fit. If the supplied data is smaller than the
        buffer, the remaining bytes will be left unchanged.

        :param data: The byte data to write. This can be bytes or any object supporting the buffer protocol.
        :param offset: The byte offset
        """
        ...
    
    def copy_from_buffer(self, source: Buffer, size=..., offset=..., source_offset=...): # -> None:
        """Copy data into this buffer from another buffer

        :param source: The buffer to copy from
        :param size: The amount of bytes to copy
        :param offset: The byte offset to write the data in this buffer
        :param source_offset: The byte offset to read from the source buffer
        """
        ...
    
    def orphan(self, size: int = ..., double: bool = ...): # -> None:
        """
        Re-allocate the entire buffer memory. This can be used to resize
        a buffer or for re-specification (orphan the buffer to avoid blocking).

        If the current buffer is busy in rendering operations
        it will be deallocated by OpenGL when completed.

        :param size: New size of buffer. -1 will retain the current size.
        :param double: Is passed in with `True` the buffer size will be doubled
        """
        ...
    
    def bind_to_uniform_block(self, binding: int = ..., offset: int = ..., size: int = ...): # -> None:
        """Bind this buffer to a uniform block location.
        In most cases it will be sufficient to only provide a binding location.

        :param binding: The binding location
        :param offset: byte offset
        :param size: size of the buffer to bind.
        """
        ...
    
    def bind_to_storage_buffer(self, *, binding=..., offset=..., size=...): # -> None:
        """
        Bind this buffer as a shader storage buffer.

        :param binding: The binding location
        :param offset: Byte offset in the buffer
        :param size: The size in bytes. The entire buffer will be mapped by default.
        """
        ...
    


