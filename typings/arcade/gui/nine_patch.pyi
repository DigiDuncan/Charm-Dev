"""
This type stub file was generated by pyright.
"""

import arcade
import arcade.gl as gl
from typing import Optional, Tuple
from arcade.types.rect import Rect

class NinePatchTexture:
    """
    Keeps borders & corners at constant widths while stretching the middle.

    It can be used with new or existing :py:class:`~arcade.gui.UIWidget`
    subclasses wherever an ordinary :py:class:`arcade.Texture` is
    supported. This is useful for GUI elements which must grow or shrink
    while keeping their border decorations constant, such as dialog boxes
    or text boxes.

    The diagram below explains the stretching behavior of this class:

    * Numbered regions with arrows (``<--->``) stretch along the
      direction(s) of any arrows present
    * Bars (``|---|``) mark the distances specified by the border
      parameters (``left``, etc)

    .. code-block::
        :caption: Stretch Axes & Border Parameters

            left                        right
            |------|                 |------|
                                               top
            +------+-----------------+------+  ---
            | (1)  | (2)             | (3)  |   |
            |      | <-------------> |      |   |
            +------+-----------------+------+  ---
            | (4)  | (5)    ^        | (6)  |
            |  ^   |        |        |   ^  |
            |  |   |        |        |   |  |
            |  |   | <------+------> |   |  |
            |  |   |        |        |   |  |
            |  |   |        |        |   |  |
            |  v   |        v        |   v  |
            +------+-----------------+------+  ---
            | (7)  | (8)             | (9)  |   |
            |      | <-------------> |      |   |
            +------+-----------------+------+  ---
                                              bottom

    As the texture is stretched, the numbered slices of the texture behave
    as follows:

    * Areas ``(1)``, ``(3)``, ``(7)`` and ``(9)`` never stretch.
    * Area ``(5)`` stretches both horizontally and vertically.
    * Areas ``(2)`` and ``(8)`` only stretch horizontally.
    * Areas ``(4)`` and ``(6)`` only stretch vertically.

    :param left: The width of the left border of the 9-patch
        (in pixels)
    :param right: The width of the right border of the 9-patch
        (in pixels)
    :param bottom: The height of the bottom border of the 9-patch
        (in pixels)
    :param top: The height of the top border of the 9-patch
        (in pixels)
    :param texture: The raw texture to use for the 9-patch
    :param atlas: Specify an atlas other than arcade's default
        texture atlas
    """
    def __init__(self, left: int, right: int, bottom: int, top: int, texture: arcade.Texture, *, atlas: Optional[arcade.TextureAtlas] = ...) -> None:
        ...
    
    @classmethod
    def from_rect(cls, rect: Rect, texture: arcade.Texture, atlas: Optional[arcade.TextureAtlas] = ...) -> NinePatchTexture:
        """Construct a new SpriteSolidColor from a :py:class:`~arcade.types.rect.Rect`."""
        ...
    
    @property
    def ctx(self) -> arcade.ArcadeContext:
        """The OpenGL context."""
        ...
    
    @property
    def texture(self) -> arcade.Texture:
        """Get or set the texture."""
        ...
    
    @texture.setter
    def texture(self, texture: arcade.Texture): # -> None:
        ...
    
    @property
    def program(self) -> gl.program.Program:
        """
        Get or set the shader program.

        Returns the default shader if no other shader is assigned.
        """
        ...
    
    @program.setter
    def program(self, program: gl.program.Program): # -> None:
        ...
    
    @property
    def left(self) -> int:
        """Get or set the left border of the 9-patch."""
        ...
    
    @left.setter
    def left(self, left: int): # -> None:
        ...
    
    @property
    def right(self) -> int:
        """Get or set the right border of the 9-patch."""
        ...
    
    @right.setter
    def right(self, right: int): # -> None:
        ...
    
    @property
    def bottom(self) -> int:
        """Get or set the bottom border of the 9-patch."""
        ...
    
    @bottom.setter
    def bottom(self, bottom: int): # -> None:
        ...
    
    @property
    def top(self) -> int:
        """Get or set the top border of the 9-patch."""
        ...
    
    @top.setter
    def top(self, top: int): # -> None:
        ...
    
    @property
    def size(self) -> Tuple[int, int]:
        """The size of texture as a width, height tuple in pixels."""
        ...
    
    @property
    def width(self) -> int:
        """The width of the texture in pixels."""
        ...
    
    @property
    def height(self) -> int:
        """The height of the texture in pixels."""
        ...
    
    def draw_sized(self, *, position: Tuple[float, float] = ..., size: Tuple[float, float], pixelated: bool = ..., **kwargs): # -> None:
        """
        Draw the 9-patch texture with a specific size.

        .. warning:: This method assumes the passed dimensions are proper!

                     Unexpected behavior may occur if you specify a size
                     smaller than the total size of the border areas.


        :param position: Bottom left offset of the texture in pixels
        :param size: Size of the 9-patch as width, height in pixels
        :param pixelated: Whether to draw with nearest neighbor interpolation
        """
        ...
    


