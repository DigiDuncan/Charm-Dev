"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Generic, Optional, TypeVar

P = TypeVar("P")
class _Obs(Generic[P]):
    """
    Internal holder for Property value and change listeners
    """
    __slots__ = ...
    def __init__(self, value: P) -> None:
        ...
    


class Property(Generic[P]):
    """
    An observable property which triggers observers when changed.

.. code-block:: python

        def log_change(instance, value):
            print("Something changed")

        class MyObject:
            name = Property()

        my_obj = MyObject()
        bind(my_obj, "name", log_change)
        unbind(my_obj, "name", log_change)

        my_obj.name = "Hans"
        # > Something changed

    :param default: Default value which is returned, if no value set before
    :param default_factory: A callable which returns the default value.
                            Will be called with the property and the instance
    """
    __slots__ = ...
    name: str
    def __init__(self, default: Optional[P] = ..., default_factory: Optional[Callable[[Any, Any], P]] = ...) -> None:
        ...
    
    def get(self, instance) -> P:
        ...
    
    def set(self, instance, value): # -> None:
        ...
    
    def dispatch(self, instance, value): # -> None:
        ...
    
    def bind(self, instance, callback): # -> None:
        ...
    
    def unbind(self, instance, callback): # -> None:
        ...
    
    def __set_name__(self, owner, name): # -> None:
        ...
    
    def __get__(self, instance, owner) -> P:
        ...
    
    def __set__(self, instance, value): # -> None:
        ...
    


def bind(instance, property: str, callback): # -> None:
    """
    Binds a function to the change event of the property. A reference to the function will be kept,
    so that it will be still invoked, even if it would normally have been garbage collected.

        def log_change(instance, value):
            print(f"Value of {instance} changed to {value}")

        class MyObject:
            name = Property()

        my_obj = MyObject()
        bind(my_obj, "name", log_change)

        my_obj.name = "Hans"
        # > Value of <__main__.MyObject ...> changed to Hans

    :param instance: Instance owning the property
    :param property: Name of the property
    :param callback: Function to call
    :return: None
    """
    ...

def unbind(instance, property: str, callback): # -> None:
    """
    Unbinds a function from the change event of the property.

        def log_change(instance, value):
            print("Something changed")

        class MyObject:
            name = Property()

        my_obj = MyObject()
        bind(my_obj, "name", log_change)
        unbind(my_obj, "name", log_change)

        my_obj.name = "Hans"
        # > Something changed


    :param instance: Instance owning the property
    :param property: Name of the property
    :param callback: Function to unbind
    :return: None
    """
    ...

class _ObservableDict(dict):
    """Internal class to observe changes inside a native python dict."""
    __slots__ = ...
    def __init__(self, prop: Property, instance, *largs) -> None:
        ...
    
    def dispatch(self): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def clear(self): # -> None:
        ...
    
    def pop(self, *largs):
        ...
    
    def popitem(self): # -> tuple[Any, Any]:
        ...
    
    def setdefault(self, *largs): # -> None:
        ...
    
    def update(self, *largs): # -> None:
        ...
    


class DictProperty(Property):
    """
    Property that represents a dict.
    Only dict are allowed. Any other classes are forbidden.
    """
    def __init__(self) -> None:
        ...
    
    def set(self, instance, value: dict): # -> None:
        ...
    


class _ObservableList(list):
    """Internal class to observe changes inside a native python list."""
    __slots__ = ...
    def __init__(self, prop: Property, instance, *largs) -> None:
        ...
    
    def dispatch(self): # -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __iadd__(self, *largs): # -> Self:
        ...
    
    def __imul__(self, *largs): # -> Self:
        ...
    
    def append(self, *largs): # -> None:
        ...
    
    def clear(self): # -> None:
        ...
    
    def remove(self, *largs): # -> None:
        ...
    
    def insert(self, *largs): # -> None:
        ...
    
    def pop(self, *largs):
        ...
    
    def extend(self, *largs): # -> None:
        ...
    
    def sort(self, **kwargs): # -> None:
        ...
    
    def reverse(self): # -> None:
        ...
    


class ListProperty(Property):
    """
    Property that represents a list.
    Only list are allowed. Any other classes are forbidden.
    """
    def __init__(self) -> None:
        ...
    
    def set(self, instance, value: dict): # -> None:
        ...
    


