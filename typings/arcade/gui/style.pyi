"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from dataclasses import dataclass
from typing import Any, Generic, Mapping, TypeVar, overload
from arcade.gui.widgets import UIWidget

@dataclass
class UIStyleBase:
    """
    Base class for styles to ensure a general interface and implement additional magic.

    Support dict like access syntax.

    A styled widget should own a dataclass, which subclasses this class
    """
    @overload
    def get(self, key, default: str) -> str:
        ...
    
    @overload
    def get(self, key, default: Any) -> Any:
        ...
    
    def get(self, key, default=...): # -> Any | None:
        ...
    
    def __contains__(self, item): # -> bool:
        ...
    
    def __getitem__(self, item): # -> Any:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    


StyleRef = TypeVar("StyleRef", bound=UIStyleBase)
class UIStyledWidget(UIWidget, Generic[StyleRef]):
    style: Mapping = ...
    def __init__(self, *, style: Mapping[str, StyleRef], **kwargs) -> None:
        ...
    
    @abstractmethod
    def get_current_state(self) -> str:
        """
        Return the current state of the widget. These should be contained in the style dict.

        Well known states:
        - normal
        - hover
        - press
        - disabled
        """
        ...
    
    def get_current_style(self) -> StyleRef:
        """Return style based on any state of the widget"""
        ...
    


