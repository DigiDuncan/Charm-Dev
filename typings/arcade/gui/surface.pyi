"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Optional, Tuple, Union
from arcade import Texture
from arcade.gui.nine_patch import NinePatchTexture
from arcade.types import Point, RGBA255
from arcade.types.rect import Rect

class Surface:
    """
    Holds a :class:`arcade.gl.Framebuffer` and abstracts the drawing on it.
    Used internally for rendering widgets.
    """
    def __init__(self, *, size: Tuple[int, int], position: Tuple[int, int] = ..., pixel_ratio: float = ...) -> None:
        ...
    
    @property
    def position(self) -> Point:
        """Get or set the surface position"""
        ...
    
    @position.setter
    def position(self, value): # -> None:
        ...
    
    @property
    def size(self): # -> Tuple[int, int]:
        """Size of the surface in window coordinates"""
        ...
    
    @property
    def size_scaled(self): # -> tuple[int, int]:
        """The physical size of the buffer"""
        ...
    
    @property
    def pixel_ratio(self) -> float:
        ...
    
    @property
    def width(self) -> int:
        ...
    
    @property
    def height(self) -> int:
        ...
    
    def clear(self, color: RGBA255 = ...): # -> None:
        """Clear the surface"""
        ...
    
    def draw_texture(self, x: float, y: float, width: float, height: float, tex: Union[Texture, NinePatchTexture], angle: float = ..., alpha: int = ...): # -> None:
        ...
    
    def draw_sprite(self, x, y, width, height, sprite): # -> None:
        """Draw a sprite to the surface"""
        ...
    
    @contextmanager
    def activate(self): # -> Generator[Self, Any, None]:
        """
        Save and restore projection and activate Surface buffer to draw on.
        Also resets the limit of the surface (viewport).
        """
        ...
    
    def limit(self, x, y, width, height): # -> None:
        """Reduces the draw area to the given rect"""
        ...
    
    def draw(self, area: Optional[Rect] = ...) -> None:
        """
        Draws the contents of the surface.

        The surface will be rendered at the configured ``position``
        and limited by the given ``area``. The area can be out of bounds.

        :param area: Limit the area in the surface we're drawing (l, b, w, h)
        """
        ...
    
    def resize(self, *, size: Tuple[int, int], pixel_ratio: float) -> None:
        """
        Resize the internal texture by re-allocating a new one

        :param size: The new size in pixels (xy)
        :param pixel_ratio: The pixel scale of the window
        """
        ...
    


