"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional
from arcade.gui.events import UIOnActionEvent
from arcade.gui.mixins import UIMouseFilterMixin
from arcade.gui.widgets.layout import UIAnchorLayout, UIBoxLayout

"""
Constructs, are prepared widget combinations, you can use for common use-cases
"""
class UIMessageBox(UIMouseFilterMixin, UIAnchorLayout):
    """
    A simple dialog box that pops up a message with buttons to close.
    Subclass this class or overwrite the 'on_action' event handler with

    .. code-block:: python

        box = UIMessageBox(...)
        @box.event("on_action")
        def on_action(event: UIOnActionEvent):
            pass


    :param width: Width of the message box
    :param height: Height of the message box
    :param message_text: Text to show as message to the user
    :param buttons: List of strings, which are shown as buttons
    """
    def __init__(self, *, width: float, height: float, message_text: str, buttons=...) -> None:
        ...
    
    def on_action(self, event: UIOnActionEvent): # -> None:
        """Called when button was pressed"""
        ...
    


class UIButtonRow(UIBoxLayout):
    """
    Places buttons in a row.
    :param vertical: Whether the button row is vertical or not.
    :param align: Where to align the button row.
    :param size_hint: Tuple of floats (0.0 - 1.0) of how much space of the parent should be requested.
    :param size_hint_min: Min width and height in pixel.
    :param size_hint_max: Max width and height in pixel.
    :param space_between: The space between the children.
    :param style: Not used.
    :param Tuple[str, ...] button_labels: The labels for the buttons.
    :param callback: The callback function which will receive the text of the clicked button.
    """
    def __init__(self, *, vertical: bool = ..., align: str = ..., size_hint: Any = ..., size_hint_min: Optional[Any] = ..., size_hint_max: Optional[Any] = ..., space_between: int = ..., style: Optional[Any] = ..., button_factory: type = ...) -> None:
        ...
    
    def add_button(self, label: str, *, style=..., multiline=...): # -> Any:
        ...
    
    def on_action(self, event: UIOnActionEvent): # -> None:
        ...
    


