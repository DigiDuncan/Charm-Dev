"""
This type stub file was generated by pyright.
"""

import arcade
from typing import Optional
from arcade.gui.events import UIEvent
from arcade.gui.surface import Surface
from arcade.gui.widgets import UIWidget
from arcade.gui.widgets.layout import UIAnchorLayout
from arcade.types import RGBA255, RGBOrA255

class UILabel(UIWidget):
    """A simple text label. This widget is meant to display user instructions or
    information. This label supports multiline text.

    If you want to make a scrollable viewing text box, use a
    :py:class:`~arcade.gui.UITextArea`.

    By default, a label will fit its initial content. If the text is changed use
    :py:meth:`~arcade.gui.UILabel.fit_content` to adjust the size.

    If the text changes frequently, ensure to set a background color or texture, which will
    prevent a full rendering of the whole UI and only render the label itself.

    :param text: Text displayed on the label.
    :param x: x position (default anchor is bottom-left).
    :param y: y position (default anchor is bottom-left).
    :param width: Width of the label. Defaults to text width if not
                        specified. See
                        :py:meth:`~pyglet.text.layout.TextLayout.content_width`.
    :param height: Height of the label. Defaults to text height if not
                         specified. See
                         :py:meth:`~pyglet.text.layout.TextLayout.content_height`.
    :param font_name: A list of fonts to use. Arcade will start at the beginning
                      of the tuple and keep trying to load fonts until success.
    :param font_size: Font size of font.
    :param text_color: Color of the text.
    :param bold: If enabled, the label's text will be in a **bold** style.
    :param italic: If enabled, the label's text will be in an *italic*
                        style.
    :param stretch: Stretch font style.
    :param align: Horizontal alignment of text on a line. This only applies
                      if a width is supplied. Valid options include ``"left"``,
                      ``"center"`` or ``"right"``.
    :param dpi: Resolution of the fonts in the layout. Defaults to 96.
    :param multiline: If enabled, a ``\\n`` will start a new line. A
                           :py:class:`~arcade.gui.UITextWidget` with
                           ``multiline`` of True is the same thing as
                           a :py:class:`~arcade.gui.UITextArea`.
    :param size_hint: A tuple of floats between 0 and 1 defining the amount of
                      space of the parent should be requested.
    :param size_hint_min: Minimum size hint width and height in pixel.
    :param size_hint_max: Maximum size hint width and height in pixel.
    :param style: Not used. Labels will have no need for a style; they are too
                  simple (just a text display).
    """
    def __init__(self, text: str = ..., *, x: float = ..., y: float = ..., width: Optional[float] = ..., height: Optional[float] = ..., font_name=..., font_size: float = ..., text_color: RGBOrA255 = ..., bold=..., italic=..., align=..., multiline: bool = ..., size_hint=..., size_hint_min=..., size_hint_max=..., **kwargs) -> None:
        ...
    
    def fit_content(self): # -> None:
        """
        Set the width and height of the label to contain the whole text.
        """
        ...
    
    @property
    def text(self): # -> str:
        ...
    
    @text.setter
    def text(self, value): # -> None:
        """
        Update text of the label.

        This triggers a full render to ensure that previous text is cleared out.
        """
        ...
    
    def do_render(self, surface: Surface): # -> None:
        ...
    


class UITextWidget(UIAnchorLayout):
    """
    Adds the ability to add text to a widget.
    Use this to create subclass widgets, which have text.

    The text can be placed within the widget using
    :py:class:`~arcade.gui.UIAnchorLayout` parameters with
    :py:meth:`~arcade.gui.UITextWidget.place_text`.
    """
    def __init__(self, *, text: str, multiline: bool = ..., **kwargs) -> None:
        ...
    
    def place_text(self, anchor_x: Optional[str] = ..., align_x: float = ..., anchor_y: Optional[str] = ..., align_y: float = ..., **kwargs): # -> None:
        """
        Place widget's text within the widget using
        :py:class:`~arcade.gui.UIAnchorLayout` parameters.
        """
        ...
    
    @property
    def text(self): # -> str:
        """
        Text of the widget. Modifying this repeatedly will cause significant
        lag; calculating glyph position is very expensive.
        """
        ...
    
    @text.setter
    def text(self, value): # -> None:
        ...
    
    @property
    def multiline(self): # -> bool:
        """
        Get or set the multiline mode.

        Newline characters (``"\\n"``) will only be honored when this is set to ``True``.
        If you want a scrollable text widget, please use :py:class:`~arcade.gui.UITextArea`
        instead.
        """
        ...
    
    @multiline.setter
    def multiline(self, value): # -> None:
        ...
    
    @property
    def ui_label(self) -> UILabel:
        """
        Internal py:class:`~arcade.gui.UILabel` used for rendering the text.
        """
        ...
    
    @property
    def label(self) -> arcade.Text:
        ...
    


class UIInputText(UIWidget):
    """
    An input field the user can type text into. This is useful in returning
    string input from the user. A caret is displayed, which the user can move
    around with a mouse or keyboard.

    A mouse drag selects text, a mouse press moves the caret, and keys can move
    around the caret. Arcade confirms that the field is active before allowing
    users to type, so it is okay to have multiple of these.

    :param x: x position (default anchor is bottom-left).
    :param y: y position (default anchor is bottom-left).
    :param width: Width of the text field.
    :param height: Height of the text field.
    :param text: Initial text displayed. This can be modified later
                 programmatically or by the user's interaction with the caret.
    :param font_name: A list of fonts to use. Arcade will start at the beginning
                      of the tuple and keep trying to load fonts until success.
    :param font_size: Font size of font.
    :param text_color: Color of the text.
    :param multiline: If enabled, a ``\\n`` will start a new line. A
                      :py:class:`~arcade.gui.UITextWidget`  ``multiline`` of
                      True is the same thing as
                      a :py:class:`~arcade.gui.UITextArea`.
    :param caret_color: An RGBA or RGB color for the caret with each
        channel between 0 and 255, inclusive.
    :param size_hint: A tuple of floats between 0 and 1 defining the amount of
                      space of the parent should be requested.
    :param size_hint_min: Minimum size hint width and height in pixel.
    :param size_hint_max: Maximum size hint width and height in pixel.
    :param style: Style has not been implemented for this widget, however it
                  will be added in the near future.
    """
    LAYOUT_OFFSET = ...
    def __init__(self, *, x: float = ..., y: float = ..., width: float = ..., height: float = ..., text: str = ..., font_name=..., font_size: float = ..., text_color: RGBOrA255 = ..., multiline=..., caret_color: RGBOrA255 = ..., size_hint=..., size_hint_min=..., size_hint_max=..., **kwargs) -> None:
        ...
    
    def on_update(self, dt): # -> None:
        ...
    
    def on_event(self, event: UIEvent) -> Optional[bool]:
        ...
    
    @property
    def text(self):
        ...
    
    @text.setter
    def text(self, value): # -> None:
        ...
    
    def do_render(self, surface: Surface): # -> None:
        ...
    


class UITextArea(UIWidget):
    """
    A text area that allows users to view large documents of text by scrolling
    the mouse.

    :param x: x position (default anchor is bottom-left).
    :param y: y position (default anchor is bottom-left).
    :param width: Width of the text area.
    :param height: Height of the text area.
    :param text: Initial text displayed.
    :param font_name: A list of fonts to use. Arcade will start at the beginning
                      of the tuple and keep trying to load fonts until success.
    :param font_size: Font size of font.
    :param text_color: Color of the text.
    :param multiline: If enabled, a ``\\n`` will start a new line.
    :param scroll_speed: Speed of mouse scrolling.
    :param size_hint: A tuple of floats between 0 and 1 defining the amount of
                      space of the parent should be requested.
    :param size_hint_min: Minimum size hint width and height in pixel.
    :param size_hint_max: Maximum size hint width and height in pixel.
    :param style: Style has not been implemented for this widget, however it
                  will be added in the near future.
    """
    def __init__(self, *, x: float = ..., y: float = ..., width: float = ..., height: float = ..., text: str = ..., font_name=..., font_size: float = ..., text_color: RGBA255 = ..., multiline: bool = ..., scroll_speed: Optional[float] = ..., size_hint=..., size_hint_min=..., size_hint_max=..., **kwargs) -> None:
        ...
    
    def fit_content(self): # -> None:
        """
        Set the width and height of the text area to contain the whole text.
        """
        ...
    
    @property
    def text(self):
        ...
    
    @text.setter
    def text(self, value): # -> None:
        ...
    
    def do_render(self, surface: Surface): # -> None:
        ...
    
    def on_event(self, event: UIEvent) -> Optional[bool]:
        ...
    


