"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Dict, Optional, Union
from arcade import Texture
from arcade.gui.nine_patch import NinePatchTexture
from arcade.gui.style import UIStyleBase, UIStyledWidget
from arcade.gui.surface import Surface
from arcade.gui.widgets import UIInteractiveWidget
from arcade.gui.widgets.text import UITextWidget
from arcade.text import FontNameOrNames
from arcade.types import RGBA255

@dataclass
class UITextureButtonStyle(UIStyleBase):
    """
    Used to style the texture button. Below is its use case.

    .. code:: py

        button = UITextureButton(style={"normal": UITextureButton.UIStyle(...),})
    """
    font_size: int = ...
    font_name: FontNameOrNames = ...
    font_color: RGBA255 = ...
    border_width: int = ...


class UITextureButton(UIInteractiveWidget, UIStyledWidget[UITextureButtonStyle], UITextWidget):
    """
    A button with an image for the face of the button.

    There are four states of the UITextureButton i.e normal, hovered, pressed and disabled.

    :param x: x coordinate of bottom left
    :param y: y coordinate of bottom left
    :param width: width of widget. Defaults to texture width if not specified.
    :param height: height of widget. Defaults to texture height if not specified.
    :param texture: texture to display for the widget.
    :param texture_hovered: different texture to display if mouse is hovering over button.
    :param texture_pressed: different texture to display if mouse button is pressed while hovering over button.
    :param text: text to add to the button.
    :param multiline: allows to wrap text, if not enough width available
    :param style: Used to style the button for different states.
    :param scale: scale the button, based on the base texture size.
    :param size_hint: Tuple of floats (0.0-1.0), how much space of the parent should be requested
    :param size_hint_min: min width and height in pixel
    :param size_hint_max: max width and height in pixel
    """
    _textures: Dict[str, Union[Texture, NinePatchTexture]] = ...
    UIStyle = UITextureButtonStyle
    DEFAULT_STYLE = ...
    def __init__(self, *, x: float = ..., y: float = ..., width: Optional[float] = ..., height: Optional[float] = ..., texture: Union[None, Texture, NinePatchTexture] = ..., texture_hovered: Union[None, Texture, NinePatchTexture] = ..., texture_pressed: Union[None, Texture, NinePatchTexture] = ..., texture_disabled: Union[None, Texture, NinePatchTexture] = ..., text: str = ..., multiline: bool = ..., scale: Optional[float] = ..., style: Optional[Dict[str, UIStyleBase]] = ..., size_hint=..., size_hint_min=..., size_hint_max=..., **kwargs) -> None:
        ...
    
    def get_current_state(self) -> str:
        """Returns the current state of the button i.e disabled, press, hover or normal."""
        ...
    
    @property
    def texture(self): # -> Texture | NinePatchTexture:
        """Returns the normal texture for the face of the button."""
        ...
    
    @texture.setter
    def texture(self, value: Texture): # -> None:
        ...
    
    @property
    def texture_hovered(self): # -> Texture | NinePatchTexture:
        """Returns the hover texture for the face of the button."""
        ...
    
    @texture_hovered.setter
    def texture_hovered(self, value: Texture): # -> None:
        ...
    
    @property
    def texture_pressed(self): # -> Texture | NinePatchTexture:
        """Returns the pressed texture for the face of the button."""
        ...
    
    @texture_pressed.setter
    def texture_pressed(self, value: Texture): # -> None:
        ...
    
    def do_render(self, surface: Surface): # -> None:
        ...
    


class UIFlatButton(UIInteractiveWidget, UIStyledWidget, UITextWidget):
    """
    A text button, with support for background color and a border.

    There are four states of the UITextureButton i.e normal, hovered, pressed and disabled.

    :param x: x coordinate of bottom left
    :param y: y coordinate of bottom left
    :param width: width of widget. Defaults to texture width if not specified.
    :param height: height of widget. Defaults to texture height if not specified.
    :param text: text to add to the button.
    :param multiline: allows to wrap text, if not enough width available
    :param style: Used to style the button

    """
    @dataclass
    class UIStyle(UIStyleBase):
        """
        Used to style the button. Below is its use case.

        .. code:: py

            button = UIFlatButton(style={"normal": UIFlatButton.UIStyle(...),})
        """
        font_size: int = ...
        font_name: FontNameOrNames = ...
        font_color: RGBA255 = ...
        bg: RGBA255 = ...
        border: Optional[RGBA255] = ...
        border_width: int = ...
    
    
    DEFAULT_STYLE = ...
    def __init__(self, *, x: float = ..., y: float = ..., width: float = ..., height: float = ..., text=..., multiline=..., size_hint=..., size_hint_min=..., size_hint_max=..., style=..., **kwargs) -> None:
        ...
    
    def get_current_state(self) -> str:
        """Returns the current state of the button i.e disabled, press, hover or normal."""
        ...
    
    def do_render(self, surface: Surface): # -> None:
        ...
    


