"""
This type stub file was generated by pyright.
"""

from abc import ABCMeta
from dataclasses import dataclass
from typing import Mapping, Optional, Union
from arcade import Texture
from arcade.gui import NinePatchTexture, Surface, UIEvent, UIInteractiveWidget, UIOnClickEvent
from arcade.gui.events import UIOnChangeEvent
from arcade.gui.style import UIStyleBase, UIStyledWidget
from arcade.types import RGBA255

class UIBaseSlider(UIInteractiveWidget, metaclass=ABCMeta):
    """
    Base class for sliders.

    A slider contains of a horizontal track and a thumb.
    The thumb can be moved along the track to set the value of the slider.

    Use the `on_change` event to get notified about value changes.

    Subclasses should implement the `_render_track` and `_render_thumb` methods.
    """
    value = ...
    def __init__(self, *, value: float = ..., min_value: float = ..., max_value: float = ..., x: float = ..., y: float = ..., width: float = ..., height: float = ..., size_hint=..., size_hint_min=..., size_hint_max=..., style: Union[Mapping[str, UISliderStyle], None] = ..., **kwargs) -> None:
        ...
    
    @property
    def norm_value(self): # -> float:
        """Normalized value between 0.0 and 1.0"""
        ...
    
    @norm_value.setter
    def norm_value(self, value): # -> None:
        """Normalized value between 0.0 and 1.0"""
        ...
    
    def do_render(self, surface: Surface): # -> None:
        ...
    
    def on_event(self, event: UIEvent) -> Optional[bool]:
        ...
    
    def on_click(self, event: UIOnClickEvent): # -> None:
        ...
    
    def on_change(self, event: UIOnChangeEvent): # -> None:
        """To be implemented by the user, triggered when the cursor's value is changed."""
        ...
    


@dataclass
class UISliderStyle(UIStyleBase):
    """
    Used to style the slider for different states. Below is its use case.

    .. code:: py

        button = UITextureButton(style={"normal": UITextureButton.UIStyle(...),})
    """
    bg: RGBA255 = ...
    border: RGBA255 = ...
    border_width: int = ...
    filled_track: RGBA255 = ...
    unfilled_track: RGBA255 = ...


class UISlider(UIStyledWidget[UISliderStyle], UIBaseSlider):
    """
    A simple slider.

    A slider contains of a horizontal track and a thumb.
    The thumb can be moved along the track to set the value of the slider.

    Use the `on_change` event to get notified about value changes.

    There are four states of the UISlider i.e normal, hovered, pressed and disabled.

    :param value: Current value of the curosr of the slider.
    :param min_value: Minimum value of the slider.
    :param max_value: Maximum value of the slider.
    :param x: x coordinate of bottom left.
    :param y: y coordinate of bottom left.
    :param width: Width of the slider.
    :param height: Height of the slider.
    :param Mapping[str, "UISlider.UIStyle"] | None style: Used to style the slider for different states.

    """
    UIStyle = UISliderStyle
    DEFAULT_STYLE = ...
    def __init__(self, *, value: float = ..., min_value: float = ..., max_value: float = ..., x: float = ..., y: float = ..., width: float = ..., height: float = ..., size_hint=..., size_hint_min=..., size_hint_max=..., style: Union[Mapping[str, UISliderStyle], None] = ..., **kwargs) -> None:
        ...
    
    def get_current_state(self) -> str:
        """Returns the current state of the slider i.e disabled, press, hover or normal."""
        ...
    


class UITextureSlider(UISlider):
    """
    A custom slider subclass which supports textures.

    You can copy this as-is into your own project, or you can modify
    the class to have more features as needed.
    """
    def __init__(self, track: Union[Texture, NinePatchTexture], thumb: Union[Texture, NinePatchTexture], style=..., **kwargs) -> None:
        ...
    


