"""
This type stub file was generated by pyright.
"""

from typing import Iterable, Optional, TypeVar
from arcade.gui.widgets import UILayout, UIWidget

__all__ = ["UILayout", "UIAnchorLayout", "UIBoxLayout", "UIGridLayout"]
W = TypeVar("W", bound="UIWidget")
class UIAnchorLayout(UILayout):
    """
    Places children based on anchor values.

    Defaults to ``size_hint = (1, 1)``.

    Supports the options ``size_hint``, ``size_hint_min``, and
    ``size_hint_max``. Children are allowed to overlap.

    Child are resized based on ``size_hint``. ``size_hint_min/max`` only take effect if a ``size_hint`` is set.

    Allowed keyword options for
    :py:meth:`~arcade.gui.UIAnchorLayout.add`:

    - ``anchor_x``: ``str`` = ``None``

      Horizontal anchor position for the layout. The class constant
      :py:attr:`~arcade.gui.UIAnchorLayout.default_anchor_x` is used as
      default.

    - ``anchor_y``: ``str`` = ``None``

      Vertical anchor position for the layout. The class constant
      :py:attr:`~arcade.gui.UIAnchorLayout.default_anchor_y` is used as
      default.

    - ``align_x``: ``float`` = 0

      Horizontal alignment for the layout.

    - ``align_y``: ``float`` = 0

      Vertical alignement for the layout.
    """
    default_anchor_x = ...
    default_anchor_y = ...
    def __init__(self, *, x: float = ..., y: float = ..., width: float = ..., height: float = ..., children: Iterable[UIWidget] = ..., size_hint=..., size_hint_min=..., size_hint_max=..., **kwargs) -> None:
        ...
    
    def do_layout(self): # -> None:
        ...
    
    def add(self, child: W, *, anchor_x: Optional[str] = ..., align_x: float = ..., anchor_y: Optional[str] = ..., align_y: float = ..., **kwargs) -> W:
        """
        Add a widget to the layout as a child. Added widgets will receive
        all user-interface events and be rendered.

        By default, the latest added widget will receive events first and will
        be rendered on top of others. The widgets will be automatically placed
        within this widget.

        :param child: Specified child widget to add.
        :param anchor_x: Horizontal anchor. Valid options are ``left``,
                         ``right``, and ``center``.
        :param align_x: Offset or padding for the horizontal anchor.
        :param anchor_y: Vertical anchor. Valid options are ``top``,
                         ``center``, and ``bottom``.
        :param align_y: Offset or padding for the vertical anchor.

        :return: Given child that was just added to the layout.
        """
        ...
    


class UIBoxLayout(UILayout):
    """
    Place widgets next to each other. Depending on the
    :py:class:`~arcade.gui.UIBoxLayout.vertical` attribute, the widgets are
    placed top to bottom or left to right.

    .. hint::

        :py:class:`~arcade.gui.UIBoxLayout` does not adjust its
        own size if children are added. This requires a
        :py:class:`~arcade.gui.UIManager` or a
        :py:class:`~arcade.gui.UIAnchorLayout` as a parent.

        Or use :py:meth:`arcade.gui.UIBoxLayout.fit_content` to resize the layout. The
        bottom-left corner is used as the default anchor point.

    Supports the options: ``size_hint``, ``size_hint_min``, ``size_hint_max``. ``size_hint_min`` is automatically
    updated based on the minimal required space by children.

    If a child widget provides a ``size_hint`` for a dimension, the child will
    be resized within the given range of ``size_hint_min`` and
    ``size_hint_max`` (unrestricted if not given). If the parameter
    ``vertical`` is True, any available space (``layout size - min_size`` of
    children) will be distributed to the child widgets based on their
    ``size_hint``.

    :param x: ``x`` coordinate of the bottom left corner.
    :param y: ``y`` coordinate of the bottom left corner.
    :param vertical: Layout children vertical (True) or horizontal (False).
    :param align: Align children in orthogonal direction::
                  - ``x``: ``left``, ``center``, and ``right``
                  - ``y``: ``top``, ``center``, and ``bottom``
    :param children: Initial list of children. More can be added later.
    :param size_hint: Size hint for the :py:class:`~arcade.gui.UILayout` if
                      the widget would like to grow. Defaults to ``0, 0`` ->
                      minimal size to contain children.
    :param size_hint_max: Maximum width and height in pixels.
    :param space_between: Space in pixels between the children.
    """
    def __init__(self, *, x=..., y=..., width=..., height=..., vertical=..., align=..., children: Iterable[UIWidget] = ..., size_hint=..., size_hint_max=..., space_between=..., style=..., **kwargs) -> None:
        ...
    
    def add(self, child: W, **kwargs) -> W:
        ...
    
    def remove(self, child: UIWidget): # -> None:
        ...
    
    def fit_content(self): # -> None:
        """
        Resize the layout to fit the content. This will take the minimal required size into account.
        """
        ...
    
    def prepare_layout(self): # -> None:
        """Updates the size hints if required."""
        ...
    
    def do_layout(self): # -> None:
        ...
    


class UIGridLayout(UILayout):
    """
    Place widgets in a grid layout. This is similar to tkinter's ``grid``
    layout geometry manager.

    Defaults to ``size_hint = (0, 0)``.

    Supports the options ``size_hint``, ``size_hint_min``, and
    ``size_hint_max``.

    Children are resized based on ``size_hint``. Maximum and minimum
    ``size_hint``s only take effect if a ``size_hint`` is given. ``size_hint_min`` is automatically
    updated based on the minimal required space by children.

    :param x: ``x`` coordinate of bottom left corner.
    :param y: ``y`` coordinate of bottom left corner.
    :param align_horizontal: Align children in orthogonal direction.
                                 Options include ``left``, ``center``, and
                                 ``right``.
    :param align_vertical: Align children in orthogonal direction. Options
                               include ``top``, ``center``, and ``bottom``.
    :param children: Initial list of children. More can be
                                        added later.
    :param size_hint: A size hint for :py:class:`~arcade.gui.UILayout`, if the
                      :py:class:`~arcade.gui.UIWidget` would like to grow.
    :param size_hint_max: Maximum width and height in pixels.
    :param horizontal_spacing: Space between columns.
    :param vertical_spacing: Space between rows.
    :param column_count: Number of columns in the grid. This can be changed
                             later.
    :param row_count: Number of rows in the grid. This can be changed
                          later.
    """
    def __init__(self, *, x=..., y=..., align_horizontal=..., align_vertical=..., children: Iterable[UIWidget] = ..., size_hint=..., size_hint_max=..., horizontal_spacing: int = ..., vertical_spacing: int = ..., column_count: int = ..., row_count: int = ..., style=..., **kwargs) -> None:
        ...
    
    def add(self, child: W, col_num: int = ..., row_num: int = ..., col_span: int = ..., row_span: int = ..., **kwargs) -> W:
        """
        Add a widget to the grid layout.

        :param child: Specified child widget to add.
        :param col_num: Column index in which the widget is to be added.
                            The first column is numbered 0; which is the top
                            left corner.
        :param row_num: The row number in which the widget is to be added.
                            The first row is numbered 0; which is the
        :param col_span: Number of columns the widget will stretch for.
        :param row_span: Number of rows the widget will stretch for.
        """
        ...
    
    def remove(self, child: UIWidget): # -> None:
        ...
    
    def prepare_layout(self): # -> None:
        """Updates the size hints if required."""
        ...
    
    def do_layout(self): # -> None:
        ...
    


