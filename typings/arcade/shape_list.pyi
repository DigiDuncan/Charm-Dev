"""
This type stub file was generated by pyright.
"""

from typing import Generic, Iterable, Optional, Sequence, Tuple, TypeVar
from arcade.types import PointList, RGBA255
from arcade.utils import copy_dunders_unimplemented
from arcade import ArcadeContext
from arcade.gl import Program

"""
Drawing commands that use vertex buffer objects (VBOs).

This module contains commands for basic graphics drawing commands,
but uses Vertex Buffer Objects. This keeps the vertices loaded on
the graphics card for much faster render times.
"""
__all__ = ["Shape", "create_line", "create_line_generic_with_colors", "create_line_generic", "create_line_strip", "create_line_loop", "create_lines", "create_lines_with_colors", "create_polygon", "create_rectangle_filled", "create_rectangle_outline", "get_rectangle_points", "create_rectangle", "create_rectangle_filled_with_colors", "create_rectangles_filled_with_colors", "create_triangles_filled_with_colors", "create_triangles_strip_filled_with_colors", "create_ellipse_filled", "create_ellipse_outline", "create_ellipse", "create_ellipse_filled_with_colors", "ShapeElementList"]
@copy_dunders_unimplemented
class Shape:
    """
    A container for arbitrary geometry representing a shape.

    This shape can be drawn using the draw() method, or added to a
    ShapeElementList for drawing in batch.

    :param points: A list of points that make up the shape.
    :param colors: A list of colors that correspond to the points.
    :param mode: The OpenGL drawing mode. Defaults to GL_TRIANGLES.
    :param program: The program to use when drawing this shape (Shape.draw() only)
    """
    def __init__(self, points: PointList, colors: Sequence[RGBA255], mode: int = ..., program: Optional[Program] = ...) -> None:
        ...
    
    def draw(self): # -> None:
        """
        Draw this shape. Drawing this way isn't as fast as drawing multiple
        shapes batched together in a ShapeElementList.
        """
        ...
    


def create_line(start_x: float, start_y: float, end_x: float, end_y: float, color: RGBA255, line_width: float = ...) -> Shape:
    """
    Create a Shape object for a line.

    :param start_x: Starting x position
    :param start_y: Starting y position
    :param end_x: Ending x position
    :param end_y: Ending y position
    :param color: Color of the line
    :param line_width: Width of the line
    """
    ...

def create_line_generic_with_colors(point_list: PointList, color_sequence: Sequence[RGBA255], shape_mode: int) -> Shape:
    """
    This function is used by ``create_line_strip`` and ``create_line_loop``,
    just changing the OpenGL type for the line drawing.

    :param point_list: A list of points that make up the shape.
    :param color_sequence: A sequence of colors such
        as a :py:class:`list`; each color must be either a
        :py:class:`~arcade.types.Color` instance or a 4-length RGBA
        :py:class:`tuple`.
    :param shape_mode: The OpenGL drawing mode. Defaults to GL_TRIANGLES.
    """
    ...

def create_line_generic(point_list: PointList, color: RGBA255, shape_mode: int) -> Shape:
    """
    This function is used by ``create_line_strip`` and ``create_line_loop``,
    just changing the OpenGL type for the line drawing.

    :param point_list: A list of points that make up the shape.
    :param color: A color such as a :py:class:`~arcade.types.Color`
    :param shape_mode: The OpenGL drawing mode. Defaults to GL_TRIANGLES.
    """
    ...

def create_line_strip(point_list: PointList, color: RGBA255, line_width: float = ...) -> Shape:
    """
    Create a multi-point line to be rendered later. This works faster than draw_line because
    the vertexes are only loaded to the graphics card once, rather than each frame.

    Internally, thick lines are created by two triangles.

    :param point_list:
    :param color:
    :param line_width:
    """
    ...

def create_line_loop(point_list: PointList, color: RGBA255, line_width: float = ...) -> Shape:
    """
    Create a multi-point line loop to be rendered later. This works faster than draw_line because
    the vertexes are only loaded to the graphics card once, rather than each frame.

    :param point_list: A list of points that make up the shape.
    :param color: A color such as a :py:class:`~arcade.types.Color`
    :param line_width: Width of the line
    """
    ...

def create_lines(point_list: PointList, color: RGBA255) -> Shape:
    """
    Create a multi-point line loop to be rendered later. This works faster than draw_line because
    the vertexes are only loaded to the graphics card once, rather than each frame.

    :param point_list: A list of points that make up the shape.
    :param color: A color such as a :py:class:`~arcade.types.Color`
    :param line_width: Width of the line
    """
    ...

def create_lines_with_colors(point_list: PointList, color_list: Sequence[RGBA255], line_width: float = ...) -> Shape:
    """
    Create a line segments to be rendered later. This works faster than draw_line because
    the vertexes are only loaded to the graphics card once, rather than each frame.

    :param point_list: Line segments start and end point tuples list
    :param color_list: Three or four byte tuples list for every point
    :param line_width: Width of the line

    :Returns Shape:
    """
    ...

def create_polygon(point_list: PointList, color: RGBA255) -> Shape:
    """
    Draw a convex polygon. This will NOT draw a concave polygon.
    Because of this, you might not want to use this function.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param point_list: A list of points that make up the shape.
    :param color: A color such as a :py:class:`~arcade.types.Color`
    """
    ...

def create_rectangle_filled(center_x: float, center_y: float, width: float, height: float, color: RGBA255, tilt_angle: float = ...) -> Shape:
    """
    Create a filled rectangle.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param center_x: X position of the center of the rectangle
    :param center_y: Y position of the center of the rectangle
    :param width: Width of the rectangle
    :param height: Height of the rectangle
    :param color: A color such as a :py:class:`~arcade.types.Color`
    :param tilt_angle: Angle to tilt the rectangle in degrees
    """
    ...

def create_rectangle_outline(center_x: float, center_y: float, width: float, height: float, color: RGBA255, border_width: float = ..., tilt_angle: float = ...) -> Shape:
    """
    Create a rectangle outline.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param center_x: X position of the center of the rectangle
    :param center_y: Y position of the center of the rectangle
    :param width: Width of the rectangle
    :param height: Height of the rectangle
    :param color: A color such as a :py:class:`~arcade.types.Color`
    :param border_width: Width of the border
    :param tilt_angle: Angle to tilt the rectangle in degrees
    """
    ...

def get_rectangle_points(center_x: float, center_y: float, width: float, height: float, tilt_angle: float = ...) -> PointList:
    """
    Utility function that will return all four coordinate points of a
    rectangle given the x, y center, width, height, and rotation.

    :param center_x: X position of the center of the rectangle
    :param center_y: Y position of the center of the rectangle
    :param width: Width of the rectangle
    :param height: Height of the rectangle
    :param tilt_angle: Angle to tilt the rectangle in degrees
    """
    ...

def create_rectangle(center_x: float, center_y: float, width: float, height: float, color: RGBA255, border_width: float = ..., tilt_angle: float = ..., filled=...) -> Shape:
    """
    This function creates a rectangle using a vertex buffer object.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param center_x: X position of the center of the rectangle
    :param center_y: Y position of the center of the rectangle
    :param width: Width of the rectangle
    :param height: Height of the rectangle
    :param color: A color such as a :py:class:`~arcade.types.Color`
    :param border_width: Width of the border
    :param tilt_angle: Angle to tilt the rectangle in degrees
    :param filled: If True, the rectangle is filled. If False, it is an outline.
    """
    ...

def create_rectangle_filled_with_colors(point_list, color_list) -> Shape:
    """
    This function creates one rectangle/quad using a vertex buffer object.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param point_list: List of points to create the rectangle from
    :param color_list: List of colors to create the rectangle from
    """
    ...

def create_rectangles_filled_with_colors(point_list, color_list: Sequence[RGBA255]) -> Shape:
    """
    This function creates multiple rectangle/quads using a vertex buffer object.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.
    """
    ...

def create_triangles_filled_with_colors(point_list: PointList, color_sequence: Sequence[RGBA255]) -> Shape:
    """
    This function creates multiple triangles using a vertex buffer object.
    Triangles are build for every 3 sequential vertices with step of 3 vertex
    Total amount of triangles to be rendered: len(point_list) / 3

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param point_list: Triangles vertices tuples.
    :param color_sequence: A sequence of colors such
        as a :py:class:`list`; each color must be either a
        :py:class:`~arcade.types.Color` instance or a 4-length RGBA
        :py:class:`tuple`.
    """
    ...

def create_triangles_strip_filled_with_colors(point_list, color_sequence: Sequence[RGBA255]) -> Shape:
    """
    This function creates multiple triangles using a vertex buffer object.
    Triangles are built for every 3 sequential vertices with step of 1 vertex
    Total amount of triangles to be rendered: len(point_list) - 2

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param point_list: Triangles vertices tuples.
    :param color_sequence: A sequence of colors such
        as a :py:class:`list`; each color must be either a
        :py:class:`~arcade.types.Color` instance or a 4-length RGBA
        :py:class:`tuple`.
    """
    ...

def create_ellipse_filled(center_x: float, center_y: float, width: float, height: float, color: RGBA255, tilt_angle: float = ..., num_segments: int = ...) -> Shape:
    """
    Create a filled ellipse. Or circle if you use the same width and height.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.
    """
    ...

def create_ellipse_outline(center_x: float, center_y: float, width: float, height: float, color: RGBA255, border_width: float = ..., tilt_angle: float = ..., num_segments: int = ...) -> Shape:
    """
    Create an outline of an ellipse.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.
    """
    ...

def create_ellipse(center_x: float, center_y: float, width: float, height: float, color: RGBA255, border_width: float = ..., tilt_angle: float = ..., num_segments: int = ..., filled: bool = ...) -> Shape:
    """
    This creates an ellipse vertex buffer object (VBO).

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param center_x: X position of the center of the ellipse.
    :param center_y: Y position of the center of the ellipse.
    :param width: Width of the ellipse.
    :param height: Height of the ellipse.
    :param color: Color of the ellipse.
    :param border_width: Width of the border.
    :param tilt_angle: Angle to tilt the ellipse.
    :param num_segments: Number of segments to use to draw the ellipse.
    :param filled: If True, create a filled ellipse. If False, create an outline.
    """
    ...

def create_ellipse_filled_with_colors(center_x: float, center_y: float, width: float, height: float, outside_color: RGBA255, inside_color: RGBA255, tilt_angle: float = ..., num_segments: int = ...) -> Shape:
    """
    Draw an ellipse, and specify inside/outside color. Used for doing gradients.

    The function returns a Shape object that can be drawn with ``my_shape.draw()``.
    Don't create the shape in the draw method, create it in the setup method and then
    draw it in ``on_draw``.

    For even faster performance, add multiple shapes into a ShapeElementList and
    draw that list. This allows nearly unlimited shapes to be drawn just as fast
    as one.

    :param center_x: X position of the center of the ellipse.
    :param center_y:  Y position of the center of the ellipse.
    :param width: Width of the ellipse.
    :param height: Height of the ellipse.
    :param outside_color: Color of the outside of the ellipse.
    :param inside_color: Color of the inside of the ellipse.
    :param tilt_angle: Angle to tilt the ellipse.
    :param num_segments: Number of segments to use to draw the ellipse.
    """
    ...

TShape = TypeVar('TShape', bound=Shape)
@copy_dunders_unimplemented
class ShapeElementList(Generic[TShape]):
    """
    A ShapeElementList is a list of shapes that can be drawn together
    in a back for better performance. ShapeElementLists are suited for
    drawing a large number of shapes that are static. If you need to
    move a lot of shapes it's better to use pyglet's shape system.

    Adding new shapes is fast, but removing them is slow.
    """
    def __init__(self) -> None:
        ...
    
    def append(self, item: TShape): # -> None:
        """
        Add a new shape to the list.
        """
        ...
    
    def remove(self, item: TShape): # -> None:
        """
        Remove a specific shape from the list.
        """
        ...
    
    def update(self) -> None:
        """
        Update the internals of the shape list.
        This is automatically called when you call draw().

        In some instances you may need to call this manually to
        update the shape list before drawing.
        """
        ...
    
    def draw(self) -> None:
        """
        Draw all the shapes.
        """
        ...
    
    def clear(self, position: bool = ..., angle: bool = ...) -> None:
        """
        Clear all the contents from the shape list.

        :param position: Reset the position to 0,0
        :param angle: Reset the angle to 0
        """
        ...
    
    def move(self, change_x: float, change_y: float): # -> None:
        """
        Change the center_x/y of the shape list relative to the current position.

        :param change_x: Amount to move on the x axis
        :param change_y: Amount to move on the y axis
        """
        ...
    
    @property
    def position(self) -> Tuple[float, float]:
        """
        Get or set the position of the ShapeElementList.

        This is the equivalent of setting center_x and center_y
        """
        ...
    
    @position.setter
    def position(self, value: Tuple[float, float]): # -> None:
        ...
    
    @property
    def center_x(self) -> float:
        """Get or set the center x coordinate of the ShapeElementList."""
        ...
    
    @center_x.setter
    def center_x(self, value: float): # -> None:
        ...
    
    @property
    def center_y(self) -> float:
        """Get or set the center y coordinate of the ShapeElementList."""
        ...
    
    @center_y.setter
    def center_y(self, value: float): # -> None:
        ...
    
    @property
    def angle(self) -> float:
        """Get or set the rotation in degrees (clockwise)"""
        ...
    
    @angle.setter
    def angle(self, value: float): # -> None:
        ...
    
    def __len__(self) -> int:
        """ Return the length of the sprite list. """
        ...
    
    def __iter__(self) -> Iterable[TShape]:
        """ Return an iterable object of sprites. """
        ...
    
    def __getitem__(self, i):
        ...
    


class _Batch(Generic[TShape]):
    """
    A collection of shapes with the same configuration.

    The group uniqueness is based on the primitive mode
    """
    ADD = ...
    REMOVE = ...
    VERTEX_SIZE = ...
    RESET_IDX = ...
    def __init__(self, ctx: ArcadeContext, program: Program, mode: int) -> None:
        ...
    
    def draw(self): # -> None:
        """Draw the batch."""
        ...
    
    def append(self, item: TShape): # -> None:
        ...
    
    def remove(self, item: TShape): # -> None:
        ...
    
    def update(self): # -> None:
        """Update the internals of the batch."""
        ...
    


