"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from PIL.Image import Image
from pymunk.autogeometry import PolylineSet
from pymunk import Vec2d
from arcade.types import Point2List
from .base import HitBoxAlgorithm

class PymunkHitBoxAlgorithm(HitBoxAlgorithm):
    """
    Hit box point algorithm that uses pymunk to calculate the points.

    This is a more accurate algorithm generating more points. The
    point count can be controlled with the ``detail`` parameter.
    """
    default_detail = ...
    def __init__(self, *, detail: Optional[float] = ...) -> None:
        ...
    
    def __call__(self, *, detail: Optional[float] = ...) -> PymunkHitBoxAlgorithm:
        """Create a new instance with new default values"""
        ...
    
    def calculate(self, image: Image, detail: Optional[float] = ..., **kwargs) -> Point2List:
        """
        Given an RGBA image, this returns points that make up a hit box around it.

        :param image: Image get hit box from.
        :param detail: How detailed to make the hit box. There's a
                           trade-off in number of points vs. accuracy.

        :Returns: List of points
        """
        ...
    
    def to_points_list(self, image: Image, line_set: List[Vec2d]) -> Point2List:
        """
        Convert a line set to a list of points.

        Coordinates are offset so ``(0,0)`` is the center of the image.

        :param image: Image to trace.
        :param line_set: Line set to convert.
        """
        ...
    
    def trace_image(self, image: Image) -> PolylineSet:
        """
        Trace the image and return a list of line sets.

        These line sets represent the outline of the image or the outline of the
        holes in the image. If more than one line set is returned it's important
        to pick the one that covers the most of the image.

        :param image: Image to trace.
        :return: Line sets
        """
        ...
    
    def select_largest_line_set(self, line_sets: PolylineSet) -> List[Vec2d]:
        """
        Given a list of line sets, return the one that covers the most of the image.

        :param line_sets: List of line sets.
        :return: List of points that make up the line set.
        """
        ...
    


