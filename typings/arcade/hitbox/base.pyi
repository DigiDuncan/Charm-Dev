"""
This type stub file was generated by pyright.
"""

from typing import Any, Tuple
from typing_extensions import Self
from PIL.Image import Image
from arcade.types import Point2, Point2List

__all__ = ["HitBoxAlgorithm", "HitBox", "RotatableHitBox"]
class HitBoxAlgorithm:
    """
    The base class for hit box algorithms.

    Hit box algorithms are intended to calculate the points which make up
    a hit box for a given :py:class:`~PIL.Image.Image`. However, advanced
    users can also repurpose them for other tasks.
    """
    cache = ...
    def __init__(self) -> None:
        ...
    
    @property
    def cache_name(self) -> str:
        """
        A string representation of the parameters used to create this algorithm.

        It will be incorporated at the end of the string returned by
        :py:meth:`Texture.create_cache_name <arcade.Texture.create_cache_name>`.
        Subclasses should override this method to return a value which allows
        distinguishing different configurations of a particular hit box
        algorithm.
        """
        ...
    
    def calculate(self, image: Image, **kwargs) -> Point2List:
        """
        Calculate hit box points for a given image.

        .. warning:: This method should not be made into a class method!

                     Although this base class does not take arguments
                     when initialized, subclasses use them to alter how
                     a specific instance handles image data by default.

        :param image: The image to calculate hitbox points for
        :param kwargs: keyword arguments
        :return: A list of hit box points.
        """
        ...
    
    def __call__(self, *args: Any, **kwds: Any) -> Self:
        """
        Shorthand allowing any instance to be used identically to the base type.

        :param args: The same positional arguments as `__init__`
        :param kwds: The same keyword arguments as `__init__`
        :return: A new HitBoxAlgorithm instance
        """
        ...
    
    def create_bounding_box(self, image: Image) -> Point2List:
        """
        Create points for a simple bounding box around an image.
        This is often used as a fallback if a hit box algorithm
        doesn't manage to figure out any reasonable points for
        an image.

        :param Image image: The image to create a bounding box for.
        :return: A tuple of hit box points.
        """
        ...
    


class HitBox:
    """
    A basic hit box class supporting scaling.

    It includes support for rescaling as well as shorthand properties
    for boundary values along the X and Y axes. For rotation support,
    use :py:meth:`.create_rotatable` to create an instance of
    :py:class:`RotatableHitBox`.

    :param points: The unmodified points bounding the hit box
    :param position: The center around which the points will be offset
    :param scale: The X and Y scaling factors to use when offsetting the
        points
    """
    def __init__(self, points: Point2List, position: Point2 = ..., scale: Tuple[float, float] = ...) -> None:
        ...
    
    @property
    def points(self) -> Point2List:
        """
        The raw, unadjusted points of this hit box.

        These are the points as originally passed before offsetting, scaling,
        and any operations subclasses may perform, such as rotation.
        """
        ...
    
    @property
    def position(self) -> Point2:
        """
        The center point used to offset the final adjusted positions.
        :return:
        """
        ...
    
    @position.setter
    def position(self, position: Point2): # -> None:
        ...
    
    @property
    def left(self) -> float:
        """
        Calculates the leftmost adjusted x position of this hit box
        """
        ...
    
    @property
    def right(self) -> float:
        """
        Calculates the rightmost adjusted x position of this hit box
        """
        ...
    
    @property
    def top(self) -> float:
        """
        Calculates the topmost adjusted y position of this hit box
        """
        ...
    
    @property
    def bottom(self) -> float:
        """
        Calculates the bottommost adjusted y position of this hit box
        """
        ...
    
    @property
    def scale(self) -> Tuple[float, float]:
        """
        The X & Y scaling factors for the points in this hit box.

        These are used to calculate the final adjusted positions of points.
        """
        ...
    
    @scale.setter
    def scale(self, scale: Tuple[float, float]): # -> None:
        ...
    
    def create_rotatable(self, angle: float = ...) -> RotatableHitBox:
        """
        Create a rotatable instance of this hit box.

        The internal ``PointList`` is transferred directly instead of
        deepcopied, so care should be taken if using a mutable internal
        representation.

        :param angle: The angle to rotate points by (0 by default)
        :return:
        """
        ...
    
    def get_adjusted_points(self) -> Point2List:
        """
        Return the positions of points, scaled and offset from the center.

        Unlike the boundary helper properties (left, etc), this method will
        only recalculate the values when necessary:

        * The first time this method is called
        * After properties affecting adjusted position were changed
        """
        ...
    


class RotatableHitBox(HitBox):
    """
    A hit box with support for rotation.

    Rotation is separated from the basic hitbox because it is much
    slower than offsetting and scaling.
    """
    def __init__(self, points: Point2List, *, position: Tuple[float, float] = ..., angle: float = ..., scale: Tuple[float, float] = ...) -> None:
        ...
    
    @property
    def angle(self) -> float:
        """
        The angle to rotate the raw points by in degrees
        """
        ...
    
    @angle.setter
    def angle(self, angle: float): # -> None:
        ...
    
    def get_adjusted_points(self) -> Point2List:
        """
        Return the offset, scaled, & rotated points of this hitbox.

        As with :py:meth:`.HitBox.get_adjusted_points`, this method only
        recalculates the adjusted values when necessary.
        :return:
        """
        ...
    


