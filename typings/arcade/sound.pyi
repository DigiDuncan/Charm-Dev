"""
This type stub file was generated by pyright.
"""

import os
import pyglet.media as media
from pathlib import Path
from typing import Optional, Union

"""
Sound Library.
"""
if os.environ.get("ARCADE_SOUND_BACKENDS"):
    ...
else:
    ...
__all__ = ["Sound", "load_sound", "play_sound", "stop_sound"]
class Sound:
    """This class represents a sound you can play."""
    def __init__(self, file_name: Union[str, Path], streaming: bool = ...) -> None:
        ...
    
    def play(self, volume: float = ..., pan: float = ..., loop: bool = ..., speed: float = ...) -> media.Player:
        """
        Play the sound.

        :param volume: Volume, from 0=quiet to 1=loud
        :param pan: Pan, from -1=left to 0=centered to 1=right
        :param loop: Loop, false to play once, true to loop continuously
        :param speed: Change the speed of the sound which also changes pitch, default 1.0
        """
        ...
    
    def stop(self, player: media.Player) -> None:
        """
        Stop a currently playing sound.
        """
        ...
    
    def get_length(self) -> float:
        """Get length of audio in seconds"""
        ...
    
    def is_complete(self, player: media.Player) -> bool:
        """Return true if the sound is done playing."""
        ...
    
    def is_playing(self, player: media.Player) -> bool:
        """
        Return if the sound is currently playing or not

        :param player: Player returned from :func:`play_sound`.
        :returns: A boolean, ``True`` if the sound is playing.

        """
        ...
    
    def get_volume(self, player: media.Player) -> float:
        """
        Get the current volume.

        :param player: Player returned from :func:`play_sound`.
        :returns: A float, 0 for volume off, 1 for full volume.
        """
        ...
    
    def set_volume(self, volume, player: media.Player) -> None:
        """
        Set the volume of a sound as it is playing.

        :param volume: Floating point volume. 0 is silent, 1 is full.
        :param player: Player returned from :func:`play_sound`.
        """
        ...
    
    def get_stream_position(self, player: media.Player) -> float:
        """
        Return where we are in the stream. This will reset back to
        zero when it is done playing.

        :param player: Player returned from :func:`play_sound`.

        """
        ...
    


def load_sound(path: Union[str, Path], streaming: bool = ...) -> Optional[Sound]:
    """
    Load a sound.

    :param path: Name of the sound file to load.
    :param streaming: Boolean for determining if we stream the sound
                           or load it all into memory. Set to ``True`` for long sounds to save
                           memory, ``False`` for short sounds to speed playback.
    :returns: Sound object which can be used by the  :func:`play_sound` function.
    """
    ...

def play_sound(sound: Sound, volume: float = ..., pan: float = ..., loop: bool = ..., speed: float = ...) -> Optional[media.Player]:
    """
    Play a sound.

    :param sound: Sound loaded by :func:`load_sound`. Do NOT use a string here for the filename.
    :param volume: Volume, from 0=quiet to 1=loud
    :param pan: Pan, from -1=left to 0=centered to 1=right
    :param loop: Should we loop the sound over and over?
    :param speed: Change the speed of the sound which also changes pitch, default 1.0
    """
    ...

def stop_sound(player: media.Player): # -> None:
    """
    Stop a sound that is currently playing.

    :param player: Player returned from :func:`play_sound`.
    """
    ...

