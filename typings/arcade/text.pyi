"""
This type stub file was generated by pyright.
"""

import pyglet
import arcade
from pathlib import Path
from typing import Any, Optional, Tuple, Union
from arcade.types import Color, Point, RGBA255, RGBOrA255
from arcade.utils import PerformanceWarning, warning

"""
Drawing text with pyglet label
"""
__all__ = ["load_font", "Text", "create_text_sprite", "draw_text"]
def load_font(path: Union[str, Path]) -> None:
    """
    Load fonts in a file (usually .ttf) adding them to a global font registry.

    A file can contain one or multiple fonts. Each font has a name.
    Open the font file to find the actual name(s). These names
    are used to select font when drawing text.

    Examples::

        # Load a font in the current working directory
        # (absolute path is often better)
        arcade.load_font("Custom.ttf")
        # Load a font using a custom resource handle
        arcade.load_font(":font:Custom.ttf")

    :param path: A string, or an array of paths with fonts.
    :raises FileNotFoundError: if the font specified wasn't found
    :return:
    """
    ...

FontNameOrNames = Union[str, Tuple[str, ...]]
class Text:
    """
    An object-oriented way to draw text to the screen.

    .. tip:: Use this class when performance matters!

       Unlike :py:func:`~arcade.draw_text`, this class does not risk
       wasting time recalculating and re-setting any text each time
       :py:meth:`~arcade.Text.draw` is called. This makes it faster
       while:

       - requiring you to manage instances and drawing yourself
       - using negligible extra RAM

       The speed advantage scales as more text needs to be drawn
       to the screen.

    The constructor arguments work identically to those of
    :py:func:`~arcade.draw_text`. See its documentation for in-depth
    explanation for how to use each of them. For example code, see :ref:`drawing_text_objects`.

    :param text: Initial text to display. Can be an empty string
    :param x: x position to align the text's anchor point with
    :param y: y position to align the text's anchor point with
    :param z: z position to align the text's anchor point with
    :param color: Color of the text as an RGBA tuple or a
        :py:class:`~arcade.types.Color` instance.
    :param font_size: Size of the text in points
    :param width: A width limit in pixels
    :param align: Horizontal alignment; values other than "left" require width to be set
    :param Union[str, Tuple[str, ...]] font_name: A font name, path to a font file, or list of names
    :param bold: Whether to draw the text as bold
    :param italic: Whether to draw the text as italic
    :param anchor_x: How to calculate the anchor point's x coordinate.
                         Options: "left", "center", or "right"
    :param anchor_y: How to calculate the anchor point's y coordinate.
                         Options: "top", "bottom", "center", or "baseline".
    :param multiline: Requires width to be set; enables word wrap rather than clipping
    :param rotation: rotation in degrees, counter-clockwise from horizontal

    All constructor arguments other than ``text`` have a corresponding
    property. To access the current text, use the ``value`` property
    instead.

    By default, the text is placed so that:

    - the left edge of its bounding box is at ``x``
    - its baseline is at ``y``

    The baseline is located along the line the bottom of the text would
    be written on, excluding letters with tails such as y:

        .. figure:: ../images/text_anchor_y.png
           :width: 40%

           The blue line is the baseline for the string ``"Python"``

    ``rotation`` allows for the text to be rotated around the anchor
    point by the passed number of degrees. Positive values rotate
    counter-clockwise from horizontal, while negative values rotate
    clockwise:

        .. figure:: ../images/text_rotation_degrees.png
           :width: 55%

           Rotation around the default anchor (
           ``anchor_y="baseline"`` and ``anchor_x="left"``)

    """
    def __init__(self, text: str, x: int, y: int, color: RGBOrA255 = ..., font_size: float = ..., width: Optional[int] = ..., align: str = ..., font_name: FontNameOrNames = ..., bold: bool = ..., italic: bool = ..., anchor_x: str = ..., anchor_y: str = ..., multiline: bool = ..., rotation: float = ..., batch: Optional[pyglet.graphics.Batch] = ..., group: Optional[pyglet.graphics.Group] = ..., z: int = ...) -> None:
        ...
    
    def __enter__(self): # -> None:
        """
        Update multiple attributes of this text,
        using efficient update mechanism of the underlying ``pyglet.Label``
        """
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb): # -> None:
        ...
    
    @property
    def batch(self) -> pyglet.graphics.Batch:
        ...
    
    @batch.setter
    def batch(self, batch: pyglet.graphics.Batch): # -> None:
        ...
    
    @property
    def group(self) -> Optional[pyglet.graphics.Group]:
        ...
    
    @group.setter
    def group(self, group: pyglet.graphics.Group): # -> None:
        ...
    
    @property
    def value(self) -> str:
        """
        Get or set the current text string to display.

        The value assigned will be converted to a string.
        """
        ...
    
    @value.setter
    def value(self, value: Any): # -> None:
        ...
    
    @property
    def text(self) -> str:
        """
        Get or set the current text string to display.

        The value assigned will be converted to a string.

        This is an alias for :py:attr:`~arcade.Text.value`
        """
        ...
    
    @text.setter
    def text(self, value: Any): # -> None:
        ...
    
    @property
    def x(self) -> float:
        """
        Get or set the x position of the label
        """
        ...
    
    @x.setter
    def x(self, x: float) -> None:
        ...
    
    @property
    def y(self) -> float:
        """
        Get or set the y position of the label
        """
        ...
    
    @y.setter
    def y(self, y: float): # -> None:
        ...
    
    @property
    def z(self) -> float:
        """
        Get or set the z position of the label
        """
        ...
    
    @z.setter
    def z(self, z: float): # -> None:
        ...
    
    @property
    def font_name(self) -> FontNameOrNames:
        """
        Get or set the font name(s) for the label
        """
        ...
    
    @font_name.setter
    def font_name(self, font_name: FontNameOrNames) -> None:
        ...
    
    @property
    def font_size(self) -> float:
        """
        Get or set the font size of the label
        """
        ...
    
    @font_size.setter
    def font_size(self, font_size: float): # -> None:
        ...
    
    @property
    def anchor_x(self) -> str:
        """
        Get or set the horizontal anchor.

        Options: "left", "center", or "right"
        """
        ...
    
    @anchor_x.setter
    def anchor_x(self, anchor_x: str): # -> None:
        ...
    
    @property
    def anchor_y(self) -> str:
        """
        Get or set the vertical anchor.

        Options : "top", "bottom", "center", or "baseline"
        """
        ...
    
    @anchor_y.setter
    def anchor_y(self, anchor_y: str): # -> None:
        ...
    
    @property
    def rotation(self) -> float:
        ...
    
    @rotation.setter
    def rotation(self, rotation: float): # -> None:
        ...
    
    @property
    def color(self) -> Color:
        """
        Get or set the text color for the label
        """
        ...
    
    @color.setter
    def color(self, color: RGBA255): # -> None:
        ...
    
    @property
    def width(self) -> Optional[int]:
        """
        Get or set the width of the label in pixels.
        This value affects text flow when multiline text is used.
        If you are looking for the physical size if the text, see
        :py:attr:`~arcade.Text.content_width`
        """
        ...
    
    @width.setter
    def width(self, width: int): # -> None:
        ...
    
    @property
    def height(self) -> Optional[int]:
        """
        Get or set the height of the label in pixels
        This value affects text flow when multiline text is used.
        If you are looking for the physical size if the text, see
        :py:attr:`~arcade.Text.content_height`
        """
        ...
    
    @height.setter
    def height(self, value): # -> None:
        ...
    
    @property
    def size(self): # -> tuple[int | None, int | None]:
        """
        Get the size of the label
        """
        ...
    
    @property
    def content_width(self) -> int:
        """
        Get the pixel width of the text contents
        """
        ...
    
    @property
    def content_height(self) -> int:
        """
        Get the pixel height of the text content.
        """
        ...
    
    @property
    def left(self) -> float:
        """
        Pixel location of the left content border.
        """
        ...
    
    @property
    def right(self) -> float:
        """
        Pixel location of the right content border.
        """
        ...
    
    @property
    def top(self) -> float:
        """
        Pixel location of the top content border.
        """
        ...
    
    @property
    def bottom(self) -> float:
        """
        Pixel location of the bottom content border.
        """
        ...
    
    @property
    def content_size(self) -> Tuple[int, int]:
        """
        Get the pixel width and height of the text contents.
        """
        ...
    
    @property
    def align(self) -> str:
        ...
    
    @align.setter
    def align(self, align: str): # -> None:
        ...
    
    @property
    def bold(self) -> bool:
        """
        Get or set bold state of the label
        """
        ...
    
    @bold.setter
    def bold(self, bold: bool): # -> None:
        ...
    
    @property
    def italic(self) -> bool:
        """
        Get or set the italic state of the label
        """
        ...
    
    @italic.setter
    def italic(self, italic: bool): # -> None:
        ...
    
    @property
    def multiline(self) -> bool:
        """
        Get or set the multiline flag of the label.
        """
        ...
    
    @multiline.setter
    def multiline(self, multiline: bool): # -> None:
        ...
    
    def draw(self) -> None:
        """
        Draw the label to the screen at its current ``x`` and ``y`` position.

        .. warning: Cameras affect text drawing!
            If you want to draw a custom GUI that doesn't move with the
            game world, you will need a second :py:class:`~arcade.Camera`
            instance. For information on how to do this, see
            :ref:`sprite_move_scrolling`.

        """
        ...
    
    def draw_debug(self, anchor_color: RGBA255 = ..., background_color: RGBA255 = ..., outline_color: RGBA255 = ...) -> None:
        """
        Draw test with debug geometry showing the content
        area, outline and the anchor point.

        :param anchor_color: Color of the anchor point
        :param background_color: Color the content background
        :param outline_color: Color of the content outline
        """
        ...
    
    @property
    def position(self) -> Point:
        """
        The current x, y position as a tuple.

        This is faster than setting x and y position separately
        because the underlying geometry only needs to change position once.
        """
        ...
    
    @position.setter
    def position(self, point: Point): # -> None:
        ...
    


def create_text_sprite(text: str, color: RGBA255 = ..., font_size: float = ..., width: Optional[int] = ..., align: str = ..., font_name: FontNameOrNames = ..., bold: bool = ..., italic: bool = ..., anchor_x: str = ..., multiline: bool = ..., texture_atlas: Optional[arcade.TextureAtlas] = ..., background_color: Optional[RGBA255] = ...) -> arcade.Sprite:
    """
    Creates a sprite containing text based off of :py:class:`~arcade.Text`.

    Internally this creates a Text object and an empty texture. It then uses either the
    provided texture atlas, or gets the default one, and draws the Text object into the
    texture atlas.

    It then creates a sprite referencing the newly created texture, and positions it
    accordingly, and that is final result that is returned from the function.

    If you are providing a custom texture atlas, something important to keep in mind is
    that the resulting Sprite can only be added to SpriteLists which use that atlas. If
    it is added to a SpriteList which uses a different atlas, you will likely just see
    a black box drawn in its place.

    :param text: Initial text to display. Can be an empty string
    :param color: Color of the text as a tuple or list of 3 (RGB) or 4 (RGBA) integers
    :param font_size: Size of the text in points
    :param width: A width limit in pixels
    :param align: Horizontal alignment; values other than "left" require width to be set
    :param font_name: A font name, path to a font file, or list of names
    :param bold: Whether to draw the text as bold
    :param italic: Whether to draw the text as italic
    :param anchor_x: How to calculate the anchor point's x coordinate.
                         Options: "left", "center", or "right"
    :param multiline: Requires width to be set; enables word wrap rather than clipping
    :param texture_atlas: The texture atlas to use for the
        newly created texture. The default global atlas will be used if this is None.
    :param background_color: The background color of the text. If None, the background
        will be transparent.
    """
    ...

@warning(message="draw_text is an extremely slow function for displaying text. Consider using Text objects instead.", warning_type=PerformanceWarning)
def draw_text(text: Any, x: int, y: int, color: RGBA255 = ..., font_size: float = ..., width: int = ..., align: str = ..., font_name: FontNameOrNames = ..., bold: bool = ..., italic: bool = ..., anchor_x: str = ..., anchor_y: str = ..., multiline: bool = ..., rotation: float = ..., z: int = ...): # -> None:
    """
    A simple way for beginners to draw text.

    .. warning:: Use :py:class:`arcade.Text` objects instead.

        This method of drawing text is very slow
        and might be removed in the near future.
        Text objects can be 10-100 times faster
        depending on the use case.

    .. warning:: Cameras affect text drawing!

        If you want to draw a custom GUI that doesn't move with the
        game world, you will need a second camera. For information on
        how to do this, see :ref:`sprite_move_scrolling`.

    This function lets you start draw text easily with better
    performance than the old pillow-based text. If you need even higher
    performance, consider using :py:class:`~arcade.Text`.

    Example code can be found at :ref:`drawing_text`.

    :param text: Text to display. The object passed in will be converted to a string
    :param x: x position to align the text's anchor point with
    :param y: y position to align the text's anchor point with
    :param z: z position to align the text's anchor point with
    :param color: Color of the text as an RGBA tuple or
        :py:class:`~arcade.types.Color` instance.
    :param font_size: Size of the text in points
    :param width: A width limit in pixels
    :param align: Horizontal alignment; values other than "left" require width to be set
    :param Union[str, Tuple[str, ...]] font_name: A font name, path to a font file, or list of names
    :param bold: Whether to draw the text as bold
    :param italic: Whether to draw the text as italic
    :param anchor_x: How to calculate the anchor point's x coordinate
    :param anchor_y: How to calculate the anchor point's y coordinate
    :param multiline: Requires width to be set; enables word wrap rather than clipping
    :param rotation: rotation in degrees, counter-clockwise from horizontal

    By default, the text is placed so that:

    - the left edge of its bounding box is at ``x``
    - its baseline is at ``y``

    The baseline of text is the line it would be written on:

        .. figure:: ../images/text_anchor_y.png
           :width: 40%

           The blue line is the baseline for the string ``"Python"``

    ``font_name`` can be any of the following:

    - a built-in font in the :ref:`Resources`
    - the name of a system font
    - a path to a font on the system
    - a `tuple` containing any mix of the previous three

    Each entry provided will be tried in order until one is found. If
    none of the fonts are found, a default font will be chosen (usually
    Arial).

    ``anchor_x`` and ``anchor_y`` specify how to calculate the anchor point,
    which affects how the text is:

    - Placed relative to ``x`` and ``y``
    - Rotated

    By default, the text is drawn so that ``x`` is at the left of
    the text's bounding box and ``y`` is at the baseline.

    You can set a custom anchor point by passing combinations of the
    following values for ``anchor_x`` and ``anchor_y``:

    .. list-table:: Values allowed by ``anchor_x``
        :widths: 20 40 40
        :header-rows: 1

        * - String value
          - Practical Effect
          - Anchor Position

        * - ``"left"`` `(default)`
          - Text drawn with its left side at ``x``
          - Anchor point on the left side of the text's bounding box

        * - ``"center"``
          - Text drawn horizontally centered on ``x``
          - Anchor point at horizontal center of text's bounding box

        * - ``"right"``
          - Text drawn with its right side at ``x``
          - Anchor placed on the right side of the text's bounding box


    .. list-table:: Values allowed by ``anchor_y``
        :widths: 20 40 40
        :header-rows: 1

        * - String value
          - Practical Effect
          - Anchor Position

        * - ``"baseline"`` `(default)`
          - Text drawn with baseline on ``y``.
          - Anchor placed at the text rendering baseline

        * - ``"top"``
          - Text drawn with its top aligned with ``y``
          - Anchor point placed at the top of the text

        * - ``"bottom"``
          - Text drawn with its absolute bottom aligned with ``y``,
            including the space for tails on letters such as y and g
          - Anchor point placed at the bottom of the text after the
            space allotted for letters such as y and g

        * - ``"center"``
          - Text drawn with its vertical center on ``y``
          - Anchor placed at the vertical center of the text


    ``rotation`` allows for the text to be rotated around the anchor
    point by the passed number of degrees. Positive values rotate
    counter-clockwise from horizontal, while negative values rotate
    clockwise:

        .. figure:: ../images/text_rotation_degrees.png
           :width: 55%

           Rotation around the default anchor point (
           ``anchor_y="baseline"`` and ``anchor_x="left"``)


    It can be helpful to think of this function working as follows:

    1. Text layout and alignment are calculated:

        1. The text's characters are laid out within a bounding box
           according to the current styling options

        2. The anchor point on the text is calculated based on
           the text value, styling, as well as values for ``anchor_x``
           and ``anchor_y``

    2. The text is placed so its anchor point is at ``(x,
       y))``

    3. The text is rotated around its anchor point before finally
       being drawn

    This function is less efficient than using :py:class:`~arcade.Text`
    because some steps above can be repeated each time a call is
    made rather than fully cached as with the class.

    """
    ...

