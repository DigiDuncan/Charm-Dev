"""
This type stub file was generated by pyright.
"""

from .particle import Particle
from typing import Callable, Optional
from arcade.types import Point, Velocity

"""
Emitter - Invisible object that determines when Particles are emitted, actually emits them, and manages them
over their lifetime
"""
class EmitController:
    """Base class for how a client configure the rate at which an Emitter emits Particles

    Subclasses allow the client to control the rate and duration of emitting"""
    def how_many(self, delta_time: float, current_particle_count: int) -> int:
        ...
    
    def is_complete(self) -> bool:
        ...
    


class EmitBurst(EmitController):
    """Used to configure an Emitter to emit particles in one burst"""
    def __init__(self, count: int) -> None:
        ...
    
    def how_many(self, delta_time: float, current_particle_count: int) -> int:
        ...
    
    def is_complete(self) -> bool:
        ...
    


class EmitMaintainCount(EmitController):
    """Used to configure an Emitter so it emits particles so that the given count is always maintained"""
    def __init__(self, particle_count: int) -> None:
        ...
    
    def how_many(self, delta_time: float, current_particle_count: int) -> int:
        ...
    
    def is_complete(self) -> bool:
        ...
    


class EmitInterval(EmitController):
    """Base class used to configure an Emitter to have a constant rate of emitting. Will emit indefinitely."""
    def __init__(self, emit_interval: float) -> None:
        ...
    
    def how_many(self, delta_time: float, current_particle_count: int) -> int:
        ...
    
    def is_complete(self) -> bool:
        ...
    


class EmitterIntervalWithCount(EmitInterval):
    """Configure an Emitter to emit particles with given interval, ending after emitting given number of particles"""
    def __init__(self, emit_interval: float, particle_count: int) -> None:
        ...
    
    def how_many(self, delta_time: float, current_particle_count: int) -> int:
        ...
    
    def is_complete(self) -> bool:
        ...
    


class EmitterIntervalWithTime(EmitInterval):
    """Configure an Emitter to emit particles with given interval, ending after given number of seconds"""
    def __init__(self, emit_interval: float, lifetime: float) -> None:
        ...
    
    def how_many(self, delta_time: float, current_particle_count: int) -> int:
        ...
    
    def is_complete(self) -> bool:
        ...
    


class Emitter:
    """Emits and manages Particles over their lifetime.  The foundational class in a particle system."""
    def __init__(self, center_xy: Point, emit_controller: EmitController, particle_factory: Callable[[Emitter], Particle], change_xy: Velocity = ..., emit_done_cb: Optional[Callable[[Emitter], None]] = ..., reap_cb: Optional[Callable[[], None]] = ...) -> None:
        ...
    
    def get_count(self) -> int:
        ...
    
    def get_pos(self) -> Point:
        """Get position of emitter"""
        ...
    
    def update(self): # -> None:
        ...
    
    def draw(self): # -> None:
        ...
    
    def can_reap(self) -> bool:
        """Determine if Emitter can be deleted"""
        ...
    


