"""
This type stub file was generated by pyright.
"""

from typing import Literal, Optional, Tuple
from arcade.sprite import Sprite
from arcade.types import PathOrTexture, Point, Velocity

"""
Particle - Object produced by an Emitter.  Often used in large quantity to produce visual effects effects
"""
class Particle(Sprite):
    """Sprite that is emitted from an Emitter"""
    def __init__(self, path_or_texture: Optional[PathOrTexture], change_xy: Tuple[float, float], center_xy: Point = ..., angle: float = ..., change_angle: float = ..., scale: float = ..., alpha: int = ..., mutation_callback=...) -> None:
        ...
    
    def update(self): # -> None:
        """Advance the Particle's simulation"""
        ...
    
    def can_reap(self):
        """Determine if Particle can be deleted"""
        ...
    


class EternalParticle(Particle):
    """Particle that has no end to its life"""
    def __init__(self, filename_or_texture: PathOrTexture, change_xy: Velocity, center_xy: Point = ..., angle: float = ..., change_angle: float = ..., scale: float = ..., alpha: int = ..., mutation_callback=...) -> None:
        ...
    
    def can_reap(self) -> Literal[False]:
        """Determine if Particle can be deleted"""
        ...
    


class LifetimeParticle(Particle):
    """Particle that lives for a given amount of time and is then deleted"""
    def __init__(self, filename_or_texture: Optional[PathOrTexture], change_xy: Velocity, lifetime: float, center_xy: Point = ..., angle: float = ..., change_angle: float = ..., scale: float = ..., alpha: int = ..., mutation_callback=...) -> None:
        ...
    
    def update(self): # -> None:
        """Advance the Particle's simulation"""
        ...
    
    def can_reap(self) -> bool:
        """Determine if Particle can be deleted"""
        ...
    


class FadeParticle(LifetimeParticle):
    """Particle that animates its alpha between two values during its lifetime"""
    def __init__(self, filename_or_texture: PathOrTexture, change_xy: Velocity, lifetime: float, center_xy: Point = ..., angle: float = ..., change_angle: float = ..., scale: float = ..., start_alpha: int = ..., end_alpha: int = ..., mutation_callback=...) -> None:
        ...
    
    def update(self): # -> None:
        """Advance the Particle's simulation"""
        ...
    


