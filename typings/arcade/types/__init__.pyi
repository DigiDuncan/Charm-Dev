"""
This type stub file was generated by pyright.
"""

import sys
from __future__ import annotations
from pathlib import Path
from typing import NamedTuple, Optional, TYPE_CHECKING, Tuple, TypeVar, Union
from pytiled_parser import Properties
from collections.abc import Buffer as BufferProtocol
from arcade.types.numbers import AsFloat
from arcade.types.color import Color, RGB, RGB255, RGBA, RGBA255, RGBANormalized, RGBNormalized, RGBOrA, RGBOrA255, RGBOrANormalized
from arcade.types.vector_like import AnchorPoint, EMPTY_POINT_LIST, Point, Point2, Point2List, Point3, Point3List, PointList
from arcade.types.rect import LBWH, LRBT, Rect, RectKwargs, RectParams, Viewport, ViewportParams, XYRR, XYWH
from arcade.texture import Texture

"""Fundamental aliases, classes, and related constants.

As general rules:

#. Things only go in this module if they serve multiple purposes
   throughout arcade
#. Only expose the most important classes at this module's top level

For example, color-related types and related aliases go in
``arcade.types`` because they're used throughout the codebase. This
includes all the following areas:

#. :py:class:`~arcade.Sprite`
#. :py:class:`~arcade.SpriteList`
#. :py:class:`~arcade.Text`
#. The :py:mod:`arcade.gui` widgets
#. Functions in :py:mod:`arcade.drawing_commands`

However, since the color types, aliases, and constants are all related,
they go in the :py:mod:`arcade.types.color` submodule.
"""
if sys.version_info >= (3, 12):
    ...
else:
    ...
__all__ = ["AsFloat", "BufferProtocol", "Color", "IPoint", "PathOr", "PathOrTexture", "Point", "Point2", "Point3", "PointList", "Point2List", "Point3List", "EMPTY_POINT_LIST", "AnchorPoint", "Rect", "LRBT", "LBWH", "XYWH", "XYRR", "Viewport", "ViewportParams", "RectParams", "RectKwargs", "RGB", "RGBA", "RGBOrA", "RGB255", "RGBA255", "RGBOrA255", "RGBNormalized", "RGBANormalized", "RGBOrANormalized", "Size2D", "TiledObject", "Velocity"]
_T = TypeVar('_T')
Size2D = Tuple[_T, _T]
IPoint = Tuple[int, int]
Velocity = Tuple[AsFloat, AsFloat]
PathLike = Union[str, Path, bytes]
_POr = TypeVar('_POr')
PathOr = Union[PathLike, _POr]
if TYPE_CHECKING:
    ...
PathOrTexture = PathOr["Texture"]
class TiledObject(NamedTuple):
    shape: Union[Point, PointList, Tuple[int, int, int, int]]
    properties: Optional[Properties] = ...
    name: Optional[str] = ...
    type: Optional[str] = ...


