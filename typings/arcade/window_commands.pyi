"""
This type stub file was generated by pyright.
"""

from typing import Callable, Optional, TYPE_CHECKING, Tuple
from arcade.types import RGBA255
from arcade import Window

"""
This submodule has functions that control opening, closing, rendering, and otherwise managing windows.
It also has commands for scheduling pauses and scheduling interval functions.
"""
if TYPE_CHECKING:
    ...
_window: Optional[Window] = ...
__all__ = ["get_display_size", "get_window", "set_window", "close_window", "run", "exit", "start_render", "finish_render", "set_background_color", "schedule", "unschedule", "schedule_once"]
def get_display_size(screen_id: int = ...) -> Tuple[int, int]:
    """
    Return the width and height of a monitor.

    The size of the primary monitor is returned by default.

    :param screen_id: The screen number
    :return: Tuple containing the width and height of the screen
    """
    ...

def get_window() -> Window:
    """
    Return a handle to the current window.

    :return: Handle to the current window.
    """
    ...

def set_window(window: Optional[Window]) -> None:
    """
    Set a handle to the current window.

    :param window: Handle to the current window.
    """
    ...

def close_window() -> None:
    """
    Closes the current window, and then runs garbage collection. The garbage collection
    is necessary to prevent crashing when opening/closing windows rapidly (usually during
    unit tests).
    """
    ...

def run(): # -> None:
    """
    Run the main loop.
    After the window has been set up, and the event hooks are in place, this is usually one of the last
    commands on the main program. This is a blocking function starting pyglet's event loop
    meaning it will start to dispatch events such as ``on_draw`` and ``on_update``.
    """
    ...

def exit() -> None:
    """
    Exits the application.
    """
    ...

def start_render() -> None:
    """
    Clears the window.

    More practical alternatives to this function is
    :py:meth:`arcade.Window.clear`
    or :py:meth:`arcade.View.clear`.
    """
    ...

def finish_render(): # -> None:
    """
    Swap buffers and displays what has been drawn.

    .. Warning::

        If you are extending the :py:class:`~arcade.Window` class, this function
        should not be called. The event loop will automatically swap the window
        framebuffer for you after ``on_draw``.

    """
    ...

def set_background_color(color: RGBA255) -> None:
    """
    Set the color :py:meth:`arcade.Window.clear()` will use
    when clearing the window. This only needs to be called
    when the background color changes.

    .. Note::

        A shorter and faster way to set background color
        is using :py:attr:`arcade.Window.background_color`.

    Examples::

        # Use Arcade's built in color values
        arcade.set_background_color(arcade.color.AMAZON)

        # Specify RGB value directly (red)
        arcade.set_background_color((255, 0, 0))

    :param RGBA255: List of 3 or 4 values in RGB/RGBA format.
    """
    ...

def schedule(function_pointer: Callable, interval: float): # -> None:
    """
    Schedule a function to be automatically called every ``interval``
    seconds. The function/callable needs to take a delta time argument
    similar to ``on_update``. This is a float representing the number
    of seconds since it was scheduled or called.

    A function can be scheduled multiple times, but this is not recommended.

    .. Warning:: Scheduled functions should **always** be unscheduled
                 using :py:func:`arcade.unschedule`. Having lingering
                 scheduled functions will lead to crashes.

    Example::

        def some_action(delta_time):
            print(delta_time)

        # Call the function every second
        arcade.schedule(some_action, 1)
        # Unschedule

    :param function_pointer: Pointer to the function to be called.
    :param interval: Interval to call the function (float or integer)
    """
    ...

def unschedule(function_pointer: Callable): # -> None:
    """
    Unschedule a function being automatically called.

    Example::

        def some_action(delta_time):
            print(delta_time)

        arcade.schedule(some_action, 1)
        arcade.unschedule(some_action)

    :param function_pointer: Pointer to the function to be unscheduled.
    """
    ...

def schedule_once(function_pointer: Callable, delay: float): # -> None:
    """
    Schedule a function to be automatically called once after ``delay``
    seconds. The function/callable needs to take a delta time argument
    similar to ``on_update``. This is a float representing the number
    of seconds since it was scheduled or called.

    Example::

        def some_action(delta_time):
            print(delta_time)

        # Call the function once after 1 second
        arcade.schedule_one(some_action, 1)

    :param function_pointer: Pointer to the function to be called.
    :param delay: Delay in seconds
    """
    ...

