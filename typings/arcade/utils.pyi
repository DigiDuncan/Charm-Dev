"""
This type stub file was generated by pyright.
"""

from typing import Tuple, Type, TypeVar

"""
Various utility functions.

IMPORTANT:
These  should be standalone and not rely on any arcade imports
"""
_CT = TypeVar('_CT')
__all__ = ["OutsideRangeError", "IntOutsideRangeError", "FloatOutsideRangeError", "ByteRangeError", "NormalizedRangeError", "PerformanceWarning", "ReplacementWarning", "copy_dunders_unimplemented", "warning", "generate_uuid_from_kwargs", "is_raspberry_pi", "get_raspberry_pi_info"]
class OutsideRangeError(ValueError):
    """
    Raised when a value is outside and expected range

    This class and its subclasses are intended to be arcade-internal
    helpers to clearly signal exactly what went wrong. Each helps
    type annotate and template a string describing exactly what went
    wrong.

    :param var_name: the name of the variable or argument
    :param value: the value to fall outside the expected range
    :param lower: the lower bound, inclusive, of the range
    :param upper: the upper bound, inclusive, of the range
    """
    def __init__(self, var_name: str, value: _CT, lower: _CT, upper: _CT) -> None:
        ...
    


class IntOutsideRangeError(OutsideRangeError):
    """
    An integer was outside an expected range

    This class was originally intended to assist deserialization from
    data packed into ints, such as :py:class:`~arcade.types.Color`.

    :param var_name: the name of the variable or argument
    :param value: the value to fall outside the expected range
    :param lower: the lower bound, inclusive, of the range
    :param upper: the upper bound, inclusive, of the range
    """
    def __init__(self, var_name: str, value: int, lower: int, upper: int) -> None:
        ...
    


class FloatOutsideRangeError(OutsideRangeError):
    """
    A float value was outside an expected range

    :param var_name: the name of the variable or argument
    :param value: the value to fall outside the expected range
    :param lower: the lower bound, inclusive, of the range
    :param upper: the upper bound, inclusive, of the range
    """
    def __init__(self, var_name: str, value: float, lower: float, upper: float) -> None:
        ...
    


class ByteRangeError(IntOutsideRangeError):
    """
    An int was outside the range of 0 to 255 inclusive

    :param var_name: the name of the variable or argument
    :param value: the value to fall outside the expected range
    """
    def __init__(self, var_name: str, value: int) -> None:
        ...
    


class NormalizedRangeError(FloatOutsideRangeError):
    """
    A float was not between 0.0 and 1.0, inclusive

    Note that normalized floats should not normally be bound-checked as
    before drawing as this is taken care of on the GPU side.

    The exceptions to this are when processing data on the Python side,
    especially when it is cheaper to bound check two floats than call
    clamping functions.

    :param var_name: the name of the variable or argument
    :param value: the value to fall outside the expected range
    """
    def __init__(self, var_name: str, value: float) -> None:
        ...
    


_TType = TypeVar('_TType', bound=Type)
def copy_dunders_unimplemented(decorated_type: _TType) -> _TType:
    """Decorator stubs dunders raising :py:class:`NotImplementedError`.

    Temp fixes https://github.com/pythonarcade/arcade/issues/2074 by
    stubbing the following instance methods:

    * :py:meth:`object.__copy__` (used by :py:func:`copy.copy`)
    * :py:meth:`object.__deepcopy__` (used by :py:func:`copy.deepcopy`)

    Example usage:

    .. code-block:: python

       import copy
       from arcade,utils import copy_dunders_unimplemented
       from arcade.hypothetical_module import HypotheticalNasty

       # Example usage
       @copy_dunders_unimplemented
       class CantCopy:
            def __init__(self, nasty_state: HypotheticalNasty):
                self.nasty_state = nasty_state

       instance = CantCopy(HypotheticalNasty())

       # These raise NotImplementedError
       this_line_raises = copy.deepcopy(instance)
       this_line_also_raises = copy.copy(instance)


    """
    ...

class PerformanceWarning(Warning):
    """Use this for issuing performance warnings."""
    ...


class ReplacementWarning(Warning):
    """Use this for issuing warnings about naming and functionality changes."""
    ...


def warning(warning_type: Type[Warning], message: str = ..., **kwargs): # -> Callable[..., _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]]:
    ...

def generate_uuid_from_kwargs(**kwargs) -> str:
    """
    Given key/pair combos, returns a string in "UUID" format.
    With inputs such as `text='hi', size=32` it will return `"text=hi|size=32"`.
    This function does NOT return a random unique ID.
    It must be called with parameters, and will raise an error if passed no keyword arguments.
    """
    ...

def is_raspberry_pi() -> bool:
    """
    Determine if the host is a raspberry pi.

    :returns: bool
    """
    ...

def get_raspberry_pi_info() -> Tuple[bool, str, str]:
    """
    Determine if the host is a raspberry pi
    with additional info.

    :returns: 3 component tuple.
              bool (is host a raspi)
              str (architecture)
              str (model name)
    """
    ...

