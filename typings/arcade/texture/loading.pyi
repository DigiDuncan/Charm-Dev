"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Tuple, Union
from pathlib import Path
from arcade.hitbox import HitBoxAlgorithm
from .texture import Texture

LOG = ...
def load_texture(file_path: Union[str, Path], *, x: int = ..., y: int = ..., width: int = ..., height: int = ..., hit_box_algorithm: Optional[HitBoxAlgorithm] = ...) -> Texture:
    """
    Load an image from disk and create a texture.

    The ``x``, ``y``, ``width``, and ``height`` parameters are used to
    specify a sub-rectangle of the image to load. If not specified, the
    entire image is loaded.

    :param file_name: Name of the file to that holds the texture.
    :param x: X coordinate of the texture in the image.
    :param y: Y coordinate of the texture in the image.
    :param width: Width of the texture in the image.
    :param height: Height of the texture in the image.
    :param hit_box_algorithm:
    :returns: New :class:`Texture` object.
    :raises: ValueError
    """
    ...

def load_texture_pair(file_name: Union[str, Path], hit_box_algorithm: Optional[HitBoxAlgorithm] = ...) -> Tuple[Texture, Texture]:
    """
    Load a texture pair, with the second being a mirror image of the first.
    Useful when doing animations and the character can face left/right.

    :param file_name: Path to texture
    :param hit_box_algorithm: The hit box algorithm
    """
    ...

def load_textures(file_name: Union[str, Path], image_location_list: List[Tuple[int, int, int, int]], mirrored: bool = ..., flipped: bool = ..., hit_box_algorithm: Optional[HitBoxAlgorithm] = ...) -> List[Texture]:
    """
    Load a set of textures from a single image file.

    Note: If the code is to load only part of the image, the given `x`, `y`
    coordinates will start with the origin `(0, 0)` in the upper left of the
    image. When drawing, Arcade uses `(0, 0)` in the lower left corner.
    Be careful with this reversal.

    For a longer explanation of why computers sometimes start in the upper
    left, see:
    http://programarcadegames.com/index.php?chapter=introduction_to_graphics&lang=en#section_5

    :param file_name: Name of the file.
    :param image_location_list: List of image sub-locations. Each rectangle should be
           a `List` of four floats: `[x, y, width, height]`.
    :param mirrored: If set to `True`, the image is mirrored left to right.
    :param flipped: If set to `True`, the image is flipped upside down.
    :param hit_box_algorithm: One of None, 'None', 'Simple' (default) or 'Detailed'.
    :param hit_box_detail: Float, defaults to 4.5. Used with 'Detailed' to hit box
    :returns: List of :class:`Texture`'s.

    :raises: ValueError
    """
    ...

def load_spritesheet(file_name: Union[str, Path], sprite_width: int, sprite_height: int, columns: int, count: int, margin: int = ..., hit_box_algorithm: Optional[HitBoxAlgorithm] = ...) -> List[Texture]:
    """
    :param file_name: Name of the file to that holds the texture.
    :param sprite_width: Width of the sprites in pixels
    :param sprite_height: Height of the sprites in pixels
    :param columns: Number of tiles wide the image is.
    :param count: Number of tiles in the image.
    :param margin: Margin between images
    :param hit_box_algorithm: The hit box algorithm
    :returns List: List of :class:`Texture` objects.
    """
    ...

