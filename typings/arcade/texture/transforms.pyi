"""
This type stub file was generated by pyright.
"""

from typing import Dict, Tuple
from enum import Enum
from arcade.types import Point2List

"""
Module for handling common texture transforms
such as rotation, translation, flipping etc.

We don't actually transform pixel data, we simply
transform the texture coordinates and hit box points.
"""
class VertexOrder(Enum):
    """
    Order for texture coordinates.
    """
    UPPER_LEFT = ...
    UPPER_RIGHT = ...
    LOWER_LEFT = ...
    LOWER_RIGHT = ...


class Transform:
    """
    Base class for all texture transforms.

    Transforms are responsible for transforming the texture
    coordinates and hit box points.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        """Transforms hit box points."""
        ...
    
    @classmethod
    def transform_vertex_order(cls, order: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:
        """
        Transforms and exiting vertex order with this transform.
        This gives us important metadata on how to quickly transform
        the texture coordinates without iterating all applied transforms.
        """
        ...
    
    @classmethod
    def transform_texture_coordinates_order(cls, texture_coordinates: Tuple[float, float, float, float, float, float, float, float], order: Tuple[int, int, int, int]) -> Tuple[float, float, float, float, float, float, float, float]:
        """
        Change texture coordinates order.

        :param texture_coordinates: Texture coordinates to transform
        :param order: The new order
        """
        ...
    


class Rotate90Transform(Transform):
    """
    Rotate 90 degrees clockwise.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        ...
    


class Rotate180Transform(Transform):
    """
    Rotate 180 degrees clockwise.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        ...
    


class Rotate270Transform(Transform):
    """
    Rotate 270 degrees clockwise.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        ...
    


class FlipLeftRightTransform(Transform):
    """
    Flip texture horizontally / left to right.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        ...
    


class FlipTopBottomTransform(Transform):
    """
    Flip texture vertically / top to bottom.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        ...
    


class TransposeTransform(Transform):
    """
    Transpose texture.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        ...
    


class TransverseTransform(Transform):
    """
    Transverse texture.
    """
    order = ...
    @staticmethod
    def transform_hit_box_points(points: Point2List) -> Point2List:
        ...
    


ORIENTATIONS: Dict[Tuple[int, int, int, int], Tuple[int, bool, bool]] = ...
def get_orientation(order: Tuple[int, int, int, int]) -> int:
    """
    Get orientation info from the vertex order
    """
    ...

