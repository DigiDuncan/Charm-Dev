"""
This type stub file was generated by pyright.
"""

from PIL import Image
from pathlib import Path
from typing import List, Optional, TYPE_CHECKING, Tuple, Union
from .texture import Texture
from arcade.hitbox import HitBoxAlgorithm

if TYPE_CHECKING:
    ...
class SpriteSheet:
    """
    Class to hold a sprite sheet. A sprite sheet is a single image that contains
    multiple textures. Textures can be created from the sprite sheet by cropping
    out sections of the image.

    This is only a utility class. It does not have any special functionality

    :param path: Path to the file to load.
    :param image: PIL image to use.
    """
    def __init__(self, path: Optional[Union[str, Path]] = ..., image: Optional[Image.Image] = ...) -> None:
        ...
    
    @classmethod
    def from_image(cls, image: Image.Image): # -> Self:
        """
        Create a sprite sheet from a PIL image.

        :param image: PIL image to use.
        """
        ...
    
    @property
    def image(self) -> Image.Image:
        """
        Get or set the PIL image for this sprite sheet.
        """
        ...
    
    @image.setter
    def image(self, image: Image.Image): # -> None:
        ...
    
    @property
    def path(self) -> Optional[Path]:
        """
        The path to the sprite sheet.

        :return: The path.
        """
        ...
    
    @property
    def flip_flags(self) -> Tuple[bool, bool]:
        """
        Query the orientation of the sprite sheet.
        This can be used to determine if the sprite sheet needs to be flipped.

        Default values are ``(False, False)``. Will be modified when
        :py:meth:`flip_left_right` or :py:meth:`flip_top_bottom` is called.

        :return: Tuple of booleans ``(flip_left_right, flip_top_bottom)``.
        """
        ...
    
    def flip_left_right(self) -> None:
        """
        Flip the sprite sheet left/right.
        """
        ...
    
    def flip_top_bottom(self): # -> None:
        """
        Flip the sprite sheet up/down.
        """
        ...
    
    def crop_grid(self, size: Tuple[int, int], columns: int, count: int, margin: Tuple[int, int, int, int] = ..., hit_box_algorithm: Optional[HitBoxAlgorithm] = ...) -> List[Texture]:
        """
        Crop a grid of textures from the sprite sheet.

        :param size: Size of each texture ``(width, height)``
        :param columns: Number of columns in the grid
        :param count: Number of textures to crop
        :param margin: The margin around each texture ``(left, right, bottom, top)``
        :param hit_box_algorithm: Hit box algorithm to use for the textures.
        """
        ...
    


