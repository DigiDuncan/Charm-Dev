"""
This type stub file was generated by pyright.
"""

from dataclasses import dataclass
from typing import Callable, Optional, Tuple

"""
Functions used to support easing
"""
@dataclass
class EasingData:
    """
    Data class for holding information about easing.
    """
    start_period: float
    cur_period: float
    end_period: float
    start_value: float
    end_value: float
    ease_function: Callable
    def reset(self): # -> None:
        ...
    


def linear(percent: float) -> float:
    """
    Function for linear easing.
    """
    ...

def smoothstep(percent: float) -> float:
    """
    Function for smoothstep easing.
    """
    ...

def ease_in(percent: float) -> float:
    """
    Function for quadratic ease-in easing.
    """
    ...

def ease_out(percent: float) -> float:
    """
    Function for quadratic ease-out easing.
    """
    ...

def ease_in_out(percent: float) -> float:
    """
    Function for quadratic easing in and out.
    """
    ...

def ease_out_elastic(percent: float) -> float:
    """
    Function for elastic ease-out easing.
    """
    ...

def ease_out_bounce(percent: float) -> float:
    """
    Function for a bouncy ease-out easing.
    """
    ...

def ease_in_back(percent: float) -> float:
    """
    Function for ease_in easing which moves back before moving forward.
    """
    ...

def ease_out_back(percent: float) -> float:
    """
    Function for ease_out easing which moves back before moving forward.
    """
    ...

def ease_in_sin(percent: float) -> float:
    """
    Function for ease_in easing using a sin wave
    """
    ...

def ease_out_sin(percent: float) -> float:
    """
    Function for ease_out easing using a sin wave
    """
    ...

def ease_in_out_sin(percent: float) -> float:
    """
    Function for easing in and out using a sin wave
    """
    ...

def easing(percent: float, easing_data: EasingData) -> float:
    """
    Function for calculating return value for easing, given percent and easing data.
    """
    ...

def ease_angle(start_angle: float, end_angle: float, *, time=..., rate=..., ease_function: Callable = ...) -> Optional[EasingData]:
    """
    Set up easing for angles.
    """
    ...

def ease_angle_update(easing_data: EasingData, delta_time: float) -> Tuple:
    """
    Update angle easing.
    """
    ...

def ease_value(start_value: float, end_value: float, *, time=..., rate=..., ease_function=...): # -> EasingData:
    """
    Get an easing value
    """
    ...

def ease_position(start_position, end_position, *, time=..., rate=..., ease_function=...): # -> tuple[EasingData, EasingData]:
    """
    Get an easing position
    """
    ...

def ease_update(easing_data: EasingData, delta_time: float) -> Tuple:
    """
    Update easing between two values/
    """
    ...

