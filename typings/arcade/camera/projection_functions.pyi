"""
This type stub file was generated by pyright.
"""

from typing import Tuple
from pyglet.math import Mat4, Vec2, Vec3
from arcade.camera.data_types import CameraData, OrthographicProjectionData, PerspectiveProjectionData
from arcade.types import Point

def generate_view_matrix(camera_data: CameraData) -> Mat4:
    """
    Using the ViewData it generates a view matrix from the pyglet Mat4 look at function
    """
    ...

def generate_orthographic_matrix(perspective_data: OrthographicProjectionData, zoom: float = ...) -> Mat4:
    """
    Using the OrthographicProjectionData a projection matrix is generated where the size of an
    object is not affected by depth.

    Generally keep the scale value to integers or negative powers of integers (2^-1, 3^-1, 2^-2, etc.) to keep
    the pixels uniform in size. Avoid a zoom of 0.0.
    """
    ...

def generate_perspective_matrix(perspective_data: PerspectiveProjectionData, zoom: float = ...) -> Mat4:
    """
    Using the OrthographicProjectionData a projection matrix is generated where the size of the
    objects is not affected by depth.

    Generally keep the scale value to integers or negative powers of integers (2^-1, 3^-1, 2^-2, etc.) to keep
    the pixels uniform in size. Avoid a zoom of 0.0.
    """
    ...

def project_orthographic(world_coordinate: Point, viewport: Tuple[int, int, int, int], view_matrix: Mat4, projection_matrix: Mat4) -> Vec2:
    ...

def unproject_orthographic(screen_coordinate: Point, viewport: Tuple[int, int, int, int], view_matrix: Mat4, projection_matrix: Mat4) -> Vec3:
    ...

def project_perspective(world_coordinate: Point, viewport: Tuple[int, int, int, int], view_matrix: Mat4, projection_matrix: Mat4) -> Vec2:
    ...

def unproject_perspective(screen_coordinate: Point, viewport: Tuple[int, int, int, int], view_matrix: Mat4, projection_matrix: Mat4) -> Vec3:
    ...

