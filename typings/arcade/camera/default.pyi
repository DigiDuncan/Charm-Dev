"""
This type stub file was generated by pyright.
"""

from typing import Generator, Optional, TYPE_CHECKING, Tuple
from typing_extensions import Self
from contextlib import contextmanager
from pyglet.math import Vec2, Vec3
from arcade.types import Point
from arcade.context import ArcadeContext

if TYPE_CHECKING:
    ...
__all__ = ['ViewportProjector', 'DefaultProjector']
class ViewportProjector:
    """
    A simple Projector which does not rely on any camera PoDs.

    Does not have a way of moving, rotating, or zooming the camera.
    perfect for something like UI or for mapping to an offscreen framebuffer.

    Args:
        viewport: The viewport to project to.
        window: The window to bind the camera to. Defaults to the currently active window.
    """
    def __init__(self, viewport: Optional[Tuple[int, int, int, int]] = ..., *, context: Optional[ArcadeContext] = ...) -> None:
        ...
    
    @property
    def viewport(self) -> Tuple[int, int, int, int]:
        """
        The viewport use to derive projection and view matrix.
        """
        ...
    
    @viewport.setter
    def viewport(self, viewport: Tuple[int, int, int, int]) -> None:
        ...
    
    def use(self) -> None:
        """
        Set the window's projection and view matrix.
        Also sets the projector as the windows current camera.
        """
        ...
    
    @contextmanager
    def activate(self) -> Generator[Self, None, None]:
        """
        The context manager version of the use method.

        usable with the 'with' block. e.g. 'with ViewportProjector.activate() as cam: ...'
        """
        ...
    
    def project(self, world_coordinate: Point) -> Vec2:
        """
        Take a Vec2 or Vec3 of coordinates and return the related screen coordinate
        """
        ...
    
    def unproject(self, screen_coordinate: Point) -> Vec3:
        """
        Map the screen pos to screen_coordinates.

        Due to the nature of viewport projector this does not do anything.
        """
        ...
    


class DefaultProjector(ViewportProjector):
    """
    An extremely limited projector which lacks any kind of control. This is only here to act as the default camera
    used internally by arcade. There should be no instance where a developer would want to use this class.

    :param window: The window to bind the camera to. Defaults to the currently active window.
    """
    def __init__(self, *, context: Optional[ArcadeContext] = ...) -> None:
        ...
    
    def use(self) -> None:
        """
        Set the window's Projection and View matrices.

        cache's the window viewport to determine the projection matrix.
        """
        ...
    


