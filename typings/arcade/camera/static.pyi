"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import Callable, Generator, Optional, TYPE_CHECKING, Tuple
from arcade.camera.data_types import CameraData, OrthographicProjectionData
from arcade.types import Point, Point3
from pyglet.math import Mat4, Vec2, Vec3
from arcade.application import Window

if TYPE_CHECKING:
    ...
class _StaticCamera:
    def __init__(self, view_matrix: Mat4, projection_matrix: Mat4, viewport: Optional[Tuple[int, int, int, int]] = ..., *, project_method: Optional[Callable[[Point, Tuple[int, int, int, int], Mat4, Mat4], Vec2]] = ..., unproject_method: Optional[Callable[[Point, Tuple[int, int, int, int], Mat4, Mat4], Vec3]] = ..., window: Optional[Window] = ...) -> None:
        ...
    
    def use(self): # -> None:
        ...
    
    @contextmanager
    def activate(self) -> Generator[_StaticCamera, None, None]:
        ...
    
    def project(self, world_coordinate: Point) -> Vec2:
        """
        Take a Vec2 or Vec3 of coordinates and return the related screen coordinate
        """
        ...
    
    def unproject(self, screen_coordinate: Point) -> Vec3:
        """
        Take in a pixel coordinate from within
        the range of the window size and returns
        the world space coordinates.

        Essentially reverses the effects of the projector.

        Args:
            screen_coordinate: A 2D position in pixels from the bottom left of the screen.
                               This should ALWAYS be in the range of 0.0 - screen size.
        Returns:
            A 3D vector in world space.
        """
        ...
    


def static_from_orthographic(view: CameraData, orthographic: OrthographicProjectionData, viewport: Optional[Tuple[int, int, int, int]] = ..., *, window: Optional[Window] = ...) -> _StaticCamera:
    ...

def static_from_perspective(view: CameraData, perspective: OrthographicProjectionData, viewport: Optional[Tuple[int, int, int, int]] = ..., *, window: Optional[Window] = ...) -> _StaticCamera:
    ...

def static_from_raw_orthographic(projection: Tuple[float, float, float, float], near: float = ..., far: float = ..., zoom: float = ..., position: Point3 = ..., up: Point3 = ..., forward: Point3 = ..., viewport: Optional[Tuple[int, int, int, int]] = ..., *, window: Optional[Window] = ...) -> _StaticCamera:
    ...

def static_from_raw_perspective(aspect: float, fov: float, near: float = ..., far: float = ..., zoom: float = ..., position: Point3 = ..., up: Point3 = ..., forward: Point3 = ..., viewport: Optional[Tuple[int, int, int, int]] = ..., *, window: Optional[Window] = ...) -> _StaticCamera:
    ...

def static_from_matrices(view: Mat4, projection: Mat4, viewport: Optional[Tuple[int, int, int, int]], *, window: Optional[Window] = ..., project_method: Optional[Callable[[Point, Tuple[int, int, int, int], Mat4, Mat4], Vec2]] = ..., unproject_method: Optional[Callable[[Point, Tuple[int, int, int, int], Mat4, Mat4], Vec3]] = ...) -> _StaticCamera:
    ...

