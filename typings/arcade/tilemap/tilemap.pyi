"""
This type stub file was generated by pyright.
"""

import pytiled_parser
from pathlib import Path
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Tuple, Union
from pytiled_parser import Color
from arcade import SpriteList, TextureAtlas
from arcade.hitbox import HitBoxAlgorithm
from pyglet.math import Vec2
from arcade.types import TiledObject

"""
This module provides functionality to load in JSON map files from
the Tiled Map Editor. This is achieved using the pytiled-parser
library.

For more info on Tiled see: https://www.mapeditor.org/
For more info on pytiled-parser see: https://github.com/Beefy-Swain/pytiled_parser
"""
if TYPE_CHECKING:
    ...
_FLIPPED_HORIZONTALLY_FLAG = ...
_FLIPPED_VERTICALLY_FLAG = ...
_FLIPPED_DIAGONALLY_FLAG = ...
__all__ = ["TileMap", "load_tilemap", "read_tmx"]
prop_to_float = ...
class TileMap:
    """
    Class that represents a fully parsed and loaded map from Tiled.
    For examples on how to use this class, see:
    https://api.arcade.academy/en/latest/examples/platform_tutorial/step_09.html


    :param Union[str, Path] map_file: A JSON map file for a Tiled map to initialize from
    :param scaling: Global scaling to apply to all Sprites.
    :param Dict[str, Dict[str, Any]] layer_options: Extra parameters for each layer.
    :param use_spatial_hash: If set to True, this will make moving a sprite
           in the SpriteList slower, but it will speed up collision detection
           with items in the SpriteList. Great for doing collision detection
           with static walls/platforms.
    :param hit_box_algorithm: The hit box algorithm to use for the Sprite's in this layer.
    :param tiled_map: An already parsed pytiled-parser map object.
           Passing this means that the ``map_file`` argument will be ignored, and the pre-parsed
           map will instead be used. This can be helpful for working with Tiled World files.
    :param offset: Can be used to offset the position of all sprites and objects
            within the map. This will be applied in addition to any offsets from Tiled. This value
            can be overridden with the layer_options dict.
    :param texture_atlas: A default texture atlas to use for the
            SpriteLists created by this map. If not supplied the global default atlas will be used.
    :param lazy: SpriteLists will be created lazily.


    The `layer_options` parameter can be used to specify per layer arguments.

    The available options for this are:

        use_spatial_hash - A boolean to enable spatial hashing on this layer's SpriteList.
        scaling - A float providing layer specific Sprite scaling.
        hit_box_algorithm - The hit box algorithm to use for the Sprite's in this layer.
        offset - A tuple containing X and Y position offsets for the layer
        custom_class - All objects in the layer are created from this class instead of Sprite. \
                       Must be subclass of Sprite.
        custom_class_args - Custom arguments, passed into the constructor of the custom_class
        texture_atlas - A texture atlas to use for the SpriteList from this layer, if none is \
                        supplied then the one defined at the map level will be used.

        For example:

        code-block::

            layer_options = {
                "Platforms": {
                    "use_spatial_hash": True,
                    "scaling": 2.5,
                    "offset": (-128, 64),
                    "custom_class": Platform,
                    "custom_class_args": {
                        "health": 100
                    }
                },
            }

    The keys and their values in each layer are passed to the layer processing functions
    using the `**` operator on the dictionary.
    """
    tiled_map: pytiled_parser.TiledMap
    width: float
    height: float
    tile_width: float
    tile_height: float
    background_color: Optional[Color]
    scaling: float
    sprite_lists: Dict[str, SpriteList]
    object_lists: Dict[str, List[TiledObject]]
    offset: Vec2
    def __init__(self, map_file: Union[str, Path] = ..., scaling: float = ..., layer_options: Optional[Dict[str, Dict[str, Any]]] = ..., use_spatial_hash: bool = ..., hit_box_algorithm: Optional[HitBoxAlgorithm] = ..., tiled_map: Optional[pytiled_parser.TiledMap] = ..., offset: Vec2 = ..., texture_atlas: Optional[TextureAtlas] = ..., lazy: bool = ...) -> None:
        ...
    
    def get_cartesian(self, x: float, y: float) -> Tuple[float, float]:
        """
        Given a set of coordinates in pixel units, this returns the cartesian coordinates.

        This assumes the supplied coordinates are pixel coordinates, and bases the cartesian
        grid off of the Map's tile size.

        If you have a map with 128x128 pixel Tiles, and you supply coordinates 500, 250 to
        this function you'll receive back 3, 2

        :param x: The X Coordinate to convert
        :param y: The Y Coordinate to convert
        """
        ...
    
    def get_tilemap_layer(self, layer_path: str) -> Optional[pytiled_parser.Layer]:
        ...
    


def load_tilemap(map_file: Union[str, Path], scaling: float = ..., layer_options: Optional[Dict[str, Dict[str, Any]]] = ..., use_spatial_hash: bool = ..., hit_box_algorithm: Optional[HitBoxAlgorithm] = ..., offset: Vec2 = ..., texture_atlas: Optional[TextureAtlas] = ..., lazy: bool = ...) -> TileMap:
    """
    Given a .json map file, loads in and returns a `TileMap` object.

    A TileMap can be created directly using the classes `__init__` function.
    This function exists for ease of use.

    For more clarification on the layer_options key, see the `__init__` function
    of the `TileMap` class

    :param Union[str, Path] map_file: The JSON map file.
    :param scaling: The global scaling to apply to all Sprite's within the map.
    :param use_spatial_hash: If set to True, this will make moving a sprite
               in the SpriteList slower, but it will speed up collision detection
               with items in the SpriteList. Great for doing collision detection
               with static walls/platforms.
    :param hit_box_algorithm: The hit box algorithm to use for collision detection.
    :param Dict[str, Dict[str, Any]] layer_options: Layer specific options for the map.
    :param offset: Can be used to offset the position of all sprites and objects
            within the map. This will be applied in addition to any offsets from Tiled. This value
            can be overridden with the layer_options dict.
    :param lazy: SpriteLists will be created lazily.
    """
    ...

def read_tmx(map_file: Union[str, Path]) -> pytiled_parser.TiledMap:
    """
    Deprecated function to raise a warning that it has been removed.

    Exists to provide info for outdated code bases.
    """
    ...

