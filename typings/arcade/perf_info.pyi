"""
This type stub file was generated by pyright.
"""

import collections
from typing import Dict

"""
Utility functions to keep performance information
"""
_timings: Dict = ...
_pyglets_dispatch_event = ...
_frame_times: collections.deque = ...
_max_history: int = ...
__all__ = ["print_timings", "clear_timings", "get_timings", "enable_timings", "disable_timings", "get_fps", "timings_enabled"]
def print_timings(): # -> None:
    """
    Print event handler statistics to stdout as a table.

    Performance tracking must be enabled with
    :func:`arcade.enable_timings` before calling this function.

    See :ref:`performance_statistics_example` for an example of how to
    use function.

    The statistics consist of:

    * how many times each registered event was called
    * the average time for handling each type of event in seconds

    The table looks something like:

    .. code-block:: text

        Event          Count Average Time
        -------------- ----- ------------
        on_update         60       0.0000
        on_mouse_enter     1       0.0000
        on_mouse_motion   39       0.0000
        on_expose          1       0.0000
        on_draw           60       0.0020
    """
    ...

def clear_timings() -> None:
    """
    Reset the count & average time for each event type to zero.

    Performance tracking must be enabled with
    :func:`arcade.enable_timings` before calling this function.

    See :ref:`performance_statistics_example` for an example of how to
    use function.
    """
    ...

def get_timings() -> Dict:
    """
    Get a dict of the current dispatch event timings.

    Performance tracking must be enabled with
    :func:`arcade.enable_timings` before calling this function.

    :return: A dict of event timing data, consisting of counts and
             average handler duration.
    """
    ...

def enable_timings(max_history: int = ...) -> None:
    """
    Enable recording of performance information.

    This function must be called before using any other performance
    features, except for :func:`arcade.timings_enabled`, which can
    be called at any time.

    See :ref:`performance_statistics_example` for an example of how to
    use function.

    :param max_history: How many frames to keep performance info for.
    """
    ...

def disable_timings() -> None:
    """
    Disable collection of timing information.

    Performance tracking must be enabled with
    :func:`arcade.enable_timings` before calling this function.
    """
    ...

def get_fps(frame_count: int = ...) -> float:
    """
    Get the FPS over the last ``frame_count`` frames.

    Performance tracking must be enabled with
    :func:`arcade.enable_timings` before calling this function.

    To get the FPS over the last 30 frames, you would pass 30 instead
    of the default 60.

    See :ref:`performance_statistics_example` for an example of how to
    use function.

    :param frame_count: How many frames to calculate the FPS over.
    """
    ...

def timings_enabled() -> bool:
    """
    Return true if timings are enabled, false otherwise.

    This function can be used at any time to check if timings are
    enabled. See :func:`arcade.enable_timings` for more information.

    :return: Whether timings are currently enabled.
    """
    ...

