"""
This type stub file was generated by pyright.
"""

import arcade
from arcade.types import Color, RGBA255

__all__ = ["PerfGraph"]
class PerfGraph(arcade.Sprite):
    """
    An auto-updating line chart of FPS or event handler execution times.

    You must use :func:`arcade.enable_timings` to turn on performance
    tracking for the chart to display data.

    Aside from instantiation and updating the chart, this class behaves
    like other :class:`arcade.Sprite` instances. You can use it with
    :class:`SpriteList <arcade.SpriteList>` normally. See
    :ref:`performance_statistics_example` for an example of how to use
    this class.

    Unlike other :class:`Sprite <arcade.Sprite>` instances, this class
    neither loads an :class:`arcade.Texture` nor accepts one as a
    constructor argument. Instead, it creates a new internal
    :class:`Texture <arcade.Texture>` instance. The chart is
    automatically redrawn to this internal
    :class:`Texture <arcade.Texture>` every ``update_rate`` seconds.

    :param width: The width of the chart texture in pixels
    :param height: The height of the chart texture in pixels
    :param graph_data: The pyglet event handler or statistic to track
    :param update_rate: How often the graph updates, in seconds
    :param background_color: The background color of the chart
    :param data_line_color: Color of the line tracking drawn
    :param axis_color: The color to draw the x & y axes in
    :param font_color: The color of the label font
    :param font_size: The size of the label font in points
    :param y_axis_num_lines: How many grid lines should be used to
                             divide the y scale of the graph.
    :param view_y_scale_step: The graph's view area will be scaled to a
                              multiple of this value to fit to the data
                              currently displayed.
    """
    def __init__(self, width: int, height: int, graph_data: str = ..., update_rate: float = ..., background_color: RGBA255 = ..., data_line_color: RGBA255 = ..., axis_color: RGBA255 = ..., grid_color: RGBA255 = ..., font_color: RGBA255 = ..., font_size: int = ..., y_axis_num_lines: int = ..., view_y_scale_step: float = ...) -> None:
        ...
    
    @property
    def background_color(self) -> Color:
        ...
    
    @background_color.setter
    def background_color(self, new_color: RGBA255): # -> None:
        ...
    
    @property
    def grid_color(self) -> Color:
        ...
    
    @grid_color.setter
    def grid_color(self, raw_color: RGBA255): # -> None:
        ...
    
    @property
    def axis_color(self) -> Color:
        ...
    
    @axis_color.setter
    def axis_color(self, raw_color: RGBA255): # -> None:
        ...
    
    @property
    def font_size(self) -> int:
        ...
    
    @font_size.setter
    def font_size(self, new: int): # -> None:
        ...
    
    @property
    def font_color(self) -> Color:
        ...
    
    @font_color.setter
    def font_color(self, raw_color: Color): # -> None:
        ...
    
    def remove_from_sprite_lists(self): # -> None:
        """
        Remove the sprite from all lists and cancel the update event.

        :return:
        """
        ...
    
    def update_graph(self, delta_time: float): # -> None:
        """
        Update the graph by redrawing the internal texture data.

        .. warning:: You do not need to call this method! It will be
                     called automatically!

        :param delta_time: Elapsed time in seconds. Passed by the pyglet
                           scheduler.
        """
        ...
    


