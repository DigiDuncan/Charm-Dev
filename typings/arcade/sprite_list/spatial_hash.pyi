"""
This type stub file was generated by pyright.
"""

from typing import Generic, Set
from arcade.sprite.base import BasicSprite
from arcade.types import IPoint, Point
from arcade.sprite import SpriteType
from arcade.types.rect import Rect

class SpatialHash(Generic[SpriteType]):
    """
    Structure for fast collision checking with sprites.

    See: https://www.gamedev.net/articles/programming/general-and-gameplay-programming/spatial-hashing-r2697/

    :param cell_size: Size (width and height) of the cells in the spatial hash
    """
    def __init__(self, cell_size: int) -> None:
        ...
    
    def hash(self, point: IPoint) -> IPoint:
        """Convert world coordinates to cell coordinates"""
        ...
    
    def reset(self): # -> None:
        """
        Clear all the sprites from the spatial hash.
        """
        ...
    
    def add(self, sprite: SpriteType) -> None:
        """
        Add a sprite to the spatial hash.

        :param sprite: The sprite to add
        """
        ...
    
    def move(self, sprite: SpriteType) -> None:
        """
        Shortcut to remove and re-add a sprite.

        :param sprite: The sprite to move
        """
        ...
    
    def remove(self, sprite: SpriteType) -> None:
        """
        Remove a Sprite.

        :param sprite: The sprite to remove
        """
        ...
    
    def get_sprites_near_sprite(self, sprite: BasicSprite) -> Set[SpriteType]:
        """
        Get all the sprites that are in the same buckets as the given sprite.

        :param sprite: The sprite to check
        :return: A set of close-by sprites
        """
        ...
    
    def get_sprites_near_point(self, point: Point) -> Set[SpriteType]:
        """
        Return sprites in the same bucket as the given point.

        :param point: The point to check

        :return: A set of close-by sprites
        """
        ...
    
    def get_sprites_near_rect(self, rect: Rect) -> Set[SpriteType]:
        """
        Return sprites in the same buckets as the given rectangle.

        :param rect: The rectangle to check (left, right, bottom, top)
        :return: A set of sprites in the rectangle
        """
        ...
    
    @property
    def count(self) -> int:
        """Return the number of sprites in the spatial hash"""
        ...
    


