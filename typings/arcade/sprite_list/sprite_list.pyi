"""
This type stub file was generated by pyright.
"""

from typing import Callable, Generic, Iterable, Iterator, Optional, TYPE_CHECKING, Union
from arcade import Sprite, SpriteType, Texture, TextureAtlas
from arcade.types import Color, RGBA255, RGBANormalized, RGBOrANormalized
from arcade.gl.types import BlendFunction, OpenGlFilter, PyGLenum
from arcade.gl.buffer import Buffer
from arcade.gl.vertex_array import Geometry
from arcade.utils import copy_dunders_unimplemented

"""
This module provides functionality to manage Sprites in a list
and efficiently batch drawing them. Drawing sprites using
SpriteList is orders of magnitude faster then drawing
individual sprites.
"""
if TYPE_CHECKING:
    ...
LOG = ...
_SPRITE_SLOT_INVISIBLE = ...
_DEFAULT_CAPACITY = ...
@copy_dunders_unimplemented
class SpriteList(Generic[SpriteType]):
    """
    The purpose of the spriteList is to batch draw a list of sprites.
    Drawing single sprites will not get you anywhere performance wise
    as the number of sprites in your project increases. The spritelist
    contains many low level optimizations taking advantage of your
    graphics processor. To put things into perspective, a spritelist
    can contain tens of thousands of sprites without any issues.
    Sprites outside the viewport/window will not be rendered.

    If the spritelist are going to be used for collision it's a good
    idea to enable spatial hashing. Especially if no sprites are moving.
    This will make collision checking **a lot** faster.
    In technical terms collision checking is ``O(1)`` with spatial hashing
    enabled and ``O(N)`` without. However, if you have a
    list of moving sprites the cost of updating the spatial hash
    when they are moved can be greater than what you save with
    spatial collision checks. This needs to be profiled on a
    case by case basis.

    For the advanced options check the advanced section in the
    arcade documentation.

    :param use_spatial_hash: If set to True, this will make creating a sprite, and
            moving a sprite
            in the SpriteList slower, but it will speed up collision detection
            with items in the SpriteList. Great for doing collision detection
            with static walls/platforms in large maps.
    :param spatial_hash_cell_size: The cell size of the spatial hash (default: 128)
    :param atlas: (Advanced) The texture atlas for this sprite list. If no
            atlas is supplied the global/default one will be used.
    :param capacity: (Advanced) The initial capacity of the internal buffer.
            It's a suggestion for the maximum amount of sprites this list
            can hold. Can normally be left with default value.
    :param lazy: (Advanced) ``True`` delays creating OpenGL resources
            for the sprite list until either its :py:meth:`~SpriteList.draw`
            or :py:meth:`~SpriteList.initialize` method is called. See
            :ref:`pg_spritelist_advanced_lazy_spritelists` to learn more.
    :param visible: Setting this to False will cause the SpriteList to not
            be drawn. When draw is called, the method will just return without drawing.
    """
    def __init__(self, use_spatial_hash: bool = ..., spatial_hash_cell_size: int = ..., atlas: Optional[TextureAtlas] = ..., capacity: int = ..., lazy: bool = ..., visible: bool = ...) -> None:
        ...
    
    def __len__(self) -> int:
        """Return the length of the sprite list."""
        ...
    
    def __contains__(self, sprite: Sprite) -> bool:
        """Return if the sprite list contains the given sprite"""
        ...
    
    def __iter__(self) -> Iterator[SpriteType]:
        """Return an iterable object of sprites."""
        ...
    
    def __getitem__(self, i: int) -> SpriteType:
        ...
    
    def __setitem__(self, index: int, sprite: SpriteType) -> None:
        """Replace a sprite at a specific index"""
        ...
    
    @property
    def visible(self) -> bool:
        """
        Get or set the visible flag for this spritelist.
        If visible is ``False`` the ``draw()`` has no effect.

        """
        ...
    
    @visible.setter
    def visible(self, value: bool) -> None:
        ...
    
    @property
    def color(self) -> Color:
        """
        Get or set the multiply color for all sprites in the list RGBA integers

        This will affect all sprites in the list, and each value must be
        between 0 and 255.

        The color may be specified as any of the following:

        * an RGBA :py:class:`tuple` with each channel value between 0 and 255
        * an instance of :py:class:`~arcade.types.Color`
        * an RGB :py:class:`tuple`, in which case the color will be treated as opaque

        Each individual sprite can also be assigned a color via its
        :py:attr:`~arcade.BasicSprite.color` property.

        When :py:meth:`.SpriteList.draw` is called, each pixel will default
        to a value equivalent to the following:

        1. Convert the sampled texture, sprite, and list colors into normalized floats (0.0 to 1.0)
        2. Multiply the color channels together: ``texture_color * sprite_color * spritelist_color``
        3. Multiply the floating point values by 255 and round the result

        """
        ...
    
    @color.setter
    def color(self, color: RGBA255) -> None:
        ...
    
    @property
    def color_normalized(self) -> RGBANormalized:
        """
        Get or set the spritelist color in normalized form (0.0 -> 1.0 floats).
        This property works the same as :py:attr:`~arcade.SpriteList.color`.
        """
        ...
    
    @color_normalized.setter
    def color_normalized(self, value: RGBOrANormalized) -> None:
        ...
    
    @property
    def alpha(self) -> int:
        """
        Get or set the alpha/transparency of the entire spritelist.
        This is a byte value from 0 to 255 were 0 is completely
        transparent/invisible and 255 is opaque.
        """
        ...
    
    @alpha.setter
    def alpha(self, value: int) -> None:
        ...
    
    @property
    def alpha_normalized(self) -> float:
        """
        Get or set the alpha/transparency of all the sprites in the list.
        This is a floating point number from 0.0 to 1.0 were 0.0 is completely
        transparent/invisible and 1.0 is opaque.

        This is a shortcut for setting the alpha value in the spritelist color.

        """
        ...
    
    @alpha_normalized.setter
    def alpha_normalized(self, value: float) -> None:
        ...
    
    @property
    def atlas(self) -> Optional[TextureAtlas]:
        """Get the texture atlas for this sprite list"""
        ...
    
    @property
    def geometry(self) -> Geometry:
        """
        Returns the internal OpenGL geometry for this spritelist.
        This can be used to execute custom shaders with the
        spritelist data.

        One or multiple of the following inputs must be defined in your vertex shader::

            in vec2 in_pos;
            in float in_angle;
            in vec2 in_size;
            in float in_texture;
            in vec4 in_color;
        """
        ...
    
    @property
    def buffer_positions(self) -> Buffer:
        """
        Get the internal OpenGL position buffer for this spritelist.

        The buffer contains 32 bit float values with
        x, y and z positions. These are the center positions
        for each sprite.

        This buffer is attached to the :py:attr:`~arcade.SpriteList.geometry`
        instance with name ``in_pos``.
        """
        ...
    
    @property
    def buffer_sizes(self) -> Buffer:
        """
        Get the internal OpenGL size buffer for this spritelist.

        The buffer contains 32 bit float width and height values.

        This buffer is attached to the :py:attr:`~arcade.SpriteList.geometry`
        instance with name ``in_size``.
        """
        ...
    
    @property
    def buffer_angles(self) -> Buffer:
        """
        Get the internal OpenGL angle buffer for the spritelist.

        This buffer contains a series of 32 bit floats
        representing the rotation angle for each sprite in degrees.

        This buffer is attached to the :py:attr:`~arcade.SpriteList.geometry`
        instance with name ``in_angle``.
        """
        ...
    
    @property
    def buffer_colors(self) -> Buffer:
        """
        Get the internal OpenGL color buffer for this spritelist.

        This buffer contains a series of 32 bit floats representing
        the RGBA color for each sprite. 4 x floats = RGBA.


        This buffer is attached to the :py:attr:`~arcade.SpriteList.geometry`
        instance with name ``in_color``.
        """
        ...
    
    @property
    def buffer_textures(self) -> Buffer:
        """
        Get the internal openGL texture id buffer for the spritelist.

        This buffer contains a series of single 32 bit floats referencing
        a texture ID. This ID references a texture in the texture
        atlas assigned to this spritelist. The ID is used to look up
        texture coordinates in a 32bit floating point texture the
        texter atlas provides. This system makes sure we can resize
        and rebuild a texture atlas without having to rebuild every
        single spritelist.

        This buffer is attached to the :py:attr:`~arcade.SpriteList.geometry`
        instance with name ``in_texture``.

        Note that it should ideally an unsigned integer, but due to
        compatibility we store them as 32 bit floats. We cast them
        to integers in the shader.
        """
        ...
    
    @property
    def buffer_indices(self) -> Buffer:
        """
        Get the internal index buffer for this spritelist.

        The data in the other buffers are not in the correct order
        matching ``spritelist[i]``. The index buffer has to be
        used used to resolve the right order. It simply contains
        a series of integers referencing locations in the other buffers.

        Also note that the length of this buffer might be bigger than
        the number of sprites. Rely on ``len(spritelist)`` for the
        correct length.

        This index buffer is attached to the :py:attr:`~arcade.SpriteList.geometry`
        instance and will be automatically be applied the the input buffers
        when rendering or transforming.
        """
        ...
    
    def index(self, sprite: SpriteType) -> int:
        """
        Return the index of a sprite in the spritelist

        :param sprite: Sprite to find and return the index of

        """
        ...
    
    def clear(self, deep: bool = ...) -> None:
        """
        Remove all the sprites resetting the spritelist
        to it's initial state.

        The complexity of this method is ``O(N)`` with a deep clear (default).
        If ALL the sprites in the list gets garbage collected
        with the list itself you can do an ``O(1)``` clear using
        ``deep=False``. **Make sure you know exactly what you are doing before
        using this option.** Any lingering sprite reference will
        cause a massive memory leak. The ``deep`` option will
        iterate all the sprites and remove their references to
        this spritelist. Sprite and SpriteList have a circular
        reference for performance reasons.
        """
        ...
    
    def pop(self, index: int = ...) -> SpriteType:
        """
        Pop off the last sprite, or the given index, from the list

        :param index: Index of sprite to remove, defaults to -1 for the last item.
        """
        ...
    
    def append(self, sprite: SpriteType) -> None:
        """
        Add a new sprite to the list.

        :param sprite: Sprite to add to the list.
        """
        ...
    
    def swap(self, index_1: int, index_2: int) -> None:
        """
        Swap two sprites by index
        :param index_1: Item index to swap
        :param index_2: Item index to swap
        """
        ...
    
    def remove(self, sprite: SpriteType) -> None:
        """
        Remove a specific sprite from the list.
        :param sprite: Item to remove from the list
        """
        ...
    
    def extend(self, sprites: Union[Iterable[SpriteType], SpriteList[SpriteType]]) -> None:
        """
        Extends the current list with the given iterable

        :param sprites: Iterable of Sprites to add to the list
        """
        ...
    
    def insert(self, index: int, sprite: SpriteType) -> None:
        """
        Inserts a sprite at a given index.

        :param index: The index at which to insert
        :param sprite: The sprite to insert
        """
        ...
    
    def reverse(self) -> None:
        """
        Reverses the current list in-place
        """
        ...
    
    def shuffle(self) -> None:
        """
        Shuffles the current list in-place
        """
        ...
    
    def sort(self, *, key: Callable, reverse: bool = ...) -> None:
        """
        Sort the spritelist in place using ``<`` comparison between sprites.
        This function is similar to python's :py:meth:`list.sort`.

        Example sorting sprites based on y-axis position using a lambda::

            # Normal order
            spritelist.sort(key=lambda x: x.position[1])
            # Reversed order
            spritelist.sort(key=lambda x: x.position[1], reverse=True)

        Example sorting sprites using a function::

            # More complex sorting logic can be applied, but let's just stick to y position
            def create_y_pos_comparison(sprite):
                return sprite.position[1]

            spritelist.sort(key=create_y_pos_comparison)

        :param key: A function taking a sprite as an argument returning a comparison key
        :param reverse: If set to ``True`` the sprites will be sorted in reverse
        """
        ...
    
    def disable_spatial_hashing(self) -> None:
        """
        Deletes the internal spatial hash object
        """
        ...
    
    def enable_spatial_hashing(self, spatial_hash_cell_size: int = ...) -> None:
        """Turn on spatial hashing."""
        ...
    
    def update(self) -> None:
        """
        Call the update() method on each sprite in the list.
        """
        ...
    
    def on_update(self, delta_time: float = ...) -> None:
        """
        Update the sprite. Similar to update, but also takes a delta-time.
        """
        ...
    
    def update_animation(self, delta_time: float = ...) -> None:
        """
        Call the update_animation in every sprite in the sprite list.
        """
        ...
    
    center = ...
    def rescale(self, factor: float) -> None:
        """Rescale all sprites in the list relative to the spritelists center."""
        ...
    
    def move(self, change_x: float, change_y: float) -> None:
        """
        Moves all Sprites in the list by the same amount.
        This can be a very expensive operation depending on the
        size of the sprite list.

        :param change_x: Amount to change all x values by
        :param change_y: Amount to change all y values by
        """
        ...
    
    def preload_textures(self, texture_list: Iterable[Texture]) -> None:
        """
        Preload a set of textures that will be used for sprites in this
        sprite list.

        :param texture_list: List of textures.
        """
        ...
    
    def write_sprite_buffers_to_gpu(self) -> None:
        """
        Ensure buffers are resized and fresh sprite data
        is written into the internal sprite buffers.

        This is automatically called in :py:meth:`SpriteList.draw`,
        but there are instances when using custom shaders
        we need to force this to happen since we might
        have not called :py:meth:`SpriteList.draw` since the
        spritelist was modified.

        If you have added, removed, moved or changed ANY
        sprite property this method will synchronize the
        data on the gpu side (buffer resizing and writing in new data).
        """
        ...
    
    def initialize(self) -> None:
        """
        Request immediate creation of OpenGL resources for this list.

        Calling this method is optional. It only has an effect for lists
        created with ``lazy=True``. If this method is not called,
        uninitialized sprite lists will automatically initialize OpenGL
        resources on their first :py:meth:`~SpriteList.draw` call instead.

        This method is useful for performance optimization, advanced
        techniques, and writing tests. Do not call it across thread
        boundaries. See :ref:`pg_spritelist_advanced_lazy_spritelists`
        to learn more.
        """
        ...
    
    def draw(self, *, filter: Optional[Union[PyGLenum, OpenGlFilter]] = ..., pixelated: Optional[bool] = ..., blend_function: Optional[BlendFunction] = ...) -> None:
        """
        Draw this list of sprites.

        Uninitialized sprite lists will first create OpenGL resources
        before drawing. This may cause a performance stutter when the
        following are true:

        1. You created the sprite list with ``lazy=True``
        2. You did not call :py:meth:`~SpriteList.initialize` before drawing
        3. You are initializing many sprites and/or lists at once

        See :ref:`pg_spritelist_advanced_lazy_spritelists` to learn more.

        :param filter: Optional parameter to set OpenGL filter, such as
                       `gl.GL_NEAREST` to avoid smoothing.
        :param pixelated: ``True`` for pixelated and ``False`` for smooth interpolation.
                          Shortcut for setting filter=GL_NEAREST.
        :param blend_function: Optional parameter to set the OpenGL blend function used for drawing the
                         sprite list, such as 'arcade.Window.ctx.BLEND_ADDITIVE' or 'arcade.Window.ctx.BLEND_DEFAULT'
        """
        ...
    
    def draw_hit_boxes(self, color: RGBA255 = ..., line_thickness: float = ...) -> None:
        """Draw all the hit boxes in this list"""
        ...
    


