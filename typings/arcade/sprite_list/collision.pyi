"""
This type stub file was generated by pyright.
"""

from typing import Iterable, List, Optional, Tuple
from arcade.sprite import BasicSprite, SpriteType
from arcade.types import Point
from arcade.types.rect import Rect
from .sprite_list import SpriteList

def get_distance_between_sprites(sprite1: SpriteType, sprite2: SpriteType) -> float:
    """
    Returns the distance between the center of two given sprites

    :param sprite1: Sprite one
    :param sprite2: Sprite two
    :return: Distance
    """
    ...

def get_closest_sprite(sprite: SpriteType, sprite_list: SpriteList) -> Optional[Tuple[SpriteType, float]]:
    """
    Given a Sprite and SpriteList, returns the closest sprite, and its distance.

    :param sprite: Target sprite
    :param sprite_list: List to search for closest sprite.

    :return: A tuple containing the closest sprite and the minimum distance.
             If the spritelist is empty we return ``None``.
    """
    ...

def check_for_collision(sprite1: BasicSprite, sprite2: BasicSprite) -> bool:
    """
    Check for a collision between two sprites.

    :param sprite1: First sprite
    :param sprite2: Second sprite

    :Returns: True or False depending if the sprites intersect.
    """
    ...

def check_for_collision_with_list(sprite: SpriteType, sprite_list: SpriteList, method: int = ...) -> List[SpriteType]:
    """
    Check for a collision between a sprite, and a list of sprites.

    :param sprite: Sprite to check
    :param sprite_list: SpriteList to check against
    :param method: Collision check method.
        0 is auto-select. (spatial if available, GPU if 1500+ sprites, else simple)
        1 is Spatial Hashing if available,
        2 is GPU based, 3 is simple check-everything. Defaults to 0.

    :returns: List of sprites colliding, or an empty list.
    """
    ...

def check_for_collision_with_lists(sprite: BasicSprite, sprite_lists: Iterable[SpriteList[SpriteType]], method=...) -> List[SpriteType]:
    """
    Check for a collision between a Sprite, and a list of SpriteLists.

    :param sprite: Sprite to check
    :param sprite_lists: SpriteLists to check against
    :param method: Collision check method. 1 is Spatial Hashing if available,
        2 is GPU based, 3 is slow CPU-bound check-everything. Defaults to 1.

    :returns: List of sprites colliding, or an empty list.
    """
    ...

def get_sprites_at_point(point: Point, sprite_list: SpriteList[SpriteType]) -> List[SpriteType]:
    """
    Get a list of sprites at a particular point. This function sees if any sprite overlaps
    the specified point. If a sprite has a different center_x/center_y but touches the point,
    this will return that sprite.

    :param point: Point to check
    :param sprite_list: SpriteList to check against

    :returns: List of sprites colliding, or an empty list.
    """
    ...

def get_sprites_at_exact_point(point: Point, sprite_list: SpriteList[SpriteType]) -> List[SpriteType]:
    """
    Get a list of sprites whose center_x, center_y match the given point.
    This does NOT return sprites that overlap the point, the center has to be an exact match.

    :param point: Point to check
    :param sprite_list: SpriteList to check against

    :returns: List of sprites colliding, or an empty list.
    """
    ...

def get_sprites_in_rect(rect: Rect, sprite_list: SpriteList[SpriteType]) -> List[SpriteType]:
    """
    Get a list of sprites in a particular rectangle. This function sees if any sprite overlaps
    the specified rectangle. If a sprite has a different center_x/center_y but touches the rectangle,
    this will return that sprite.

    The rectangle is specified as a tuple of (left, right, bottom, top).

    :param rect: Rectangle to check
    :param sprite_list: SpriteList to check against

    :returns: List of sprites colliding, or an empty list.
    """
    ...

