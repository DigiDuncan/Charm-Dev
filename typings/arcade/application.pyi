from logging import Logger
from arcade.camera.data_types import Projector
from arcade.camera.default import DefaultProjector
from arcade.experimental.input import ActionState
import pyglet
from pyglet.display.base import Screen, ScreenMode
from arcade import Section, SectionManager
from arcade.context import ArcadeContext
from arcade.types import Color, RGBANormalized, RGBOrA255
from arcade.types.rect import Rect
from pyglet.window import MouseCursor

LOG: Logger = ...
MOUSE_BUTTON_LEFT: int = ...
MOUSE_BUTTON_MIDDLE: int = ...
MOUSE_BUTTON_RIGHT: int = ...
_window: Window
__all__ = ["get_screens", "NoOpenGLException", "Window", "open_window", "View", "MOUSE_BUTTON_LEFT", "MOUSE_BUTTON_MIDDLE", "MOUSE_BUTTON_RIGHT"]
def get_screens() -> list[Screen]: ...
class NoOpenGLException(Exception): ...

class Window(pyglet.window.Window):
    def __init__(self, width: int = ..., height: int = ..., title: str | None = ..., fullscreen: bool = ..., resizable: bool = ..., update_rate: float = ..., antialiasing: bool = ..., gl_version: tuple[int, int] = ..., screen: pyglet.display.Screen | None = ..., style: str | None = ..., visible: bool = ..., vsync: bool = ..., gc_mode: str = ..., center_window: bool = ..., samples: int = ..., enable_polling: bool = ..., gl_api: str = ..., draw_rate: float = ...) -> None: ...
    @property
    def current_view(self) -> View | None: ...
    @property
    def ctx(self) -> ArcadeContext: ...
    def clear(self, color: RGBOrA255 | None = ..., color_normalized: RGBANormalized | None = ..., viewport: tuple[int, int, int, int] | None = ...) -> None: ...
    @property
    def background_color(self) -> Color: ...
    @background_color.setter
    def background_color(self, value: RGBOrA255) -> None:
        ...
    @property
    def rect(self) -> Rect: ...
    def run(self) -> None: ...
    def close(self) -> None: ...
    def set_fullscreen(self, fullscreen: bool = ..., screen: Screen | None = ..., mode: ScreenMode | None = ..., width: float | None = ..., height: float | None = ...) -> None: ...
    def center_window(self) -> None: ...
    def on_update(self, delta_time: float) -> None: ...
    def set_update_rate(self, rate: float) -> None: ...
    def set_draw_rate(self, rate: float) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> None: ...
    def on_mouse_press(self, x: int, y: int, button: int, modifiers: int) -> None: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, buttons: int, modifiers: int) -> None: ...
    def on_mouse_release(self, x: int, y: int, button: int, modifiers: int) -> None: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: int, scroll_y: int) -> None: ...
    def set_mouse_visible(self, visible: bool = ...) -> None: ...
    def on_action(self, action_name: str, state: ActionState) -> None: ...
    def on_key_press(self, symbol: int, modifiers: int) -> None: ...
    def on_key_release(self, symbol: int, modifiers: int) -> None: ...
    def on_draw(self) -> None: ...
    def on_resize(self, width: int, height: int)-> None: ...
    def set_min_size(self, width: int, height: int) -> None: ...
    def set_max_size(self, width: int, height: int) -> None: ...
    def set_size(self, width: int, height: int) -> None: ...
    def get_size(self) -> tuple[int, int]: ...
    def get_location(self) -> tuple[int, int]: ...
    def set_visible(self, visible: bool = ...) -> None: ...
    def use(self) -> None: ...
    @property
    def default_camera(self) -> DefaultProjector: ...
    @property
    def current_camera(self) -> Projector: ...
    @current_camera.setter
    def current_camera(self, next_camera: Projector) -> None: ...
    @property
    def viewport(self) -> tuple[int, int, int, int]: ...
    @viewport.setter
    def viewport(self, values: tuple[int, int, int, int]) -> None: ...
    def test(self, frames: int = ...) -> None: ...
    def show_view(self, new_view: View) -> None: ...
    def hide_view(self) -> None: ...
    def flip(self) -> None: ...
    def switch_to(self) -> None: ...
    def set_caption(self, caption: str) -> None: ...
    def set_minimum_size(self, width: int, height: int) -> None: ...
    def set_maximum_size(self, width: int, height: int) -> None: ...
    def set_location(self, x: int, y: int) -> None: ...
    def activate(self) -> None: ...
    def minimize(self) -> None: ...
    def maximize(self) -> None: ...
    def set_vsync(self, vsync: bool) -> None:  ...
    def set_mouse_platform_visible(self, platform_visible: bool | None = ...) -> None: ...
    def set_exclusive_mouse(self, exclusive: bool = ...) -> None: ...
    def set_exclusive_keyboard(self, exclusive: bool = ...) -> None: ...
    def get_system_mouse_cursor(self, name: str) -> MouseCursor: ...
    def dispatch_events(self) -> None: ...
    def on_mouse_enter(self, x: int, y: int) -> None: ...
    def on_mouse_leave(self, x: int, y: int) -> None: ...
    @property
    def center(self) -> tuple[float, float]: ...
    @property
    def center_x(self) -> float: ...
    @property
    def center_y(self) -> float: ...

def open_window(width: int, height: int, window_title: str | None = ..., resizable: bool = ..., antialiasing: bool = ...) -> Window: ...

class View:
    def __init__(self, window: Window | None = ...) -> None:
        ...
    @property
    def section_manager(self) -> SectionManager: ...
    @property
    def has_sections(self) -> bool: ...
    def add_section(self, section: Section, at_index: int | None = ..., at_draw_order: int | None = ...) -> None: ...
    def clear(self, color: RGBOrA255 | None = ..., color_normalized: RGBANormalized | None = ..., viewport: tuple[int, int, int, int] | None = ...) -> None: ...
    def on_update(self, delta_time: float) -> None: ...
    def on_draw(self) -> None: ...
    def on_show(self) -> None: ...
    def on_show_view(self) -> None: ...
    def on_hide_view(self) -> None: ...
    def on_mouse_motion(self, x: int, y: int, dx: int, dy: int) -> None: ...
    def on_mouse_press(self, x: int, y: int, button: int, modifiers: int) -> None: ...
    def on_mouse_drag(self, x: int, y: int, dx: int, dy: int, _buttons: int, _modifiers: int) -> None: ...
    def on_mouse_release(self, x: int, y: int, button: int, modifiers: int) -> None: ...
    def on_mouse_scroll(self, x: int, y: int, scroll_x: int, scroll_y: int) -> None: ...
    def on_key_press(self, symbol: int, modifiers: int) -> None: ...
    def on_key_release(self, _symbol: int, _modifiers: int) -> None: ...
    def on_resize(self, width: int, height: int) -> None: ...
    def on_mouse_enter(self, x: int, y: int) -> None: ...
    def on_mouse_leave(self, x: int, y: int) -> None: ...
