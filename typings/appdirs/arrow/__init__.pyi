"""
This type stub file was generated by pyright.
"""

import sys
from math import trunc
from typing import Any, ClassVar, Dict, List, Literal, Mapping, Optional, Sequence, Tuple, Type, Union, cast

"""Provides internationalization for arrow in over 60 languages and dialects."""
if sys.version_info < (3, 8):
    ...
else:
    ...
TimeFrameLiteral = Literal["now", "second", "seconds", "minute", "minutes", "hour", "hours", "day", "days", "week", "weeks", "month", "months", "quarter", "quarters", "year", "years",]
_TimeFrameElements = Union[str, Sequence[str], Mapping[str, str], Mapping[str, Sequence[str]]]
_locale_map: Dict[str, Type[Locale]] = ...
def get_locale(name: str) -> Locale:
    """Returns an appropriate :class:`Locale <arrow.locales.Locale>`
    corresponding to an input locale name.

    :param name: the name of the locale.

    """
    ...

def get_locale_by_class_name(name: str) -> Locale:
    """Returns an appropriate :class:`Locale <arrow.locales.Locale>`
    corresponding to an locale class name.

    :param name: the name of the locale class.

    """
    ...

class Locale:
    """Represents locale-specific data and functionality."""
    names: ClassVar[List[str]] = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, _TimeFrameElements]] = ...
    meridians: ClassVar[Dict[str, str]] = ...
    past: ClassVar[str]
    future: ClassVar[str]
    and_word: ClassVar[Optional[str]] = ...
    month_names: ClassVar[List[str]] = ...
    month_abbreviations: ClassVar[List[str]] = ...
    day_names: ClassVar[List[str]] = ...
    day_abbreviations: ClassVar[List[str]] = ...
    ordinal_day_re: ClassVar[str] = ...
    _month_name_to_ordinal: Optional[Dict[str, int]]
    def __init_subclass__(cls, **kwargs: Any) -> None:
        ...
    
    def __init__(self) -> None:
        ...
    
    def describe(self, timeframe: TimeFrameLiteral, delta: Union[float, int] = ..., only_distance: bool = ...) -> str:
        """Describes a delta within a timeframe in plain language.

        :param timeframe: a string representing a timeframe.
        :param delta: a quantity representing a delta in a timeframe.
        :param only_distance: return only distance eg: "11 seconds" without "in" or "ago" keywords
        """
        ...
    
    def describe_multi(self, timeframes: Sequence[Tuple[TimeFrameLiteral, Union[int, float]]], only_distance: bool = ...) -> str:
        """Describes a delta within multiple timeframes in plain language.

        :param timeframes: a list of string, quantity pairs each representing a timeframe and delta.
        :param only_distance: return only distance eg: "2 hours and 11 seconds" without "in" or "ago" keywords
        """
        ...
    
    def day_name(self, day: int) -> str:
        """Returns the day name for a specified day of the week.

        :param day: the ``int`` day of the week (1-7).

        """
        ...
    
    def day_abbreviation(self, day: int) -> str:
        """Returns the day abbreviation for a specified day of the week.

        :param day: the ``int`` day of the week (1-7).

        """
        ...
    
    def month_name(self, month: int) -> str:
        """Returns the month name for a specified month of the year.

        :param month: the ``int`` month of the year (1-12).

        """
        ...
    
    def month_abbreviation(self, month: int) -> str:
        """Returns the month abbreviation for a specified month of the year.

        :param month: the ``int`` month of the year (1-12).

        """
        ...
    
    def month_number(self, name: str) -> Optional[int]:
        """Returns the month number for a month specified by name or abbreviation.

        :param name: the month name or abbreviation.

        """
        ...
    
    def year_full(self, year: int) -> str:
        """Returns the year for specific locale if available

        :param year: the ``int`` year (4-digit)
        """
        ...
    
    def year_abbreviation(self, year: int) -> str:
        """Returns the year for specific locale if available

        :param year: the ``int`` year (4-digit)
        """
        ...
    
    def meridian(self, hour: int, token: Any) -> Optional[str]:
        """Returns the meridian indicator for a specified hour and format token.

        :param hour: the ``int`` hour of the day.
        :param token: the format token.
        """
        ...
    
    def ordinal_number(self, n: int) -> str:
        """Returns the ordinal format of a given integer

        :param n: an integer
        """
        ...
    


class EnglishLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    ordinal_day_re = ...
    def describe(self, timeframe: TimeFrameLiteral, delta: Union[int, float] = ..., only_distance: bool = ...) -> str:
        """Describes a delta within a timeframe in plain language.

        :param timeframe: a string representing a timeframe.
        :param delta: a quantity representing a delta in a timeframe.
        :param only_distance: return only distance eg: "11 seconds" without "in" or "ago" keywords
        """
        ...
    


class ItalianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    ordinal_day_re = ...


class SpanishLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    ordinal_day_re = ...


class FrenchBaseLocale(Locale):
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    day_names = ...
    day_abbreviations = ...
    ordinal_day_re = ...


class FrenchLocale(FrenchBaseLocale, Locale):
    names = ...
    month_abbreviations = ...


class FrenchCanadianLocale(FrenchBaseLocale, Locale):
    names = ...
    month_abbreviations = ...


class GreekLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class JapaneseLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SwedishLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class FinnishLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class ChineseCNLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class ChineseTWLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class HongKongLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class KoreanLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    special_dayframes = ...
    special_yearframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class DutchLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SlavicBaseLocale(Locale):
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]]
    ...


class BelarusianLocale(SlavicBaseLocale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class PolishLocale(SlavicBaseLocale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class RussianLocale(SlavicBaseLocale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class AfrikaansLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class BulgarianLocale(SlavicBaseLocale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class UkrainianLocale(SlavicBaseLocale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class MacedonianLocale(SlavicBaseLocale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class GermanBaseLocale(Locale):
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    timeframes_only_distance = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    def describe(self, timeframe: TimeFrameLiteral, delta: Union[int, float] = ..., only_distance: bool = ...) -> str:
        """Describes a delta within a timeframe in plain language.

        :param timeframe: a string representing a timeframe.
        :param delta: a quantity representing a delta in a timeframe.
        :param only_distance: return only distance eg: "11 seconds" without "in" or "ago" keywords
        """
        ...
    


class GermanLocale(GermanBaseLocale, Locale):
    names = ...


class SwissLocale(GermanBaseLocale, Locale):
    names = ...


class AustrianLocale(GermanBaseLocale, Locale):
    names = ...
    month_names = ...


class NorwegianLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class NewNorwegianLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class PortugueseLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class BrazilianPortugueseLocale(PortugueseLocale):
    names = ...
    past = ...


class TagalogLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    meridians = ...


class VietnameseLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class TurkishLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class AzerbaijaniLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class ArabicLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class LevantArabicLocale(ArabicLocale):
    names = ...
    month_names = ...
    month_abbreviations = ...


class AlgeriaTunisiaArabicLocale(ArabicLocale):
    names = ...
    month_names = ...
    month_abbreviations = ...


class MauritaniaArabicLocale(ArabicLocale):
    names = ...
    month_names = ...
    month_abbreviations = ...


class MoroccoArabicLocale(ArabicLocale):
    names = ...
    month_names = ...
    month_abbreviations = ...


class IcelandicLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class DanishLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class MalayalamLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class HindiLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class CzechLocale(Locale):
    names = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    past = ...
    future = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SlovakLocale(Locale):
    names = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    past = ...
    future = ...
    and_word = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class FarsiLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class HebrewLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    def describe_multi(self, timeframes: Sequence[Tuple[TimeFrameLiteral, Union[int, float]]], only_distance: bool = ...) -> str:
        """Describes a delta within multiple timeframes in plain language.
        In Hebrew, the and word behaves a bit differently.

        :param timeframes: a list of string, quantity pairs each representing a timeframe and delta.
        :param only_distance: return only distance eg: "2 hours and 11 seconds" without "in" or "ago" keywords
        """
        ...
    


class MarathiLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class CatalanLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class BasqueLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class HungarianLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    meridians = ...


class EsperantoLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    meridians = ...
    ordinal_day_re = ...


class ThaiLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    meridians = ...
    BE_OFFSET = ...
    def year_full(self, year: int) -> str:
        """Thai always use Buddhist Era (BE) which is CE + 543"""
        ...
    
    def year_abbreviation(self, year: int) -> str:
        """Thai always use Buddhist Era (BE) which is CE + 543"""
        ...
    


class LaotianLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    BE_OFFSET = ...
    def year_full(self, year: int) -> str:
        """Lao always use Buddhist Era (BE) which is CE + 543"""
        ...
    
    def year_abbreviation(self, year: int) -> str:
        """Lao always use Buddhist Era (BE) which is CE + 543"""
        ...
    


class BengaliLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class RomanshLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class RomanianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SlovenianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class IndonesianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class NepaliLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class EstonianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Mapping[str, str]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class LatvianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SwahiliLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class CroatianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class LatinLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class LithuanianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class MalayLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class MalteseLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SamiLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class OdiaLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SerbianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[str, Mapping[str, str]]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class LuxembourgishLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    timeframes_only_distance = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    def describe(self, timeframe: TimeFrameLiteral, delta: Union[int, float] = ..., only_distance: bool = ...) -> str:
        ...
    


class ZuluLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[Mapping[str, str], str]]] = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class TamilLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class AlbanianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class GeorgianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class SinhalaLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[Mapping[str, str], str]]] = ...
    timeframes_only_distance = ...
    def describe(self, timeframe: TimeFrameLiteral, delta: Union[float, int] = ..., only_distance: bool = ...) -> str:
        """Describes a delta within a timeframe in plain language.

        :param timeframe: a string representing a timeframe.
        :param delta: a quantity representing a delta in a timeframe.
        :param only_distance: return only distance eg: "11 seconds" without "in" or "ago" keywords
        """
        ...
    
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class UrduLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class KazakhLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class AmharicLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes: ClassVar[Mapping[TimeFrameLiteral, Union[Mapping[str, str], str]]] = ...
    timeframes_only_distance = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...
    def describe(self, timeframe: TimeFrameLiteral, delta: Union[float, int] = ..., only_distance: bool = ...) -> str:
        """Describes a delta within a timeframe in plain language.

        :param timeframe: a string representing a timeframe.
        :param delta: a quantity representing a delta in a timeframe.
        :param only_distance: return only distance eg: "11 seconds" without "in" or "ago" keywords
        """
        ...
    


class ArmenianLocale(Locale):
    names = ...
    past = ...
    future = ...
    and_word = ...
    timeframes = ...
    meridians = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


class UzbekLocale(Locale):
    names = ...
    past = ...
    future = ...
    timeframes = ...
    month_names = ...
    month_abbreviations = ...
    day_names = ...
    day_abbreviations = ...


