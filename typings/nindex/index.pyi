"""
This type stub file was generated by pyright.
"""

from typing import Generic, Sequence, TypeVar, Union

T = TypeVar("T")
K = TypeVar("K")
class Index(Generic[K, T]):
    """
    Class to provide efficient indexing and slicing operations into a list of objects by certain attribute key.

    This with *only* work if:
    - The list is sorted
    - The list doesn't change

    I have not tested how this will handle duplicate values.
    """
    def __init__(self, items: Sequence[T], keyattr: str) -> None:
        ...
    
    def __getitem__(self, key: Union[slice, K]) -> T:
        ...
    
    def eq(self, key: K) -> T:
        ...
    
    def lteq(self, key: K) -> T:
        ...
    
    def lt(self, key: K) -> T:
        ...
    
    def gteq(self, key: K) -> T:
        ...
    
    def gt(self, key: K) -> T:
        ...
    
    def eq_index(self, key: K) -> int:
        ...
    
    def lteq_index(self, key: K) -> int:
        ...
    
    def lt_index(self, key: K) -> int:
        ...
    
    def gt_index(self, key: K) -> int:
        ...
    
    def gteq_index(self, key: K) -> int:
        ...
    


