import asyncio
from collections.abc import Callable, Iterable
from types import FunctionType
from typing import Any, Never, TypedDict
from .baseclient import BaseClient

class AuthorizeResponseJson(TypedDict):
    code: str

class AuthenticateResponseJson(TypedDict):
    access_token: str

class GetGuildsResponseJsonGuild(TypedDict):
    id: str
    name: str

class GetGuildsResponseJson(TypedDict):
    guilds: list[GetGuildsResponseJsonGuild]

class GetGuildResponseJson(TypedDict):
    id: str
    name: str
    icon_url: str | None
    members: list[Never]

class Client(BaseClient):
    def __init__(self, client_id: str, pipe: str | None = None, loop: asyncio.AbstractEventLoop | None = None, handler: FunctionType | None = None, isasync: bool = False) -> None: ...
    def register_event(self, event: str, func: Callable[[dict[str, Any]], None], args: dict[str, Any] | None = ...) -> None: ...
    def unregister_event(self, event: str, args: dict[str, Any] | None = ...) -> None: ...
    def on_event(self, data: Iterable[int]) -> None: ...
    def authorize(self, client_id: str, scopes: list[str]) -> AuthorizeResponseJson: ...
    def authenticate(self, token: str) -> AuthenticateResponseJson: ...
    def get_guilds(self) -> GetGuildsResponseJson: ...
    def get_guild(self, guild_id: str) -> GetGuildResponseJson: ...
    def get_channel(self, channel_id: str) -> dict[str, Any]: ...
    def get_channels(self, guild_id: str) -> dict[str, Any]: ...
    def set_user_voice_settings(self, user_id: str, pan_left: float = ..., pan_right: float = ..., volume: int = ..., mute: bool = ...) -> dict[str, Any]: ...
    def select_voice_channel(self, channel_id: str) -> dict[str, Any]: ...
    def get_selected_voice_channel(self) -> dict[str, Any]: ...
    def select_text_channel(self, channel_id: str) -> dict[str, Any]: ...
    def set_activity(self, pid: int = ..., state: str = ..., details: str = ..., start: int = ..., end: int = ..., large_image: str = ..., large_text: str = ..., small_image: str = ..., small_text: str = ..., party_id: str = ..., party_size: list[Any] = ..., join: str = ..., spectate: str = ..., match: str = ..., buttons: list[Any] = ..., instance: bool = ...) -> dict[str, Any]: ...
    def clear_activity(self, pid: int = ...) -> dict[str, Any]: ...
    def subscribe(self, event: str, args: dict[str, Any] | None = ...) -> dict[str, Any]: ...
    def unsubscribe(self, event: str, args: dict[str, Any] | None = ...) -> dict[str, Any]: ...
    def get_voice_settings(self) -> dict[str, Any]: ...
    def set_voice_settings(self, _input: dict[str, Any] | None = ..., output: dict[str, Any] | None = ..., mode: dict[str, Any] | None = ..., automatic_gain_control: bool = ..., echo_cancellation: bool = ..., noise_suppression: bool = ..., qos: bool = ..., silence_warning: bool = ..., deaf: bool = ..., mute: bool = ...) -> dict[str, Any]: ...
    def capture_shortcut(self, action: str) -> dict[str, Any]: ...
    def send_activity_join_invite(self, user_id: str) -> dict[str, Any]: ...
    def close_activity_request(self, user_id: str) -> dict[str, Any]: ...
    def close(self) -> None: ...
    def start(self) -> None: ...
    def read(self) -> dict[str, Any]: ...

class AioClient(BaseClient):
    def __init__(self, client_id: str, pipe: str | None = None, loop: asyncio.AbstractEventLoop | None = None, handler: FunctionType | None = None, isasync: bool = False) -> None: ...
    async def register_event(self, event: str, func: Callable[[dict[str, Any]], None], args: dict[str, Any] | None = ...) -> None: ...
    async def unregister_event(self, event: str, args: dict[str, Any] | None = ...) -> None: ...
    async def on_event(self, data: Iterable[int]) -> None: ...
    async def authorize(self, client_id: str, scopes: list[str]) -> dict[str, Any]: ...
    async def authenticate(self, token: str) -> dict[str, Any]: ...
    async def get_guilds(self) -> dict[str, Any]: ...
    async def get_guild(self, guild_id: str) -> dict[str, Any]: ...
    async def get_channel(self, channel_id: str) -> dict[str, Any]: ...
    async def get_channels(self, guild_id: str) -> dict[str, Any]: ...
    async def set_user_voice_settings(self, user_id: str, pan_left: float = ..., pan_right: float = ..., volume: int = ..., mute: bool = ...) -> dict[str, Any]: ...
    async def select_voice_channel(self, channel_id: str) -> dict[str, Any]: ...
    async def get_selected_voice_channel(self) -> dict[str, Any]: ...
    async def select_text_channel(self, channel_id: str) -> dict[str, Any]: ...
    async def set_activity(self, pid: int = ..., state: str = ..., details: str = ..., start: int = ..., end: int = ..., large_image: str = ..., large_text: str = ..., small_image: str = ..., small_text: str = ..., party_id: str = ..., party_size: list[Any] = ..., join: str = ..., spectate: str = ..., buttons: list[Any] = ..., match: str = ..., instance: bool = ...) -> dict[str, Any]: ...
    async def clear_activity(self, pid: int = ...) -> dict[str, Any]: ...
    async def subscribe(self, event: str, args: dict[str, Any] | None = ...) -> dict[str, Any]: ...
    async def unsubscribe(self, event: str, args: dict[str, Any] | None = ...) -> dict[str, Any]: ...
    async def get_voice_settings(self) -> dict[str, Any]: ...
    async def set_voice_settings(self, _input: dict[str, Any] = ..., output: dict[str, Any] = ..., mode: dict[str, Any] = ..., automatic_gain_control: bool = ..., echo_cancellation: bool = ..., noise_suppression: bool = ..., qos: bool = ..., silence_warning: bool = ..., deaf: bool = ..., mute: bool = ...) -> dict[str, Any]: ...
    async def capture_shortcut(self, action: str) -> dict[str, Any]: ...
    async def send_activity_join_invite(self, user_id: str) -> dict[str, Any]: ...
    async def close_activity_request(self, user_id: str) -> dict[str, Any]: ...
    def close(self)-> None: ...
    async def start(self)-> None: ...
    async def read(self)-> dict[str, Any]: ...
